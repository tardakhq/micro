// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `client/client.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Request {
    // message fields
    pub service: ::std::string::String,
    pub endpoint: ::std::string::String,
    pub content_type: ::std::string::String,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Request {
    fn default() -> &'a Request {
        <Request as ::protobuf::Message>::default_instance()
    }
}

impl Request {
    pub fn new() -> Request {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // string endpoint = 2;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }

    // string content_type = 3;


    pub fn get_content_type(&self) -> &str {
        &self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ::std::string::String) {
        self.content_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_type(&mut self) -> &mut ::std::string::String {
        &mut self.content_type
    }

    // Take field
    pub fn take_content_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content_type, ::std::string::String::new())
    }

    // bytes body = 4;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Request {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content_type)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.endpoint);
        }
        if !self.content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.content_type);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(2, &self.endpoint)?;
        }
        if !self.content_type.is_empty() {
            os.write_string(3, &self.content_type)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(4, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Request {
        Request::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &Request| { &m.service },
                |m: &mut Request| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endpoint",
                |m: &Request| { &m.endpoint },
                |m: &mut Request| { &mut m.endpoint },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content_type",
                |m: &Request| { &m.content_type },
                |m: &mut Request| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &Request| { &m.body },
                |m: &mut Request| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Request>(
                "Request",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Request {
        static instance: ::protobuf::rt::LazyV2<Request> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Request::new)
    }
}

impl ::protobuf::Clear for Request {
    fn clear(&mut self) {
        self.service.clear();
        self.endpoint.clear();
        self.content_type.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Request {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Request {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Response {
    // message fields
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Response {
    fn default() -> &'a Response {
        <Response as ::protobuf::Message>::default_instance()
    }
}

impl Response {
    pub fn new() -> Response {
        ::std::default::Default::default()
    }

    // bytes body = 1;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Response {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.body.is_empty() {
            os.write_bytes(1, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Response {
        Response::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &Response| { &m.body },
                |m: &mut Response| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Response>(
                "Response",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Response {
        static instance: ::protobuf::rt::LazyV2<Response> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Response::new)
    }
}

impl ::protobuf::Clear for Response {
    fn clear(&mut self) {
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Response {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub topic: ::std::string::String,
    pub content_type: ::std::string::String,
    pub body: ::std::vec::Vec<u8>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // string content_type = 2;


    pub fn get_content_type(&self) -> &str {
        &self.content_type
    }
    pub fn clear_content_type(&mut self) {
        self.content_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_content_type(&mut self, v: ::std::string::String) {
        self.content_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_content_type(&mut self) -> &mut ::std::string::String {
        &mut self.content_type
    }

    // Take field
    pub fn take_content_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.content_type, ::std::string::String::new())
    }

    // bytes body = 3;


    pub fn get_body(&self) -> &[u8] {
        &self.body
    }
    pub fn clear_body(&mut self) {
        self.body.clear();
    }

    // Param is passed by value, moved
    pub fn set_body(&mut self, v: ::std::vec::Vec<u8>) {
        self.body = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_body(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.body
    }

    // Take field
    pub fn take_body(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.body, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.content_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.body)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if !self.content_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.content_type);
        }
        if !self.body.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.body);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if !self.content_type.is_empty() {
            os.write_string(2, &self.content_type)?;
        }
        if !self.body.is_empty() {
            os.write_bytes(3, &self.body)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &Message| { &m.topic },
                |m: &mut Message| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "content_type",
                |m: &Message| { &m.content_type },
                |m: &mut Message| { &mut m.content_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "body",
                |m: &Message| { &m.body },
                |m: &mut Message| { &mut m.body },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Message>(
                "Message",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Message {
        static instance: ::protobuf::rt::LazyV2<Message> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Message::new)
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.topic.clear();
        self.content_type.clear();
        self.body.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13client/client.proto\x12\x06client\"v\n\x07Request\x12\x18\n\x07ser\
    vice\x18\x01\x20\x01(\tR\x07service\x12\x1a\n\x08endpoint\x18\x02\x20\
    \x01(\tR\x08endpoint\x12!\n\x0ccontent_type\x18\x03\x20\x01(\tR\x0bconte\
    ntType\x12\x12\n\x04body\x18\x04\x20\x01(\x0cR\x04body\"\x1e\n\x08Respon\
    se\x12\x12\n\x04body\x18\x01\x20\x01(\x0cR\x04body\"V\n\x07Message\x12\
    \x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12!\n\x0ccontent_type\x18\
    \x02\x20\x01(\tR\x0bcontentType\x12\x12\n\x04body\x18\x03\x20\x01(\x0cR\
    \x04body2\x97\x01\n\x06Client\x12+\n\x04Call\x12\x0f.client.Request\x1a\
    \x10.client.Response\"\0\x121\n\x06Stream\x12\x0f.client.Request\x1a\x10\
    .client.Response\"\0(\x010\x01\x12-\n\x07Publish\x12\x0f.client.Message\
    \x1a\x0f.client.Message\"\0B/Z-github.com/micro/micro/v3/proto/client;cl\
    ientJ\xb5\x08\n\x06\x12\x04\0\0\x1f\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\x08\n\x01\x02\x12\x03\x02\x08\x0e\n\x08\n\x01\x08\x12\x03\x04\0D\n\t\
    \n\x02\x08\x0b\x12\x03\x04\0D\n2\n\x02\x06\0\x12\x04\x07\0\x0e\x01\x1a&\
    \x20Client\x20is\x20the\x20micro\x20client\x20interface\n\n\n\n\x03\x06\
    \0\x01\x12\x03\x07\x08\x0e\n6\n\x04\x06\0\x02\0\x12\x03\t\x08/\x1a)\x20C\
    all\x20allows\x20a\x20single\x20request\x20to\x20be\x20made\n\n\x0c\n\
    \x05\x06\0\x02\0\x01\x12\x03\t\x0c\x10\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\t\x11\x18\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\t#+\n/\n\x04\x06\0\
    \x02\x01\x12\x03\x0b\x08?\x1a\"\x20Stream\x20is\x20a\x20bidirectional\
    \x20stream\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x0b\x0c\x12\n\x0c\n\
    \x05\x06\0\x02\x01\x05\x12\x03\x0b\x13\x19\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x0b\x1a!\n\x0c\n\x05\x06\0\x02\x01\x06\x12\x03\x0b,2\n\x0c\n\
    \x05\x06\0\x02\x01\x03\x12\x03\x0b3;\nG\n\x04\x06\0\x02\x02\x12\x03\r\
    \x081\x1a:\x20Publish\x20publishes\x20a\x20message\x20and\x20returns\x20\
    an\x20empty\x20Message\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\r\x0c\x13\
    \n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\r\x14\x1b\n\x0c\n\x05\x06\0\x02\
    \x02\x03\x12\x03\r&-\n\n\n\x02\x04\0\x12\x04\x10\0\x15\x01\n\n\n\x03\x04\
    \0\x01\x12\x03\x10\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x08\x1b\n\
    \r\n\x05\x04\0\x02\0\x04\x12\x04\x11\x08\x10\x11\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0f\x16\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11\x19\x1a\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x12\x08\x1c\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x12\x08\x11\
    \x1b\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x12\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x12\x0f\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x12\x1a\x1b\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x13\x08\x20\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04\x13\x08\x12\x1c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x13\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x13\x0f\x1b\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x13\x1e\x1f\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\x14\x08\x17\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x14\x08\x13\x20\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x14\x08\r\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x14\x0e\x12\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x14\
    \x15\x16\n\n\n\x02\x04\x01\x12\x04\x17\0\x19\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x17\x08\x10\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x18\x08\x17\n\r\n\
    \x05\x04\x01\x02\0\x04\x12\x04\x18\x08\x17\x12\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x18\x08\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x18\x0e\x12\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x18\x15\x16\n\n\n\x02\x04\x02\x12\
    \x04\x1b\0\x1f\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1b\x08\x0f\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x1c\x08\x19\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \x1c\x08\x1b\x11\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1c\x08\x0e\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x1c\x0f\x14\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x1c\x17\x18\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1d\x08\x20\
    \n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x1d\x08\x1c\x19\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03\x1d\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x1d\x0f\x1b\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x1d\x1e\x1f\n\
    \x0b\n\x04\x04\x02\x02\x02\x12\x03\x1e\x08\x17\n\r\n\x05\x04\x02\x02\x02\
    \x04\x12\x04\x1e\x08\x1d\x20\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1e\
    \x08\r\n\x0c\n\x05\x04\x02\x02\x02\x01\x12\x03\x1e\x0e\x12\n\x0c\n\x05\
    \x04\x02\x02\x02\x03\x12\x03\x1e\x15\x16b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
