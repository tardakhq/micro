// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `alert/alert.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub id: ::std::string::String,
    pub category: ::std::string::String,
    pub action: ::std::string::String,
    pub label: ::std::string::String,
    pub value: u64,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string category = 2;


    pub fn get_category(&self) -> &str {
        &self.category
    }
    pub fn clear_category(&mut self) {
        self.category.clear();
    }

    // Param is passed by value, moved
    pub fn set_category(&mut self, v: ::std::string::String) {
        self.category = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_category(&mut self) -> &mut ::std::string::String {
        &mut self.category
    }

    // Take field
    pub fn take_category(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.category, ::std::string::String::new())
    }

    // string action = 3;


    pub fn get_action(&self) -> &str {
        &self.action
    }
    pub fn clear_action(&mut self) {
        self.action.clear();
    }

    // Param is passed by value, moved
    pub fn set_action(&mut self, v: ::std::string::String) {
        self.action = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action(&mut self) -> &mut ::std::string::String {
        &mut self.action
    }

    // Take field
    pub fn take_action(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.action, ::std::string::String::new())
    }

    // string label = 4;


    pub fn get_label(&self) -> &str {
        &self.label
    }
    pub fn clear_label(&mut self) {
        self.label.clear();
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::std::string::String) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::std::string::String {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.label, ::std::string::String::new())
    }

    // uint64 value = 5;


    pub fn get_value(&self) -> u64 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: u64) {
        self.value = v;
    }

    // repeated .alert.Event.MetadataEntry metadata = 6;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.category)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.action)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.label)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.value = tmp;
                },
                6 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.category.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.category);
        }
        if !self.action.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.action);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.label);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(5, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.metadata);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.category.is_empty() {
            os.write_string(2, &self.category)?;
        }
        if !self.action.is_empty() {
            os.write_string(3, &self.action)?;
        }
        if !self.label.is_empty() {
            os.write_string(4, &self.label)?;
        }
        if self.value != 0 {
            os.write_uint64(5, self.value)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(6, &self.metadata, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Event| { &m.id },
                |m: &mut Event| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "category",
                |m: &Event| { &m.category },
                |m: &mut Event| { &mut m.category },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "action",
                |m: &Event| { &m.action },
                |m: &mut Event| { &mut m.action },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "label",
                |m: &Event| { &m.label },
                |m: &mut Event| { &mut m.label },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "value",
                |m: &Event| { &m.value },
                |m: &mut Event| { &mut m.value },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Event| { &m.metadata },
                |m: &mut Event| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.id.clear();
        self.category.clear();
        self.action.clear();
        self.label.clear();
        self.value = 0;
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportEventRequest {
    // message fields
    pub event: ::protobuf::SingularPtrField<Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportEventRequest {
    fn default() -> &'a ReportEventRequest {
        <ReportEventRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReportEventRequest {
    pub fn new() -> ReportEventRequest {
        ::std::default::Default::default()
    }

    // .alert.Event event = 1;


    pub fn get_event(&self) -> &Event {
        self.event.as_ref().unwrap_or_else(|| <Event as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: Event) {
        self.event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut Event {
        if self.event.is_none() {
            self.event.set_default();
        }
        self.event.as_mut().unwrap()
    }

    // Take field
    pub fn take_event(&mut self) -> Event {
        self.event.take().unwrap_or_else(|| Event::new())
    }
}

impl ::protobuf::Message for ReportEventRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.event.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportEventRequest {
        ReportEventRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "event",
                |m: &ReportEventRequest| { &m.event },
                |m: &mut ReportEventRequest| { &mut m.event },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportEventRequest>(
                "ReportEventRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportEventRequest {
        static instance: ::protobuf::rt::LazyV2<ReportEventRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportEventRequest::new)
    }
}

impl ::protobuf::Clear for ReportEventRequest {
    fn clear(&mut self) {
        self.event.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportEventRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportEventRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReportEventResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReportEventResponse {
    fn default() -> &'a ReportEventResponse {
        <ReportEventResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReportEventResponse {
    pub fn new() -> ReportEventResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReportEventResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReportEventResponse {
        ReportEventResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReportEventResponse>(
                "ReportEventResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReportEventResponse {
        static instance: ::protobuf::rt::LazyV2<ReportEventResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReportEventResponse::new)
    }
}

impl ::protobuf::Clear for ReportEventResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReportEventResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReportEventResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11alert/alert.proto\x12\x05alert\"\xec\x01\n\x05Event\x12\x0e\n\x02i\
    d\x18\x01\x20\x01(\tR\x02id\x12\x1a\n\x08category\x18\x02\x20\x01(\tR\
    \x08category\x12\x16\n\x06action\x18\x03\x20\x01(\tR\x06action\x12\x14\n\
    \x05label\x18\x04\x20\x01(\tR\x05label\x12\x14\n\x05value\x18\x05\x20\
    \x01(\x04R\x05value\x126\n\x08metadata\x18\x06\x20\x03(\x0b2\x1a.alert.E\
    vent.MetadataEntryR\x08metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\"8\n\x12ReportEventRequest\x12\"\n\x05event\x18\x01\x20\
    \x01(\x0b2\x0c.alert.EventR\x05event\"\x15\n\x13ReportEventResponse2O\n\
    \x05Alert\x12F\n\x0bReportEvent\x12\x19.alert.ReportEventRequest\x1a\x1a\
    .alert.ReportEventResponse\"\0J\xe6\x06\n\x06\x12\x04\0\0\x1a\x1e\n\x08\
    \n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\r\n\n\n\x02\
    \x06\0\x12\x04\x04\0\x07\x01\n\n\n\x03\x06\0\x01\x12\x03\x04\x08\r\n1\n\
    \x04\x06\0\x02\0\x12\x03\x06\x08L\x1a$\x20ReportEvent\x20does\x20event\
    \x20ingestions.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x06\x0c\x17\n\x0c\
    \n\x05\x06\0\x02\0\x02\x12\x03\x06\x18*\n\x0c\n\x05\x06\0\x02\0\x03\x12\
    \x03\x065H\n\x8b\x01\n\x02\x04\0\x12\x04\x0c\0\x14\x01\x1a\x7f\x20Event\
    \x20is\x20inspired\x20by\x20Google\x20Analytics\x20events\n\x20https://d\
    evelopers.google.com/analytics/devguides/collection/analyticsjs/events\n\
    \n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\r\n-\n\x04\x04\0\x02\0\x12\x03\x0e\
    \x08\x16\x1a\x20\x20id\x20is\x20not\x20required\x20for\x20inserts\n\n\r\
    \n\x05\x04\0\x02\0\x04\x12\x04\x0e\x08\x0c\x0f\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x0e\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\x0f\x11\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0e\x14\x15\n\x0b\n\x04\x04\0\x02\
    \x01\x12\x03\x0f\x08\x1c\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x0f\x08\x0e\
    \x16\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x0f\x08\x0e\n\x0c\n\x05\x04\0\
    \x02\x01\x01\x12\x03\x0f\x0f\x17\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x0f\x1a\x1b\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x10\x08\x1a\n\r\n\x05\x04\
    \0\x02\x02\x04\x12\x04\x10\x08\x0f\x1c\n\x0c\n\x05\x04\0\x02\x02\x05\x12\
    \x03\x10\x08\x0e\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x10\x0f\x15\n\x0c\
    \n\x05\x04\0\x02\x02\x03\x12\x03\x10\x18\x19\n\x0b\n\x04\x04\0\x02\x03\
    \x12\x03\x11\x08\x19\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x11\x08\x10\x1a\
    \n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\0\x02\
    \x03\x01\x12\x03\x11\x0f\x14\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x11\
    \x17\x18\n\x0b\n\x04\x04\0\x02\x04\x12\x03\x12\x08\x19\n\r\n\x05\x04\0\
    \x02\x04\x04\x12\x04\x12\x08\x11\x19\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\x12\x08\x0e\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x12\x0f\x14\n\x0c\
    \n\x05\x04\0\x02\x04\x03\x12\x03\x12\x17\x18\n\x0b\n\x04\x04\0\x02\x05\
    \x12\x03\x13\x08(\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\x13\x08\x12\x19\n\
    \x0c\n\x05\x04\0\x02\x05\x06\x12\x03\x13\x08\x1a\n\x0c\n\x05\x04\0\x02\
    \x05\x01\x12\x03\x13\x1b#\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x13&'\n\
    \n\n\x02\x04\x01\x12\x04\x16\0\x18\x01\n\n\n\x03\x04\x01\x01\x12\x03\x16\
    \x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x17\x08\x18\n\r\n\x05\x04\x01\
    \x02\0\x04\x12\x04\x17\x08\x16\x1c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\
    \x17\x08\r\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x17\x0e\x13\n\x0c\n\x05\
    \x04\x01\x02\0\x03\x12\x03\x17\x16\x17\n\t\n\x02\x04\x02\x12\x03\x1a\0\
    \x1e\n\n\n\x03\x04\x02\x01\x12\x03\x1a\x08\x1bb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
