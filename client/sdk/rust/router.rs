// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `router/router.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub service: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &ReadRequest| { &m.service },
                |m: &mut ReadRequest| { &mut m.service },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRequest>(
                "ReadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ::protobuf::rt::LazyV2<ReadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRequest::new)
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.service.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // repeated .router.Route routes = 1;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &ReadResponse| { &m.routes },
                |m: &mut ReadResponse| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadResponse>(
                "ReadResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ::protobuf::rt::LazyV2<ReadResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadResponse::new)
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupRequest {
    // message fields
    pub service: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<LookupOptions>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupRequest {
    fn default() -> &'a LookupRequest {
        <LookupRequest as ::protobuf::Message>::default_instance()
    }
}

impl LookupRequest {
    pub fn new() -> LookupRequest {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // .router.LookupOptions options = 2;


    pub fn get_options(&self) -> &LookupOptions {
        self.options.as_ref().unwrap_or_else(|| <LookupOptions as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: LookupOptions) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut LookupOptions {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> LookupOptions {
        self.options.take().unwrap_or_else(|| LookupOptions::new())
    }
}

impl ::protobuf::Message for LookupRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupRequest {
        LookupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &LookupRequest| { &m.service },
                |m: &mut LookupRequest| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<LookupOptions>>(
                "options",
                |m: &LookupRequest| { &m.options },
                |m: &mut LookupRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LookupRequest>(
                "LookupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LookupRequest {
        static instance: ::protobuf::rt::LazyV2<LookupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LookupRequest::new)
    }
}

impl ::protobuf::Clear for LookupRequest {
    fn clear(&mut self) {
        self.service.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupResponse {
    // message fields
    pub routes: ::protobuf::RepeatedField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupResponse {
    fn default() -> &'a LookupResponse {
        <LookupResponse as ::protobuf::Message>::default_instance()
    }
}

impl LookupResponse {
    pub fn new() -> LookupResponse {
        ::std::default::Default::default()
    }

    // repeated .router.Route routes = 1;


    pub fn get_routes(&self) -> &[Route] {
        &self.routes
    }
    pub fn clear_routes(&mut self) {
        self.routes.clear();
    }

    // Param is passed by value, moved
    pub fn set_routes(&mut self, v: ::protobuf::RepeatedField<Route>) {
        self.routes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_routes(&mut self) -> &mut ::protobuf::RepeatedField<Route> {
        &mut self.routes
    }

    // Take field
    pub fn take_routes(&mut self) -> ::protobuf::RepeatedField<Route> {
        ::std::mem::replace(&mut self.routes, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LookupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.routes {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.routes)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.routes {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.routes {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupResponse {
        LookupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "routes",
                |m: &LookupResponse| { &m.routes },
                |m: &mut LookupResponse| { &mut m.routes },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LookupResponse>(
                "LookupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LookupResponse {
        static instance: ::protobuf::rt::LazyV2<LookupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LookupResponse::new)
    }
}

impl ::protobuf::Clear for LookupResponse {
    fn clear(&mut self) {
        self.routes.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WatchRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WatchRequest {
    fn default() -> &'a WatchRequest {
        <WatchRequest as ::protobuf::Message>::default_instance()
    }
}

impl WatchRequest {
    pub fn new() -> WatchRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WatchRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WatchRequest {
        WatchRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WatchRequest>(
                "WatchRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WatchRequest {
        static instance: ::protobuf::rt::LazyV2<WatchRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WatchRequest::new)
    }
}

impl ::protobuf::Clear for WatchRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WatchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WatchRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResponse {
    fn default() -> &'a CreateResponse {
        <CreateResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResponse {
    pub fn new() -> CreateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResponse {
        CreateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResponse>(
                "CreateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateResponse {
        static instance: ::protobuf::rt::LazyV2<CreateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateResponse::new)
    }
}

impl ::protobuf::Clear for CreateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResponse>(
                "DeleteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteResponse::new)
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UpdateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UpdateResponse {
    fn default() -> &'a UpdateResponse {
        <UpdateResponse as ::protobuf::Message>::default_instance()
    }
}

impl UpdateResponse {
    pub fn new() -> UpdateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UpdateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UpdateResponse {
        UpdateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<UpdateResponse>(
                "UpdateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static UpdateResponse {
        static instance: ::protobuf::rt::LazyV2<UpdateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(UpdateResponse::new)
    }
}

impl ::protobuf::Clear for UpdateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UpdateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UpdateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub id: ::std::string::String,
    pub field_type: EventType,
    pub timestamp: i64,
    pub route: ::protobuf::SingularPtrField<Route>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .router.EventType type = 2;


    pub fn get_field_type(&self) -> EventType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = EventType::Create;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: EventType) {
        self.field_type = v;
    }

    // int64 timestamp = 3;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // .router.Route route = 4;


    pub fn get_route(&self) -> &Route {
        self.route.as_ref().unwrap_or_else(|| <Route as ::protobuf::Message>::default_instance())
    }
    pub fn clear_route(&mut self) {
        self.route.clear();
    }

    pub fn has_route(&self) -> bool {
        self.route.is_some()
    }

    // Param is passed by value, moved
    pub fn set_route(&mut self, v: Route) {
        self.route = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_route(&mut self) -> &mut Route {
        if self.route.is_none() {
            self.route.set_default();
        }
        self.route.as_mut().unwrap()
    }

    // Take field
    pub fn take_route(&mut self) -> Route {
        self.route.take().unwrap_or_else(|| Route::new())
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        for v in &self.route {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.route)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.field_type != EventType::Create {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(3, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.route.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.field_type != EventType::Create {
            os.write_enum(2, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        if self.timestamp != 0 {
            os.write_int64(3, self.timestamp)?;
        }
        if let Some(ref v) = self.route.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Event| { &m.id },
                |m: &mut Event| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EventType>>(
                "type",
                |m: &Event| { &m.field_type },
                |m: &mut Event| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Event| { &m.timestamp },
                |m: &mut Event| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Route>>(
                "route",
                |m: &Event| { &m.route },
                |m: &mut Event| { &mut m.route },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type = EventType::Create;
        self.timestamp = 0;
        self.route.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LookupOptions {
    // message fields
    pub address: ::std::string::String,
    pub gateway: ::std::string::String,
    pub network: ::std::string::String,
    pub router: ::std::string::String,
    pub link: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LookupOptions {
    fn default() -> &'a LookupOptions {
        <LookupOptions as ::protobuf::Message>::default_instance()
    }
}

impl LookupOptions {
    pub fn new() -> LookupOptions {
        ::std::default::Default::default()
    }

    // string address = 1;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string gateway = 2;


    pub fn get_gateway(&self) -> &str {
        &self.gateway
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: ::std::string::String) {
        self.gateway = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut ::std::string::String {
        &mut self.gateway
    }

    // Take field
    pub fn take_gateway(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway, ::std::string::String::new())
    }

    // string network = 3;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string router = 4;


    pub fn get_router(&self) -> &str {
        &self.router
    }
    pub fn clear_router(&mut self) {
        self.router.clear();
    }

    // Param is passed by value, moved
    pub fn set_router(&mut self, v: ::std::string::String) {
        self.router = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_router(&mut self) -> &mut ::std::string::String {
        &mut self.router
    }

    // Take field
    pub fn take_router(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.router, ::std::string::String::new())
    }

    // string link = 5;


    pub fn get_link(&self) -> &str {
        &self.link
    }
    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }
}

impl ::protobuf::Message for LookupOptions {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.router)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.address);
        }
        if !self.gateway.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.gateway);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.network);
        }
        if !self.router.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.router);
        }
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.link);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.address.is_empty() {
            os.write_string(1, &self.address)?;
        }
        if !self.gateway.is_empty() {
            os.write_string(2, &self.gateway)?;
        }
        if !self.network.is_empty() {
            os.write_string(3, &self.network)?;
        }
        if !self.router.is_empty() {
            os.write_string(4, &self.router)?;
        }
        if !self.link.is_empty() {
            os.write_string(5, &self.link)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LookupOptions {
        LookupOptions::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &LookupOptions| { &m.address },
                |m: &mut LookupOptions| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gateway",
                |m: &LookupOptions| { &m.gateway },
                |m: &mut LookupOptions| { &mut m.gateway },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &LookupOptions| { &m.network },
                |m: &mut LookupOptions| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "router",
                |m: &LookupOptions| { &m.router },
                |m: &mut LookupOptions| { &mut m.router },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "link",
                |m: &LookupOptions| { &m.link },
                |m: &mut LookupOptions| { &mut m.link },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LookupOptions>(
                "LookupOptions",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LookupOptions {
        static instance: ::protobuf::rt::LazyV2<LookupOptions> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LookupOptions::new)
    }
}

impl ::protobuf::Clear for LookupOptions {
    fn clear(&mut self) {
        self.address.clear();
        self.gateway.clear();
        self.network.clear();
        self.router.clear();
        self.link.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LookupOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LookupOptions {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Route {
    // message fields
    pub service: ::std::string::String,
    pub address: ::std::string::String,
    pub gateway: ::std::string::String,
    pub network: ::std::string::String,
    pub router: ::std::string::String,
    pub link: ::std::string::String,
    pub metric: i64,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Route {
    fn default() -> &'a Route {
        <Route as ::protobuf::Message>::default_instance()
    }
}

impl Route {
    pub fn new() -> Route {
        ::std::default::Default::default()
    }

    // string service = 1;


    pub fn get_service(&self) -> &str {
        &self.service
    }
    pub fn clear_service(&mut self) {
        self.service.clear();
    }

    // Param is passed by value, moved
    pub fn set_service(&mut self, v: ::std::string::String) {
        self.service = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_service(&mut self) -> &mut ::std::string::String {
        &mut self.service
    }

    // Take field
    pub fn take_service(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.service, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // string gateway = 3;


    pub fn get_gateway(&self) -> &str {
        &self.gateway
    }
    pub fn clear_gateway(&mut self) {
        self.gateway.clear();
    }

    // Param is passed by value, moved
    pub fn set_gateway(&mut self, v: ::std::string::String) {
        self.gateway = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gateway(&mut self) -> &mut ::std::string::String {
        &mut self.gateway
    }

    // Take field
    pub fn take_gateway(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.gateway, ::std::string::String::new())
    }

    // string network = 4;


    pub fn get_network(&self) -> &str {
        &self.network
    }
    pub fn clear_network(&mut self) {
        self.network.clear();
    }

    // Param is passed by value, moved
    pub fn set_network(&mut self, v: ::std::string::String) {
        self.network = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_network(&mut self) -> &mut ::std::string::String {
        &mut self.network
    }

    // Take field
    pub fn take_network(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.network, ::std::string::String::new())
    }

    // string router = 5;


    pub fn get_router(&self) -> &str {
        &self.router
    }
    pub fn clear_router(&mut self) {
        self.router.clear();
    }

    // Param is passed by value, moved
    pub fn set_router(&mut self, v: ::std::string::String) {
        self.router = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_router(&mut self) -> &mut ::std::string::String {
        &mut self.router
    }

    // Take field
    pub fn take_router(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.router, ::std::string::String::new())
    }

    // string link = 6;


    pub fn get_link(&self) -> &str {
        &self.link
    }
    pub fn clear_link(&mut self) {
        self.link.clear();
    }

    // Param is passed by value, moved
    pub fn set_link(&mut self, v: ::std::string::String) {
        self.link = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_link(&mut self) -> &mut ::std::string::String {
        &mut self.link
    }

    // Take field
    pub fn take_link(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.link, ::std::string::String::new())
    }

    // int64 metric = 7;


    pub fn get_metric(&self) -> i64 {
        self.metric
    }
    pub fn clear_metric(&mut self) {
        self.metric = 0;
    }

    // Param is passed by value, moved
    pub fn set_metric(&mut self, v: i64) {
        self.metric = v;
    }

    // repeated .router.Route.MetadataEntry metadata = 8;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }
}

impl ::protobuf::Message for Route {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.service)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.gateway)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.network)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.router)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.link)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.metric = tmp;
                },
                8 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.service.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.service);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if !self.gateway.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.gateway);
        }
        if !self.network.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.network);
        }
        if !self.router.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.router);
        }
        if !self.link.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.link);
        }
        if self.metric != 0 {
            my_size += ::protobuf::rt::value_size(7, self.metric, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.metadata);
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.service.is_empty() {
            os.write_string(1, &self.service)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if !self.gateway.is_empty() {
            os.write_string(3, &self.gateway)?;
        }
        if !self.network.is_empty() {
            os.write_string(4, &self.network)?;
        }
        if !self.router.is_empty() {
            os.write_string(5, &self.router)?;
        }
        if !self.link.is_empty() {
            os.write_string(6, &self.link)?;
        }
        if self.metric != 0 {
            os.write_int64(7, self.metric)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(8, &self.metadata, os)?;
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Route {
        Route::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "service",
                |m: &Route| { &m.service },
                |m: &mut Route| { &mut m.service },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "address",
                |m: &Route| { &m.address },
                |m: &mut Route| { &mut m.address },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "gateway",
                |m: &Route| { &m.gateway },
                |m: &mut Route| { &mut m.gateway },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "network",
                |m: &Route| { &m.network },
                |m: &mut Route| { &mut m.network },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "router",
                |m: &Route| { &m.router },
                |m: &mut Route| { &mut m.router },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "link",
                |m: &Route| { &m.link },
                |m: &mut Route| { &mut m.link },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "metric",
                |m: &Route| { &m.metric },
                |m: &mut Route| { &mut m.metric },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Route| { &m.metadata },
                |m: &mut Route| { &mut m.metadata },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Route>(
                "Route",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Route {
        static instance: ::protobuf::rt::LazyV2<Route> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Route::new)
    }
}

impl ::protobuf::Clear for Route {
    fn clear(&mut self) {
        self.service.clear();
        self.address.clear();
        self.gateway.clear();
        self.network.clear();
        self.router.clear();
        self.link.clear();
        self.metric = 0;
        self.metadata.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Route {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Route {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EventType {
    Create = 0,
    Delete = 1,
    Update = 2,
}

impl ::protobuf::ProtobufEnum for EventType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EventType> {
        match value {
            0 => ::std::option::Option::Some(EventType::Create),
            1 => ::std::option::Option::Some(EventType::Delete),
            2 => ::std::option::Option::Some(EventType::Update),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EventType] = &[
            EventType::Create,
            EventType::Delete,
            EventType::Update,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EventType>("EventType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EventType {
}

impl ::std::default::Default for EventType {
    fn default() -> Self {
        EventType::Create
    }
}

impl ::protobuf::reflect::ProtobufValue for EventType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13router/router.proto\x12\x06router\"'\n\x0bReadRequest\x12\x18\n\
    \x07service\x18\x01\x20\x01(\tR\x07service\"5\n\x0cReadResponse\x12%\n\
    \x06routes\x18\x01\x20\x03(\x0b2\r.router.RouteR\x06routes\"Z\n\rLookupR\
    equest\x12\x18\n\x07service\x18\x01\x20\x01(\tR\x07service\x12/\n\x07opt\
    ions\x18\x02\x20\x01(\x0b2\x15.router.LookupOptionsR\x07options\"7\n\x0e\
    LookupResponse\x12%\n\x06routes\x18\x01\x20\x03(\x0b2\r.router.RouteR\
    \x06routes\"\x0e\n\x0cWatchRequest\"\x10\n\x0eCreateResponse\"\x10\n\x0e\
    DeleteResponse\"\x10\n\x0eUpdateResponse\"\x81\x01\n\x05Event\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12%\n\x04type\x18\x02\x20\x01(\x0e2\
    \x11.router.EventTypeR\x04type\x12\x1c\n\ttimestamp\x18\x03\x20\x01(\x03\
    R\ttimestamp\x12#\n\x05route\x18\x04\x20\x01(\x0b2\r.router.RouteR\x05ro\
    ute\"\x89\x01\n\rLookupOptions\x12\x18\n\x07address\x18\x01\x20\x01(\tR\
    \x07address\x12\x18\n\x07gateway\x18\x02\x20\x01(\tR\x07gateway\x12\x18\
    \n\x07network\x18\x03\x20\x01(\tR\x07network\x12\x16\n\x06router\x18\x04\
    \x20\x01(\tR\x06router\x12\x12\n\x04link\x18\x05\x20\x01(\tR\x04link\"\
    \xa9\x02\n\x05Route\x12\x18\n\x07service\x18\x01\x20\x01(\tR\x07service\
    \x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\x18\n\x07gatewa\
    y\x18\x03\x20\x01(\tR\x07gateway\x12\x18\n\x07network\x18\x04\x20\x01(\t\
    R\x07network\x12\x16\n\x06router\x18\x05\x20\x01(\tR\x06router\x12\x12\n\
    \x04link\x18\x06\x20\x01(\tR\x04link\x12\x16\n\x06metric\x18\x07\x20\x01\
    (\x03R\x06metric\x127\n\x08metadata\x18\x08\x20\x03(\x0b2\x1b.router.Rou\
    te.MetadataEntryR\x08metadata\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\
    \x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\
    \x028\x01*/\n\tEventType\x12\n\n\x06Create\x10\0\x12\n\n\x06Delete\x10\
    \x01\x12\n\n\x06Update\x10\x022u\n\x06Router\x129\n\x06Lookup\x12\x15.ro\
    uter.LookupRequest\x1a\x16.router.LookupResponse\"\0\x120\n\x05Watch\x12\
    \x14.router.WatchRequest\x1a\r.router.Event\"\00\x012\xd5\x01\n\x05Table\
    \x121\n\x06Create\x12\r.router.Route\x1a\x16.router.CreateResponse\"\0\
    \x121\n\x06Delete\x12\r.router.Route\x1a\x16.router.DeleteResponse\"\0\
    \x121\n\x06Update\x12\r.router.Route\x1a\x16.router.UpdateResponse\"\0\
    \x123\n\x04Read\x12\x13.router.ReadRequest\x1a\x14.router.ReadResponse\"\
    \0B/Z-github.com/micro/micro/v3/proto/router;routerJ\xec\x18\n\x06\x12\
    \x04\0\0b\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\
    \x02\x08\x0e\n\x08\n\x01\x08\x12\x03\x04\0D\n\t\n\x02\x08\x0b\x12\x03\
    \x04\0D\nB\n\x02\x06\0\x12\x04\x07\0\n\x01\x1a6\x20Router\x20service\x20\
    is\x20used\x20by\x20the\x20proxy\x20to\x20lookup\x20routes\n\n\n\n\x03\
    \x06\0\x01\x12\x03\x07\x08\x0e\n\x0b\n\x04\x06\0\x02\0\x12\x03\x08\x027\
    \n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x08\x06\x0c\n\x0c\n\x05\x06\0\x02\0\
    \x02\x12\x03\x08\r\x1a\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x08%3\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\t\x023\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\
    \t\x06\x0b\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\t\x0c\x18\n\x0c\n\x05\
    \x06\0\x02\x01\x06\x12\x03\t#)\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\t*/\
    \n\n\n\x02\x06\x01\x12\x04\x0c\0\x11\x01\n\n\n\x03\x06\x01\x01\x12\x03\
    \x0c\x08\r\n\x0b\n\x04\x06\x01\x02\0\x12\x03\r\x02/\n\x0c\n\x05\x06\x01\
    \x02\0\x01\x12\x03\r\x06\x0c\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03\r\r\
    \x12\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x03\r\x1d+\n\x0b\n\x04\x06\x01\
    \x02\x01\x12\x03\x0e\x02/\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03\x0e\
    \x06\x0c\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03\x0e\r\x12\n\x0c\n\x05\
    \x06\x01\x02\x01\x03\x12\x03\x0e\x1d+\n\x0b\n\x04\x06\x01\x02\x02\x12\
    \x03\x0f\x02/\n\x0c\n\x05\x06\x01\x02\x02\x01\x12\x03\x0f\x06\x0c\n\x0c\
    \n\x05\x06\x01\x02\x02\x02\x12\x03\x0f\r\x12\n\x0c\n\x05\x06\x01\x02\x02\
    \x03\x12\x03\x0f\x1d+\n\x0b\n\x04\x06\x01\x02\x03\x12\x03\x10\x021\n\x0c\
    \n\x05\x06\x01\x02\x03\x01\x12\x03\x10\x06\n\n\x0c\n\x05\x06\x01\x02\x03\
    \x02\x12\x03\x10\x0b\x16\n\x0c\n\x05\x06\x01\x02\x03\x03\x12\x03\x10!-\n\
    \x1b\n\x02\x04\0\x12\x04\x14\0\x16\x01\x1a\x0f\x20Empty\x20request\n\n\n\
    \n\x03\x04\0\x01\x12\x03\x14\x08\x13\n\x0b\n\x04\x04\0\x02\0\x12\x03\x15\
    \x08\x1b\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x15\x08\x14\x15\n\x0c\n\x05\
    \x04\0\x02\0\x05\x12\x03\x15\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x15\x0f\x16\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x15\x19\x1a\n\x1c\n\x02\
    \x04\x01\x12\x04\x19\0\x1b\x01\x1a\x10\x20Empty\x20response\n\n\n\n\x03\
    \x04\x01\x01\x12\x03\x19\x08\x14\n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1a\
    \x08\"\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\x1a\x08\x10\n\x0c\n\x05\x04\
    \x01\x02\0\x06\x12\x03\x1a\x11\x16\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x1a\x17\x1d\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x20!\n-\n\x02\x04\
    \x02\x12\x04\x1e\0!\x01\x1a!\x20LookupRequest\x20is\x20made\x20to\x20Loo\
    kup\n\n\n\n\x03\x04\x02\x01\x12\x03\x1e\x08\x15\n\x0b\n\x04\x04\x02\x02\
    \0\x12\x03\x1f\x02\x15\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1f\x02\x1e\
    \x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x1f\x02\x08\n\x0c\n\x05\x04\
    \x02\x02\0\x01\x12\x03\x1f\t\x10\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\
    \x1f\x13\x14\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x20\x02\x1c\n\r\n\x05\
    \x04\x02\x02\x01\x04\x12\x04\x20\x02\x1f\x15\n\x0c\n\x05\x04\x02\x02\x01\
    \x06\x12\x03\x20\x02\x0f\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x20\x10\
    \x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x20\x1a\x1b\n2\n\x02\x04\
    \x03\x12\x04$\0&\x01\x1a&\x20LookupResponse\x20is\x20returned\x20by\x20L\
    ookup\n\n\n\n\x03\x04\x03\x01\x12\x03$\x08\x16\n\x0b\n\x04\x04\x03\x02\0\
    \x12\x03%\x02\x1c\n\x0c\n\x05\x04\x03\x02\0\x04\x12\x03%\x02\n\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03%\x0b\x10\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03%\x11\x17\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03%\x1a\x1b\n1\n\
    \x02\x04\x04\x12\x03)\0\x17\x1a&\x20WatchRequest\x20is\x20made\x20to\x20\
    Watch\x20Router\n\n\n\n\x03\x04\x04\x01\x12\x03)\x08\x14\n1\n\x02\x04\
    \x05\x12\x03,\0\x19\x1a&\x20CreateResponse\x20is\x20returned\x20by\x20Cr\
    eate\n\n\n\n\x03\x04\x05\x01\x12\x03,\x08\x16\n1\n\x02\x04\x06\x12\x03/\
    \0\x19\x1a&\x20DeleteResponse\x20is\x20returned\x20by\x20Delete\n\n\n\n\
    \x03\x04\x06\x01\x12\x03/\x08\x16\n1\n\x02\x04\x07\x12\x032\0\x19\x1a&\
    \x20UpdateResponse\x20is\x20returned\x20by\x20Update\n\n\n\n\x03\x04\x07\
    \x01\x12\x032\x08\x16\n1\n\x02\x05\0\x12\x045\09\x01\x1a%\x20EventType\
    \x20defines\x20the\x20type\x20of\x20event\n\n\n\n\x03\x05\0\x01\x12\x035\
    \x05\x0e\n\x0b\n\x04\x05\0\x02\0\x12\x036\x02\r\n\x0c\n\x05\x05\0\x02\0\
    \x01\x12\x036\x02\x08\n\x0c\n\x05\x05\0\x02\0\x02\x12\x036\x0b\x0c\n\x0b\
    \n\x04\x05\0\x02\x01\x12\x037\x02\r\n\x0c\n\x05\x05\0\x02\x01\x01\x12\
    \x037\x02\x08\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x037\x0b\x0c\n\x0b\n\x04\
    \x05\0\x02\x02\x12\x038\x02\r\n\x0c\n\x05\x05\0\x02\x02\x01\x12\x038\x02\
    \x08\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x038\x0b\x0c\n*\n\x02\x04\x08\x12\
    \x04<\0E\x01\x1a\x1e\x20Event\x20is\x20routing\x20table\x20event\n\n\n\n\
    \x03\x04\x08\x01\x12\x03<\x08\r\n\"\n\x04\x04\x08\x02\0\x12\x03>\x02\x10\
    \x1a\x15\x20the\x20unique\x20event\x20id\n\n\r\n\x05\x04\x08\x02\0\x04\
    \x12\x04>\x02<\x0f\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03>\x02\x08\n\x0c\
    \n\x05\x04\x08\x02\0\x01\x12\x03>\t\x0b\n\x0c\n\x05\x04\x08\x02\0\x03\
    \x12\x03>\x0e\x0f\n\x1c\n\x04\x04\x08\x02\x01\x12\x03@\x02\x15\x1a\x0f\
    \x20type\x20of\x20event\n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04@\x02>\
    \x10\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03@\x02\x0b\n\x0c\n\x05\x04\
    \x08\x02\x01\x01\x12\x03@\x0c\x10\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\
    \x03@\x13\x14\n&\n\x04\x04\x08\x02\x02\x12\x03B\x02\x16\x1a\x19\x20unix\
    \x20timestamp\x20of\x20event\n\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04B\
    \x02@\x15\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03B\x02\x07\n\x0c\n\x05\
    \x04\x08\x02\x02\x01\x12\x03B\x08\x11\n\x0c\n\x05\x04\x08\x02\x02\x03\
    \x12\x03B\x14\x15\n\x1c\n\x04\x04\x08\x02\x03\x12\x03D\x02\x12\x1a\x0f\
    \x20service\x20route\n\n\r\n\x05\x04\x08\x02\x03\x04\x12\x04D\x02B\x16\n\
    \x0c\n\x05\x04\x08\x02\x03\x06\x12\x03D\x02\x07\n\x0c\n\x05\x04\x08\x02\
    \x03\x01\x12\x03D\x08\r\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03D\x10\x11\
    \n9\n\x02\x04\t\x12\x04H\0N\x01\x1a-\x20LookupOptions\x20are\x20passed\
    \x20in\x20a\x20LookupRequest\n\n\n\n\x03\x04\t\x01\x12\x03H\x08\x15\n\
    \x0b\n\x04\x04\t\x02\0\x12\x03I\x02\x15\n\r\n\x05\x04\t\x02\0\x04\x12\
    \x04I\x02H\x17\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03I\x02\x08\n\x0c\n\x05\
    \x04\t\x02\0\x01\x12\x03I\t\x10\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03I\x13\
    \x14\n\x0b\n\x04\x04\t\x02\x01\x12\x03J\x02\x15\n\r\n\x05\x04\t\x02\x01\
    \x04\x12\x04J\x02I\x15\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03J\x02\x08\n\
    \x0c\n\x05\x04\t\x02\x01\x01\x12\x03J\t\x10\n\x0c\n\x05\x04\t\x02\x01\
    \x03\x12\x03J\x13\x14\n\x0b\n\x04\x04\t\x02\x02\x12\x03K\x02\x15\n\r\n\
    \x05\x04\t\x02\x02\x04\x12\x04K\x02J\x15\n\x0c\n\x05\x04\t\x02\x02\x05\
    \x12\x03K\x02\x08\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03K\t\x10\n\x0c\n\
    \x05\x04\t\x02\x02\x03\x12\x03K\x13\x14\n\x0b\n\x04\x04\t\x02\x03\x12\
    \x03L\x02\x14\n\r\n\x05\x04\t\x02\x03\x04\x12\x04L\x02K\x15\n\x0c\n\x05\
    \x04\t\x02\x03\x05\x12\x03L\x02\x08\n\x0c\n\x05\x04\t\x02\x03\x01\x12\
    \x03L\t\x0f\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03L\x12\x13\n\x0b\n\x04\
    \x04\t\x02\x04\x12\x03M\x02\x12\n\r\n\x05\x04\t\x02\x04\x04\x12\x04M\x02\
    L\x14\n\x0c\n\x05\x04\t\x02\x04\x05\x12\x03M\x02\x08\n\x0c\n\x05\x04\t\
    \x02\x04\x01\x12\x03M\t\r\n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03M\x10\x11\
    \n&\n\x02\x04\n\x12\x04Q\0b\x01\x1a\x1a\x20Route\x20is\x20a\x20service\
    \x20route\n\n\n\n\x03\x04\n\x01\x12\x03Q\x08\r\n$\n\x04\x04\n\x02\0\x12\
    \x03S\x02\x15\x1a\x17\x20service\x20for\x20the\x20route\n\n\r\n\x05\x04\
    \n\x02\0\x04\x12\x04S\x02Q\x0f\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03S\x02\
    \x08\n\x0c\n\x05\x04\n\x02\0\x01\x12\x03S\t\x10\n\x0c\n\x05\x04\n\x02\0\
    \x03\x12\x03S\x13\x14\n4\n\x04\x04\n\x02\x01\x12\x03U\x02\x15\x1a'\x20th\
    e\x20address\x20that\x20advertise\x20this\x20route\n\n\r\n\x05\x04\n\x02\
    \x01\x04\x12\x04U\x02S\x15\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03U\x02\
    \x08\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03U\t\x10\n\x0c\n\x05\x04\n\x02\
    \x01\x03\x12\x03U\x13\x14\n&\n\x04\x04\n\x02\x02\x12\x03W\x02\x15\x1a\
    \x19\x20gateway\x20as\x20the\x20next\x20hop\n\n\r\n\x05\x04\n\x02\x02\
    \x04\x12\x04W\x02U\x15\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03W\x02\x08\n\
    \x0c\n\x05\x04\n\x02\x02\x01\x12\x03W\t\x10\n\x0c\n\x05\x04\n\x02\x02\
    \x03\x12\x03W\x13\x14\n/\n\x04\x04\n\x02\x03\x12\x03Y\x02\x15\x1a\"\x20t\
    he\x20network\x20for\x20this\x20destination\n\n\r\n\x05\x04\n\x02\x03\
    \x04\x12\x04Y\x02W\x15\n\x0c\n\x05\x04\n\x02\x03\x05\x12\x03Y\x02\x08\n\
    \x0c\n\x05\x04\n\x02\x03\x01\x12\x03Y\t\x10\n\x0c\n\x05\x04\n\x02\x03\
    \x03\x12\x03Y\x13\x14\n&\n\x04\x04\n\x02\x04\x12\x03[\x02\x14\x1a\x19\
    \x20router\x20if\x20the\x20router\x20id\n\n\r\n\x05\x04\n\x02\x04\x04\
    \x12\x04[\x02Y\x15\n\x0c\n\x05\x04\n\x02\x04\x05\x12\x03[\x02\x08\n\x0c\
    \n\x05\x04\n\x02\x04\x01\x12\x03[\t\x0f\n\x0c\n\x05\x04\n\x02\x04\x03\
    \x12\x03[\x12\x13\n\x1f\n\x04\x04\n\x02\x05\x12\x03]\x02\x12\x1a\x12\x20\
    the\x20network\x20link\n\n\r\n\x05\x04\n\x02\x05\x04\x12\x04]\x02[\x14\n\
    \x0c\n\x05\x04\n\x02\x05\x05\x12\x03]\x02\x08\n\x0c\n\x05\x04\n\x02\x05\
    \x01\x12\x03]\t\r\n\x0c\n\x05\x04\n\x02\x05\x03\x12\x03]\x10\x11\n/\n\
    \x04\x04\n\x02\x06\x12\x03_\x02\x13\x1a\"\x20the\x20metric\x20/\x20score\
    \x20of\x20this\x20route\n\n\r\n\x05\x04\n\x02\x06\x04\x12\x04_\x02]\x12\
    \n\x0c\n\x05\x04\n\x02\x06\x05\x12\x03_\x02\x07\n\x0c\n\x05\x04\n\x02\
    \x06\x01\x12\x03_\x08\x0e\n\x0c\n\x05\x04\n\x02\x06\x03\x12\x03_\x11\x12\
    \n%\n\x04\x04\n\x02\x07\x12\x03a\x02\"\x1a\x18\x20metadata\x20for\x20the\
    \x20route\n\n\r\n\x05\x04\n\x02\x07\x04\x12\x04a\x02_\x13\n\x0c\n\x05\
    \x04\n\x02\x07\x06\x12\x03a\x02\x14\n\x0c\n\x05\x04\n\x02\x07\x01\x12\
    \x03a\x15\x1d\n\x0c\n\x05\x04\n\x02\x07\x03\x12\x03a\x20!b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
