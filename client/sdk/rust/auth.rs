// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `auth/auth.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct ListAccountsRequest {
    // message fields
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAccountsRequest {
    fn default() -> &'a ListAccountsRequest {
        <ListAccountsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListAccountsRequest {
    pub fn new() -> ListAccountsRequest {
        ::std::default::Default::default()
    }

    // .auth.Options options = 1;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for ListAccountsRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAccountsRequest {
        ListAccountsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &ListAccountsRequest| { &m.options },
                |m: &mut ListAccountsRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAccountsRequest>(
                "ListAccountsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAccountsRequest {
        static instance: ::protobuf::rt::LazyV2<ListAccountsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAccountsRequest::new)
    }
}

impl ::protobuf::Clear for ListAccountsRequest {
    fn clear(&mut self) {
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAccountsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAccountsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListAccountsResponse {
    // message fields
    pub accounts: ::protobuf::RepeatedField<Account>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListAccountsResponse {
    fn default() -> &'a ListAccountsResponse {
        <ListAccountsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListAccountsResponse {
    pub fn new() -> ListAccountsResponse {
        ::std::default::Default::default()
    }

    // repeated .auth.Account accounts = 1;


    pub fn get_accounts(&self) -> &[Account] {
        &self.accounts
    }
    pub fn clear_accounts(&mut self) {
        self.accounts.clear();
    }

    // Param is passed by value, moved
    pub fn set_accounts(&mut self, v: ::protobuf::RepeatedField<Account>) {
        self.accounts = v;
    }

    // Mutable pointer to the field.
    pub fn mut_accounts(&mut self) -> &mut ::protobuf::RepeatedField<Account> {
        &mut self.accounts
    }

    // Take field
    pub fn take_accounts(&mut self) -> ::protobuf::RepeatedField<Account> {
        ::std::mem::replace(&mut self.accounts, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListAccountsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.accounts {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.accounts)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.accounts {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.accounts {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListAccountsResponse {
        ListAccountsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Account>>(
                "accounts",
                |m: &ListAccountsResponse| { &m.accounts },
                |m: &mut ListAccountsResponse| { &mut m.accounts },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListAccountsResponse>(
                "ListAccountsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListAccountsResponse {
        static instance: ::protobuf::rt::LazyV2<ListAccountsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListAccountsResponse::new)
    }
}

impl ::protobuf::Clear for ListAccountsResponse {
    fn clear(&mut self) {
        self.accounts.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListAccountsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListAccountsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteAccountRequest {
    // message fields
    pub id: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteAccountRequest {
    fn default() -> &'a DeleteAccountRequest {
        <DeleteAccountRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAccountRequest {
    pub fn new() -> DeleteAccountRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .auth.Options options = 2;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for DeleteAccountRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteAccountRequest {
        DeleteAccountRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &DeleteAccountRequest| { &m.id },
                |m: &mut DeleteAccountRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &DeleteAccountRequest| { &m.options },
                |m: &mut DeleteAccountRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteAccountRequest>(
                "DeleteAccountRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteAccountRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteAccountRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteAccountRequest::new)
    }
}

impl ::protobuf::Clear for DeleteAccountRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteAccountRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAccountRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteAccountResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteAccountResponse {
    fn default() -> &'a DeleteAccountResponse {
        <DeleteAccountResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteAccountResponse {
    pub fn new() -> DeleteAccountResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteAccountResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteAccountResponse {
        DeleteAccountResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteAccountResponse>(
                "DeleteAccountResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteAccountResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteAccountResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteAccountResponse::new)
    }
}

impl ::protobuf::Clear for DeleteAccountResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteAccountResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteAccountResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Token {
    // message fields
    pub access_token: ::std::string::String,
    pub refresh_token: ::std::string::String,
    pub created: i64,
    pub expiry: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Token {
    fn default() -> &'a Token {
        <Token as ::protobuf::Message>::default_instance()
    }
}

impl Token {
    pub fn new() -> Token {
        ::std::default::Default::default()
    }

    // string access_token = 1;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }

    // string refresh_token = 2;


    pub fn get_refresh_token(&self) -> &str {
        &self.refresh_token
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        &mut self.refresh_token
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refresh_token, ::std::string::String::new())
    }

    // int64 created = 3;


    pub fn get_created(&self) -> i64 {
        self.created
    }
    pub fn clear_created(&mut self) {
        self.created = 0;
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: i64) {
        self.created = v;
    }

    // int64 expiry = 4;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }
}

impl ::protobuf::Message for Token {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.created = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.access_token);
        }
        if !self.refresh_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.refresh_token);
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::value_size(3, self.created, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(4, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.access_token.is_empty() {
            os.write_string(1, &self.access_token)?;
        }
        if !self.refresh_token.is_empty() {
            os.write_string(2, &self.refresh_token)?;
        }
        if self.created != 0 {
            os.write_int64(3, self.created)?;
        }
        if self.expiry != 0 {
            os.write_int64(4, self.expiry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Token {
        Token::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &Token| { &m.access_token },
                |m: &mut Token| { &mut m.access_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &Token| { &m.refresh_token },
                |m: &mut Token| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "created",
                |m: &Token| { &m.created },
                |m: &mut Token| { &mut m.created },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "expiry",
                |m: &Token| { &m.expiry },
                |m: &mut Token| { &mut m.expiry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Token>(
                "Token",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Token {
        static instance: ::protobuf::rt::LazyV2<Token> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Token::new)
    }
}

impl ::protobuf::Clear for Token {
    fn clear(&mut self) {
        self.access_token.clear();
        self.refresh_token.clear();
        self.created = 0;
        self.expiry = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Token {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Token {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Account {
    // message fields
    pub id: ::std::string::String,
    pub field_type: ::std::string::String,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub scopes: ::protobuf::RepeatedField<::std::string::String>,
    pub issuer: ::std::string::String,
    pub secret: ::std::string::String,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Account {
    fn default() -> &'a Account {
        <Account as ::protobuf::Message>::default_instance()
    }
}

impl Account {
    pub fn new() -> Account {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // repeated .auth.Account.MetadataEntry metadata = 4;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // repeated string scopes = 5;


    pub fn get_scopes(&self) -> &[::std::string::String] {
        &self.scopes
    }
    pub fn clear_scopes(&mut self) {
        self.scopes.clear();
    }

    // Param is passed by value, moved
    pub fn set_scopes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.scopes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scopes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.scopes
    }

    // Take field
    pub fn take_scopes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.scopes, ::protobuf::RepeatedField::new())
    }

    // string issuer = 6;


    pub fn get_issuer(&self) -> &str {
        &self.issuer
    }
    pub fn clear_issuer(&mut self) {
        self.issuer.clear();
    }

    // Param is passed by value, moved
    pub fn set_issuer(&mut self, v: ::std::string::String) {
        self.issuer = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_issuer(&mut self) -> &mut ::std::string::String {
        &mut self.issuer
    }

    // Take field
    pub fn take_issuer(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.issuer, ::std::string::String::new())
    }

    // string secret = 7;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }

    // string name = 8;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Account {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                4 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.scopes)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.issuer)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.metadata);
        for value in &self.scopes {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        if !self.issuer.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.issuer);
        }
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.secret);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(4, &self.metadata, os)?;
        for v in &self.scopes {
            os.write_string(5, &v)?;
        };
        if !self.issuer.is_empty() {
            os.write_string(6, &self.issuer)?;
        }
        if !self.secret.is_empty() {
            os.write_string(7, &self.secret)?;
        }
        if !self.name.is_empty() {
            os.write_string(8, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Account {
        Account::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Account| { &m.id },
                |m: &mut Account| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Account| { &m.field_type },
                |m: &mut Account| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Account| { &m.metadata },
                |m: &mut Account| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scopes",
                |m: &Account| { &m.scopes },
                |m: &mut Account| { &mut m.scopes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "issuer",
                |m: &Account| { &m.issuer },
                |m: &mut Account| { &mut m.issuer },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret",
                |m: &Account| { &m.secret },
                |m: &mut Account| { &mut m.secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Account| { &m.name },
                |m: &mut Account| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Account>(
                "Account",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Account {
        static instance: ::protobuf::rt::LazyV2<Account> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Account::new)
    }
}

impl ::protobuf::Clear for Account {
    fn clear(&mut self) {
        self.id.clear();
        self.field_type.clear();
        self.metadata.clear();
        self.scopes.clear();
        self.issuer.clear();
        self.secret.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Account {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Account {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Resource {
    // message fields
    pub name: ::std::string::String,
    pub field_type: ::std::string::String,
    pub endpoint: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Resource {
    fn default() -> &'a Resource {
        <Resource as ::protobuf::Message>::default_instance()
    }
}

impl Resource {
    pub fn new() -> Resource {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string type = 2;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string endpoint = 3;


    pub fn get_endpoint(&self) -> &str {
        &self.endpoint
    }
    pub fn clear_endpoint(&mut self) {
        self.endpoint.clear();
    }

    // Param is passed by value, moved
    pub fn set_endpoint(&mut self, v: ::std::string::String) {
        self.endpoint = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_endpoint(&mut self) -> &mut ::std::string::String {
        &mut self.endpoint
    }

    // Take field
    pub fn take_endpoint(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.endpoint, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Resource {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.endpoint)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.field_type);
        }
        if !self.endpoint.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.endpoint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(2, &self.field_type)?;
        }
        if !self.endpoint.is_empty() {
            os.write_string(3, &self.endpoint)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Resource {
        Resource::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Resource| { &m.name },
                |m: &mut Resource| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &Resource| { &m.field_type },
                |m: &mut Resource| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "endpoint",
                |m: &Resource| { &m.endpoint },
                |m: &mut Resource| { &mut m.endpoint },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Resource>(
                "Resource",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Resource {
        static instance: ::protobuf::rt::LazyV2<Resource> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Resource::new)
    }
}

impl ::protobuf::Clear for Resource {
    fn clear(&mut self) {
        self.name.clear();
        self.field_type.clear();
        self.endpoint.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Resource {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Resource {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateRequest {
    // message fields
    pub id: ::std::string::String,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub scopes: ::protobuf::RepeatedField<::std::string::String>,
    pub secret: ::std::string::String,
    pub field_type: ::std::string::String,
    pub provider: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<Options>,
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateRequest {
    fn default() -> &'a GenerateRequest {
        <GenerateRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateRequest {
    pub fn new() -> GenerateRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // repeated .auth.GenerateRequest.MetadataEntry metadata = 3;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // repeated string scopes = 4;


    pub fn get_scopes(&self) -> &[::std::string::String] {
        &self.scopes
    }
    pub fn clear_scopes(&mut self) {
        self.scopes.clear();
    }

    // Param is passed by value, moved
    pub fn set_scopes(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.scopes = v;
    }

    // Mutable pointer to the field.
    pub fn mut_scopes(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.scopes
    }

    // Take field
    pub fn take_scopes(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.scopes, ::protobuf::RepeatedField::new())
    }

    // string secret = 5;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }

    // string type = 6;


    pub fn get_field_type(&self) -> &str {
        &self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type.clear();
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: ::std::string::String) {
        self.field_type = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_field_type(&mut self) -> &mut ::std::string::String {
        &mut self.field_type
    }

    // Take field
    pub fn take_field_type(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.field_type, ::std::string::String::new())
    }

    // string provider = 7;


    pub fn get_provider(&self) -> &str {
        &self.provider
    }
    pub fn clear_provider(&mut self) {
        self.provider.clear();
    }

    // Param is passed by value, moved
    pub fn set_provider(&mut self, v: ::std::string::String) {
        self.provider = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_provider(&mut self) -> &mut ::std::string::String {
        &mut self.provider
    }

    // Take field
    pub fn take_provider(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.provider, ::std::string::String::new())
    }

    // .auth.Options options = 8;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }

    // string name = 9;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GenerateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.scopes)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.field_type)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.provider)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                9 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata);
        for value in &self.scopes {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.secret);
        }
        if !self.field_type.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.field_type);
        }
        if !self.provider.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.provider);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(9, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata, os)?;
        for v in &self.scopes {
            os.write_string(4, &v)?;
        };
        if !self.secret.is_empty() {
            os.write_string(5, &self.secret)?;
        }
        if !self.field_type.is_empty() {
            os.write_string(6, &self.field_type)?;
        }
        if !self.provider.is_empty() {
            os.write_string(7, &self.provider)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.name.is_empty() {
            os.write_string(9, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateRequest {
        GenerateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &GenerateRequest| { &m.id },
                |m: &mut GenerateRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &GenerateRequest| { &m.metadata },
                |m: &mut GenerateRequest| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scopes",
                |m: &GenerateRequest| { &m.scopes },
                |m: &mut GenerateRequest| { &mut m.scopes },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret",
                |m: &GenerateRequest| { &m.secret },
                |m: &mut GenerateRequest| { &mut m.secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "type",
                |m: &GenerateRequest| { &m.field_type },
                |m: &mut GenerateRequest| { &mut m.field_type },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "provider",
                |m: &GenerateRequest| { &m.provider },
                |m: &mut GenerateRequest| { &mut m.provider },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &GenerateRequest| { &m.options },
                |m: &mut GenerateRequest| { &mut m.options },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &GenerateRequest| { &m.name },
                |m: &mut GenerateRequest| { &mut m.name },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateRequest>(
                "GenerateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenerateRequest {
        static instance: ::protobuf::rt::LazyV2<GenerateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenerateRequest::new)
    }
}

impl ::protobuf::Clear for GenerateRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.metadata.clear();
        self.scopes.clear();
        self.secret.clear();
        self.field_type.clear();
        self.provider.clear();
        self.options.clear();
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GenerateResponse {
    // message fields
    pub account: ::protobuf::SingularPtrField<Account>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GenerateResponse {
    fn default() -> &'a GenerateResponse {
        <GenerateResponse as ::protobuf::Message>::default_instance()
    }
}

impl GenerateResponse {
    pub fn new() -> GenerateResponse {
        ::std::default::Default::default()
    }

    // .auth.Account account = 1;


    pub fn get_account(&self) -> &Account {
        self.account.as_ref().unwrap_or_else(|| <Account as ::protobuf::Message>::default_instance())
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: Account) {
        self.account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut Account {
        if self.account.is_none() {
            self.account.set_default();
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> Account {
        self.account.take().unwrap_or_else(|| Account::new())
    }
}

impl ::protobuf::Message for GenerateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GenerateResponse {
        GenerateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Account>>(
                "account",
                |m: &GenerateResponse| { &m.account },
                |m: &mut GenerateResponse| { &mut m.account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GenerateResponse>(
                "GenerateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GenerateResponse {
        static instance: ::protobuf::rt::LazyV2<GenerateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GenerateResponse::new)
    }
}

impl ::protobuf::Clear for GenerateResponse {
    fn clear(&mut self) {
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GenerateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantRequest {
    // message fields
    pub scope: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantRequest {
    fn default() -> &'a GrantRequest {
        <GrantRequest as ::protobuf::Message>::default_instance()
    }
}

impl GrantRequest {
    pub fn new() -> GrantRequest {
        ::std::default::Default::default()
    }

    // string scope = 1;


    pub fn get_scope(&self) -> &str {
        &self.scope
    }
    pub fn clear_scope(&mut self) {
        self.scope.clear();
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: ::std::string::String) {
        self.scope = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut ::std::string::String {
        &mut self.scope
    }

    // Take field
    pub fn take_scope(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scope, ::std::string::String::new())
    }

    // .auth.Resource resource = 2;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // .auth.Options options = 3;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for GrantRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scope)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.scope.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scope);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.scope.is_empty() {
            os.write_string(1, &self.scope)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantRequest {
        GrantRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scope",
                |m: &GrantRequest| { &m.scope },
                |m: &mut GrantRequest| { &mut m.scope },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &GrantRequest| { &m.resource },
                |m: &mut GrantRequest| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &GrantRequest| { &m.options },
                |m: &mut GrantRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrantRequest>(
                "GrantRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrantRequest {
        static instance: ::protobuf::rt::LazyV2<GrantRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrantRequest::new)
    }
}

impl ::protobuf::Clear for GrantRequest {
    fn clear(&mut self) {
        self.scope.clear();
        self.resource.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrantRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GrantResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GrantResponse {
    fn default() -> &'a GrantResponse {
        <GrantResponse as ::protobuf::Message>::default_instance()
    }
}

impl GrantResponse {
    pub fn new() -> GrantResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GrantResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GrantResponse {
        GrantResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GrantResponse>(
                "GrantResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GrantResponse {
        static instance: ::protobuf::rt::LazyV2<GrantResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GrantResponse::new)
    }
}

impl ::protobuf::Clear for GrantResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GrantResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GrantResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeRequest {
    // message fields
    pub scope: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevokeRequest {
    fn default() -> &'a RevokeRequest {
        <RevokeRequest as ::protobuf::Message>::default_instance()
    }
}

impl RevokeRequest {
    pub fn new() -> RevokeRequest {
        ::std::default::Default::default()
    }

    // string scope = 1;


    pub fn get_scope(&self) -> &str {
        &self.scope
    }
    pub fn clear_scope(&mut self) {
        self.scope.clear();
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: ::std::string::String) {
        self.scope = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut ::std::string::String {
        &mut self.scope
    }

    // Take field
    pub fn take_scope(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scope, ::std::string::String::new())
    }

    // .auth.Resource resource = 2;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // .auth.Options options = 3;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for RevokeRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scope)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.scope.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.scope);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.scope.is_empty() {
            os.write_string(1, &self.scope)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeRequest {
        RevokeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scope",
                |m: &RevokeRequest| { &m.scope },
                |m: &mut RevokeRequest| { &mut m.scope },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &RevokeRequest| { &m.resource },
                |m: &mut RevokeRequest| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &RevokeRequest| { &m.options },
                |m: &mut RevokeRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevokeRequest>(
                "RevokeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevokeRequest {
        static instance: ::protobuf::rt::LazyV2<RevokeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevokeRequest::new)
    }
}

impl ::protobuf::Clear for RevokeRequest {
    fn clear(&mut self) {
        self.scope.clear();
        self.resource.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RevokeResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RevokeResponse {
    fn default() -> &'a RevokeResponse {
        <RevokeResponse as ::protobuf::Message>::default_instance()
    }
}

impl RevokeResponse {
    pub fn new() -> RevokeResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RevokeResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RevokeResponse {
        RevokeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RevokeResponse>(
                "RevokeResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RevokeResponse {
        static instance: ::protobuf::rt::LazyV2<RevokeResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RevokeResponse::new)
    }
}

impl ::protobuf::Clear for RevokeResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RevokeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RevokeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InspectRequest {
    // message fields
    pub token: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InspectRequest {
    fn default() -> &'a InspectRequest {
        <InspectRequest as ::protobuf::Message>::default_instance()
    }
}

impl InspectRequest {
    pub fn new() -> InspectRequest {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // .auth.Options options = 2;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for InspectRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InspectRequest {
        InspectRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &InspectRequest| { &m.token },
                |m: &mut InspectRequest| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &InspectRequest| { &m.options },
                |m: &mut InspectRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InspectRequest>(
                "InspectRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InspectRequest {
        static instance: ::protobuf::rt::LazyV2<InspectRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InspectRequest::new)
    }
}

impl ::protobuf::Clear for InspectRequest {
    fn clear(&mut self) {
        self.token.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InspectRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InspectRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InspectResponse {
    // message fields
    pub account: ::protobuf::SingularPtrField<Account>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InspectResponse {
    fn default() -> &'a InspectResponse {
        <InspectResponse as ::protobuf::Message>::default_instance()
    }
}

impl InspectResponse {
    pub fn new() -> InspectResponse {
        ::std::default::Default::default()
    }

    // .auth.Account account = 1;


    pub fn get_account(&self) -> &Account {
        self.account.as_ref().unwrap_or_else(|| <Account as ::protobuf::Message>::default_instance())
    }
    pub fn clear_account(&mut self) {
        self.account.clear();
    }

    pub fn has_account(&self) -> bool {
        self.account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: Account) {
        self.account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut Account {
        if self.account.is_none() {
            self.account.set_default();
        }
        self.account.as_mut().unwrap()
    }

    // Take field
    pub fn take_account(&mut self) -> Account {
        self.account.take().unwrap_or_else(|| Account::new())
    }
}

impl ::protobuf::Message for InspectResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.account {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.account)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.account.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InspectResponse {
        InspectResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Account>>(
                "account",
                |m: &InspectResponse| { &m.account },
                |m: &mut InspectResponse| { &mut m.account },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<InspectResponse>(
                "InspectResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static InspectResponse {
        static instance: ::protobuf::rt::LazyV2<InspectResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(InspectResponse::new)
    }
}

impl ::protobuf::Clear for InspectResponse {
    fn clear(&mut self) {
        self.account.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InspectResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InspectResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenRequest {
    // message fields
    pub id: ::std::string::String,
    pub secret: ::std::string::String,
    pub refresh_token: ::std::string::String,
    pub token_expiry: i64,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenRequest {
    fn default() -> &'a TokenRequest {
        <TokenRequest as ::protobuf::Message>::default_instance()
    }
}

impl TokenRequest {
    pub fn new() -> TokenRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string secret = 2;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }

    // string refresh_token = 3;


    pub fn get_refresh_token(&self) -> &str {
        &self.refresh_token
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        &mut self.refresh_token
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refresh_token, ::std::string::String::new())
    }

    // int64 token_expiry = 4;


    pub fn get_token_expiry(&self) -> i64 {
        self.token_expiry
    }
    pub fn clear_token_expiry(&mut self) {
        self.token_expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_token_expiry(&mut self, v: i64) {
        self.token_expiry = v;
    }

    // .auth.Options options = 5;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for TokenRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.token_expiry = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.secret);
        }
        if !self.refresh_token.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.refresh_token);
        }
        if self.token_expiry != 0 {
            my_size += ::protobuf::rt::value_size(4, self.token_expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.secret.is_empty() {
            os.write_string(2, &self.secret)?;
        }
        if !self.refresh_token.is_empty() {
            os.write_string(3, &self.refresh_token)?;
        }
        if self.token_expiry != 0 {
            os.write_int64(4, self.token_expiry)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenRequest {
        TokenRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &TokenRequest| { &m.id },
                |m: &mut TokenRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret",
                |m: &TokenRequest| { &m.secret },
                |m: &mut TokenRequest| { &mut m.secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &TokenRequest| { &m.refresh_token },
                |m: &mut TokenRequest| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "token_expiry",
                |m: &TokenRequest| { &m.token_expiry },
                |m: &mut TokenRequest| { &mut m.token_expiry },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &TokenRequest| { &m.options },
                |m: &mut TokenRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TokenRequest>(
                "TokenRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TokenRequest {
        static instance: ::protobuf::rt::LazyV2<TokenRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenRequest::new)
    }
}

impl ::protobuf::Clear for TokenRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.secret.clear();
        self.refresh_token.clear();
        self.token_expiry = 0;
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TokenResponse {
    // message fields
    pub token: ::protobuf::SingularPtrField<Token>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TokenResponse {
    fn default() -> &'a TokenResponse {
        <TokenResponse as ::protobuf::Message>::default_instance()
    }
}

impl TokenResponse {
    pub fn new() -> TokenResponse {
        ::std::default::Default::default()
    }

    // .auth.Token token = 1;


    pub fn get_token(&self) -> &Token {
        self.token.as_ref().unwrap_or_else(|| <Token as ::protobuf::Message>::default_instance())
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    pub fn has_token(&self) -> bool {
        self.token.is_some()
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: Token) {
        self.token = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut Token {
        if self.token.is_none() {
            self.token.set_default();
        }
        self.token.as_mut().unwrap()
    }

    // Take field
    pub fn take_token(&mut self) -> Token {
        self.token.take().unwrap_or_else(|| Token::new())
    }
}

impl ::protobuf::Message for TokenResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.token {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.token.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.token.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TokenResponse {
        TokenResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Token>>(
                "token",
                |m: &TokenResponse| { &m.token },
                |m: &mut TokenResponse| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TokenResponse>(
                "TokenResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TokenResponse {
        static instance: ::protobuf::rt::LazyV2<TokenResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TokenResponse::new)
    }
}

impl ::protobuf::Clear for TokenResponse {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TokenResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TokenResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rule {
    // message fields
    pub id: ::std::string::String,
    pub scope: ::std::string::String,
    pub resource: ::protobuf::SingularPtrField<Resource>,
    pub access: Access,
    pub priority: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rule {
    fn default() -> &'a Rule {
        <Rule as ::protobuf::Message>::default_instance()
    }
}

impl Rule {
    pub fn new() -> Rule {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string scope = 2;


    pub fn get_scope(&self) -> &str {
        &self.scope
    }
    pub fn clear_scope(&mut self) {
        self.scope.clear();
    }

    // Param is passed by value, moved
    pub fn set_scope(&mut self, v: ::std::string::String) {
        self.scope = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_scope(&mut self) -> &mut ::std::string::String {
        &mut self.scope
    }

    // Take field
    pub fn take_scope(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.scope, ::std::string::String::new())
    }

    // .auth.Resource resource = 3;


    pub fn get_resource(&self) -> &Resource {
        self.resource.as_ref().unwrap_or_else(|| <Resource as ::protobuf::Message>::default_instance())
    }
    pub fn clear_resource(&mut self) {
        self.resource.clear();
    }

    pub fn has_resource(&self) -> bool {
        self.resource.is_some()
    }

    // Param is passed by value, moved
    pub fn set_resource(&mut self, v: Resource) {
        self.resource = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_resource(&mut self) -> &mut Resource {
        if self.resource.is_none() {
            self.resource.set_default();
        }
        self.resource.as_mut().unwrap()
    }

    // Take field
    pub fn take_resource(&mut self) -> Resource {
        self.resource.take().unwrap_or_else(|| Resource::new())
    }

    // .auth.Access access = 4;


    pub fn get_access(&self) -> Access {
        self.access
    }
    pub fn clear_access(&mut self) {
        self.access = Access::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_access(&mut self, v: Access) {
        self.access = v;
    }

    // int32 priority = 5;


    pub fn get_priority(&self) -> i32 {
        self.priority
    }
    pub fn clear_priority(&mut self) {
        self.priority = 0;
    }

    // Param is passed by value, moved
    pub fn set_priority(&mut self, v: i32) {
        self.priority = v;
    }
}

impl ::protobuf::Message for Rule {
    fn is_initialized(&self) -> bool {
        for v in &self.resource {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.scope)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.resource)?;
                },
                4 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.access, 4, &mut self.unknown_fields)?
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.priority = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.scope.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.scope);
        }
        if let Some(ref v) = self.resource.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.access != Access::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(4, self.access);
        }
        if self.priority != 0 {
            my_size += ::protobuf::rt::value_size(5, self.priority, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.scope.is_empty() {
            os.write_string(2, &self.scope)?;
        }
        if let Some(ref v) = self.resource.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.access != Access::UNKNOWN {
            os.write_enum(4, ::protobuf::ProtobufEnum::value(&self.access))?;
        }
        if self.priority != 0 {
            os.write_int32(5, self.priority)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rule {
        Rule::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Rule| { &m.id },
                |m: &mut Rule| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "scope",
                |m: &Rule| { &m.scope },
                |m: &mut Rule| { &mut m.scope },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Resource>>(
                "resource",
                |m: &Rule| { &m.resource },
                |m: &mut Rule| { &mut m.resource },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Access>>(
                "access",
                |m: &Rule| { &m.access },
                |m: &mut Rule| { &mut m.access },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "priority",
                |m: &Rule| { &m.priority },
                |m: &mut Rule| { &mut m.priority },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rule>(
                "Rule",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rule {
        static instance: ::protobuf::rt::LazyV2<Rule> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rule::new)
    }
}

impl ::protobuf::Clear for Rule {
    fn clear(&mut self) {
        self.id.clear();
        self.scope.clear();
        self.resource.clear();
        self.access = Access::UNKNOWN;
        self.priority = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rule {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rule {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Options {
    // message fields
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Options {
    fn default() -> &'a Options {
        <Options as ::protobuf::Message>::default_instance()
    }
}

impl Options {
    pub fn new() -> Options {
        ::std::default::Default::default()
    }

    // string namespace = 1;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Options {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.namespace.is_empty() {
            os.write_string(1, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Options {
        Options::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &Options| { &m.namespace },
                |m: &mut Options| { &mut m.namespace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Options>(
                "Options",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Options {
        static instance: ::protobuf::rt::LazyV2<Options> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Options::new)
    }
}

impl ::protobuf::Clear for Options {
    fn clear(&mut self) {
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Options {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Options {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateRequest {
    // message fields
    pub rule: ::protobuf::SingularPtrField<Rule>,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateRequest {
    fn default() -> &'a CreateRequest {
        <CreateRequest as ::protobuf::Message>::default_instance()
    }
}

impl CreateRequest {
    pub fn new() -> CreateRequest {
        ::std::default::Default::default()
    }

    // .auth.Rule rule = 1;


    pub fn get_rule(&self) -> &Rule {
        self.rule.as_ref().unwrap_or_else(|| <Rule as ::protobuf::Message>::default_instance())
    }
    pub fn clear_rule(&mut self) {
        self.rule.clear();
    }

    pub fn has_rule(&self) -> bool {
        self.rule.is_some()
    }

    // Param is passed by value, moved
    pub fn set_rule(&mut self, v: Rule) {
        self.rule = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_rule(&mut self) -> &mut Rule {
        if self.rule.is_none() {
            self.rule.set_default();
        }
        self.rule.as_mut().unwrap()
    }

    // Take field
    pub fn take_rule(&mut self) -> Rule {
        self.rule.take().unwrap_or_else(|| Rule::new())
    }

    // .auth.Options options = 2;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for CreateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.rule {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.rule)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.rule.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.rule.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateRequest {
        CreateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                "rule",
                |m: &CreateRequest| { &m.rule },
                |m: &mut CreateRequest| { &mut m.rule },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &CreateRequest| { &m.options },
                |m: &mut CreateRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateRequest>(
                "CreateRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateRequest {
        static instance: ::protobuf::rt::LazyV2<CreateRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateRequest::new)
    }
}

impl ::protobuf::Clear for CreateRequest {
    fn clear(&mut self) {
        self.rule.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CreateResponse {
    fn default() -> &'a CreateResponse {
        <CreateResponse as ::protobuf::Message>::default_instance()
    }
}

impl CreateResponse {
    pub fn new() -> CreateResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CreateResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateResponse {
        CreateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CreateResponse>(
                "CreateResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CreateResponse {
        static instance: ::protobuf::rt::LazyV2<CreateResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CreateResponse::new)
    }
}

impl ::protobuf::Clear for CreateResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteRequest {
    // message fields
    pub id: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteRequest {
    fn default() -> &'a DeleteRequest {
        <DeleteRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteRequest {
    pub fn new() -> DeleteRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // .auth.Options options = 2;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for DeleteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteRequest {
        DeleteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &DeleteRequest| { &m.id },
                |m: &mut DeleteRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &DeleteRequest| { &m.options },
                |m: &mut DeleteRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteRequest>(
                "DeleteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteRequest {
        static instance: ::protobuf::rt::LazyV2<DeleteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteRequest::new)
    }
}

impl ::protobuf::Clear for DeleteRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DeleteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DeleteResponse {
    fn default() -> &'a DeleteResponse {
        <DeleteResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteResponse {
    pub fn new() -> DeleteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DeleteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DeleteResponse {
        DeleteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<DeleteResponse>(
                "DeleteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static DeleteResponse {
        static instance: ::protobuf::rt::LazyV2<DeleteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(DeleteResponse::new)
    }
}

impl ::protobuf::Clear for DeleteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DeleteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListRequest {
    // message fields
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListRequest {
    fn default() -> &'a ListRequest {
        <ListRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListRequest {
    pub fn new() -> ListRequest {
        ::std::default::Default::default()
    }

    // .auth.Options options = 2;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for ListRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListRequest {
        ListRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &ListRequest| { &m.options },
                |m: &mut ListRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListRequest>(
                "ListRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListRequest {
        static instance: ::protobuf::rt::LazyV2<ListRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListRequest::new)
    }
}

impl ::protobuf::Clear for ListRequest {
    fn clear(&mut self) {
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListResponse {
    // message fields
    pub rules: ::protobuf::RepeatedField<Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListResponse {
    fn default() -> &'a ListResponse {
        <ListResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListResponse {
    pub fn new() -> ListResponse {
        ::std::default::Default::default()
    }

    // repeated .auth.Rule rules = 1;


    pub fn get_rules(&self) -> &[Rule] {
        &self.rules
    }
    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.rules {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListResponse {
        ListResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Rule>>(
                "rules",
                |m: &ListResponse| { &m.rules },
                |m: &mut ListResponse| { &mut m.rules },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ListResponse>(
                "ListResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ListResponse {
        static instance: ::protobuf::rt::LazyV2<ListResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ListResponse::new)
    }
}

impl ::protobuf::Clear for ListResponse {
    fn clear(&mut self) {
        self.rules.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChangeSecretRequest {
    // message fields
    pub id: ::std::string::String,
    pub old_secret: ::std::string::String,
    pub new_secret: ::std::string::String,
    pub options: ::protobuf::SingularPtrField<Options>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChangeSecretRequest {
    fn default() -> &'a ChangeSecretRequest {
        <ChangeSecretRequest as ::protobuf::Message>::default_instance()
    }
}

impl ChangeSecretRequest {
    pub fn new() -> ChangeSecretRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string old_secret = 2;


    pub fn get_old_secret(&self) -> &str {
        &self.old_secret
    }
    pub fn clear_old_secret(&mut self) {
        self.old_secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_old_secret(&mut self, v: ::std::string::String) {
        self.old_secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_old_secret(&mut self) -> &mut ::std::string::String {
        &mut self.old_secret
    }

    // Take field
    pub fn take_old_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.old_secret, ::std::string::String::new())
    }

    // string new_secret = 3;


    pub fn get_new_secret(&self) -> &str {
        &self.new_secret
    }
    pub fn clear_new_secret(&mut self) {
        self.new_secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_new_secret(&mut self, v: ::std::string::String) {
        self.new_secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_new_secret(&mut self) -> &mut ::std::string::String {
        &mut self.new_secret
    }

    // Take field
    pub fn take_new_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.new_secret, ::std::string::String::new())
    }

    // .auth.Options options = 4;


    pub fn get_options(&self) -> &Options {
        self.options.as_ref().unwrap_or_else(|| <Options as ::protobuf::Message>::default_instance())
    }
    pub fn clear_options(&mut self) {
        self.options.clear();
    }

    pub fn has_options(&self) -> bool {
        self.options.is_some()
    }

    // Param is passed by value, moved
    pub fn set_options(&mut self, v: Options) {
        self.options = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_options(&mut self) -> &mut Options {
        if self.options.is_none() {
            self.options.set_default();
        }
        self.options.as_mut().unwrap()
    }

    // Take field
    pub fn take_options(&mut self) -> Options {
        self.options.take().unwrap_or_else(|| Options::new())
    }
}

impl ::protobuf::Message for ChangeSecretRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.options {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.old_secret)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.new_secret)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.options)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.old_secret.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.old_secret);
        }
        if !self.new_secret.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.new_secret);
        }
        if let Some(ref v) = self.options.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.old_secret.is_empty() {
            os.write_string(2, &self.old_secret)?;
        }
        if !self.new_secret.is_empty() {
            os.write_string(3, &self.new_secret)?;
        }
        if let Some(ref v) = self.options.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChangeSecretRequest {
        ChangeSecretRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &ChangeSecretRequest| { &m.id },
                |m: &mut ChangeSecretRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "old_secret",
                |m: &ChangeSecretRequest| { &m.old_secret },
                |m: &mut ChangeSecretRequest| { &mut m.old_secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "new_secret",
                |m: &ChangeSecretRequest| { &m.new_secret },
                |m: &mut ChangeSecretRequest| { &mut m.new_secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Options>>(
                "options",
                |m: &ChangeSecretRequest| { &m.options },
                |m: &mut ChangeSecretRequest| { &mut m.options },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChangeSecretRequest>(
                "ChangeSecretRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChangeSecretRequest {
        static instance: ::protobuf::rt::LazyV2<ChangeSecretRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChangeSecretRequest::new)
    }
}

impl ::protobuf::Clear for ChangeSecretRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.old_secret.clear();
        self.new_secret.clear();
        self.options.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChangeSecretRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeSecretRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChangeSecretResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChangeSecretResponse {
    fn default() -> &'a ChangeSecretResponse {
        <ChangeSecretResponse as ::protobuf::Message>::default_instance()
    }
}

impl ChangeSecretResponse {
    pub fn new() -> ChangeSecretResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ChangeSecretResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChangeSecretResponse {
        ChangeSecretResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChangeSecretResponse>(
                "ChangeSecretResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChangeSecretResponse {
        static instance: ::protobuf::rt::LazyV2<ChangeSecretResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChangeSecretResponse::new)
    }
}

impl ::protobuf::Clear for ChangeSecretResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChangeSecretResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChangeSecretResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Access {
    UNKNOWN = 0,
    GRANTED = 1,
    DENIED = 2,
}

impl ::protobuf::ProtobufEnum for Access {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Access> {
        match value {
            0 => ::std::option::Option::Some(Access::UNKNOWN),
            1 => ::std::option::Option::Some(Access::GRANTED),
            2 => ::std::option::Option::Some(Access::DENIED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Access] = &[
            Access::UNKNOWN,
            Access::GRANTED,
            Access::DENIED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<Access>("Access", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for Access {
}

impl ::std::default::Default for Access {
    fn default() -> Self {
        Access::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for Access {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fauth/auth.proto\x12\x04auth\">\n\x13ListAccountsRequest\x12'\n\x07\
    options\x18\x01\x20\x01(\x0b2\r.auth.OptionsR\x07options\"A\n\x14ListAcc\
    ountsResponse\x12)\n\x08accounts\x18\x01\x20\x03(\x0b2\r.auth.AccountR\
    \x08accounts\"O\n\x14DeleteAccountRequest\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12'\n\x07options\x18\x02\x20\x01(\x0b2\r.auth.OptionsR\
    \x07options\"\x17\n\x15DeleteAccountResponse\"\x81\x01\n\x05Token\x12!\n\
    \x0caccess_token\x18\x01\x20\x01(\tR\x0baccessToken\x12#\n\rrefresh_toke\
    n\x18\x02\x20\x01(\tR\x0crefreshToken\x12\x18\n\x07created\x18\x03\x20\
    \x01(\x03R\x07created\x12\x16\n\x06expiry\x18\x04\x20\x01(\x03R\x06expir\
    y\"\xff\x01\n\x07Account\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x127\n\x08metadata\x18\x04\
    \x20\x03(\x0b2\x1b.auth.Account.MetadataEntryR\x08metadata\x12\x16\n\x06\
    scopes\x18\x05\x20\x03(\tR\x06scopes\x12\x16\n\x06issuer\x18\x06\x20\x01\
    (\tR\x06issuer\x12\x16\n\x06secret\x18\x07\x20\x01(\tR\x06secret\x12\x12\
    \n\x04name\x18\x08\x20\x01(\tR\x04name\x1a;\n\rMetadataEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01\"N\n\x08Resource\x12\x12\n\x04name\x18\x01\x20\x01(\
    \tR\x04name\x12\x12\n\x04type\x18\x02\x20\x01(\tR\x04type\x12\x1a\n\x08e\
    ndpoint\x18\x03\x20\x01(\tR\x08endpoint\"\xbc\x02\n\x0fGenerateRequest\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12?\n\x08metadata\x18\x03\
    \x20\x03(\x0b2#.auth.GenerateRequest.MetadataEntryR\x08metadata\x12\x16\
    \n\x06scopes\x18\x04\x20\x03(\tR\x06scopes\x12\x16\n\x06secret\x18\x05\
    \x20\x01(\tR\x06secret\x12\x12\n\x04type\x18\x06\x20\x01(\tR\x04type\x12\
    \x1a\n\x08provider\x18\x07\x20\x01(\tR\x08provider\x12'\n\x07options\x18\
    \x08\x20\x01(\x0b2\r.auth.OptionsR\x07options\x12\x12\n\x04name\x18\t\
    \x20\x01(\tR\x04name\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\
    \x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\
    \x01\";\n\x10GenerateResponse\x12'\n\x07account\x18\x01\x20\x01(\x0b2\r.\
    auth.AccountR\x07account\"y\n\x0cGrantRequest\x12\x14\n\x05scope\x18\x01\
    \x20\x01(\tR\x05scope\x12*\n\x08resource\x18\x02\x20\x01(\x0b2\x0e.auth.\
    ResourceR\x08resource\x12'\n\x07options\x18\x03\x20\x01(\x0b2\r.auth.Opt\
    ionsR\x07options\"\x0f\n\rGrantResponse\"z\n\rRevokeRequest\x12\x14\n\
    \x05scope\x18\x01\x20\x01(\tR\x05scope\x12*\n\x08resource\x18\x02\x20\
    \x01(\x0b2\x0e.auth.ResourceR\x08resource\x12'\n\x07options\x18\x03\x20\
    \x01(\x0b2\r.auth.OptionsR\x07options\"\x10\n\x0eRevokeResponse\"O\n\x0e\
    InspectRequest\x12\x14\n\x05token\x18\x01\x20\x01(\tR\x05token\x12'\n\
    \x07options\x18\x02\x20\x01(\x0b2\r.auth.OptionsR\x07options\":\n\x0fIns\
    pectResponse\x12'\n\x07account\x18\x01\x20\x01(\x0b2\r.auth.AccountR\x07\
    account\"\xa7\x01\n\x0cTokenRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\
    \x02id\x12\x16\n\x06secret\x18\x02\x20\x01(\tR\x06secret\x12#\n\rrefresh\
    _token\x18\x03\x20\x01(\tR\x0crefreshToken\x12!\n\x0ctoken_expiry\x18\
    \x04\x20\x01(\x03R\x0btokenExpiry\x12'\n\x07options\x18\x05\x20\x01(\x0b\
    2\r.auth.OptionsR\x07options\"2\n\rTokenResponse\x12!\n\x05token\x18\x01\
    \x20\x01(\x0b2\x0b.auth.TokenR\x05token\"\x9a\x01\n\x04Rule\x12\x0e\n\
    \x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05scope\x18\x02\x20\x01(\tR\
    \x05scope\x12*\n\x08resource\x18\x03\x20\x01(\x0b2\x0e.auth.ResourceR\
    \x08resource\x12$\n\x06access\x18\x04\x20\x01(\x0e2\x0c.auth.AccessR\x06\
    access\x12\x1a\n\x08priority\x18\x05\x20\x01(\x05R\x08priority\"'\n\x07O\
    ptions\x12\x1c\n\tnamespace\x18\x01\x20\x01(\tR\tnamespace\"X\n\rCreateR\
    equest\x12\x1e\n\x04rule\x18\x01\x20\x01(\x0b2\n.auth.RuleR\x04rule\x12'\
    \n\x07options\x18\x02\x20\x01(\x0b2\r.auth.OptionsR\x07options\"\x10\n\
    \x0eCreateResponse\"H\n\rDeleteRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \tR\x02id\x12'\n\x07options\x18\x02\x20\x01(\x0b2\r.auth.OptionsR\x07opt\
    ions\"\x10\n\x0eDeleteResponse\"6\n\x0bListRequest\x12'\n\x07options\x18\
    \x02\x20\x01(\x0b2\r.auth.OptionsR\x07options\"0\n\x0cListResponse\x12\
    \x20\n\x05rules\x18\x01\x20\x03(\x0b2\n.auth.RuleR\x05rules\"\x8c\x01\n\
    \x13ChangeSecretRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\
    \x1d\n\nold_secret\x18\x02\x20\x01(\tR\toldSecret\x12\x1d\n\nnew_secret\
    \x18\x03\x20\x01(\tR\tnewSecret\x12'\n\x07options\x18\x04\x20\x01(\x0b2\
    \r.auth.OptionsR\x07options\"\x16\n\x14ChangeSecretResponse*.\n\x06Acces\
    s\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07GRANTED\x10\x01\x12\n\n\x06DEN\
    IED\x10\x022\xb1\x01\n\x04Auth\x12;\n\x08Generate\x12\x15.auth.GenerateR\
    equest\x1a\x16.auth.GenerateResponse\"\0\x128\n\x07Inspect\x12\x14.auth.\
    InspectRequest\x1a\x15.auth.InspectResponse\"\0\x122\n\x05Token\x12\x12.\
    auth.TokenRequest\x1a\x13.auth.TokenResponse\"\02\xd9\x01\n\x08Accounts\
    \x12?\n\x04List\x12\x19.auth.ListAccountsRequest\x1a\x1a.auth.ListAccoun\
    tsResponse\"\0\x12C\n\x06Delete\x12\x1a.auth.DeleteAccountRequest\x1a\
    \x1b.auth.DeleteAccountResponse\"\0\x12G\n\x0cChangeSecret\x12\x19.auth.\
    ChangeSecretRequest\x1a\x1a.auth.ChangeSecretResponse\"\02\xa6\x01\n\x05\
    Rules\x125\n\x06Create\x12\x13.auth.CreateRequest\x1a\x14.auth.CreateRes\
    ponse\"\0\x125\n\x06Delete\x12\x13.auth.DeleteRequest\x1a\x14.auth.Delet\
    eResponse\"\0\x12/\n\x04List\x12\x11.auth.ListRequest\x1a\x12.auth.ListR\
    esponse\"\0B+Z)github.com/micro/micro/v3/proto/auth;authJ\xaf+\n\x07\x12\
    \x05\0\0\xa1\x01\x1e\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\
    \x03\x02\x08\x0c\n\x08\n\x01\x08\x12\x03\x04\0@\n\t\n\x02\x08\x0b\x12\
    \x03\x04\0@\n\n\n\x02\x06\0\x12\x04\x06\0\n\x01\n\n\n\x03\x06\0\x01\x12\
    \x03\x06\x08\x0c\n\x0b\n\x04\x06\0\x02\0\x12\x03\x07\x08C\n\x0c\n\x05\
    \x06\0\x02\0\x01\x12\x03\x07\x0c\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\
    \x07\x15$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x07/?\n\x0b\n\x04\x06\0\
    \x02\x01\x12\x03\x08\x08@\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x0c\
    \x13\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x14\"\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x08-<\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x08:\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x0c\x11\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\t\x12\x1e\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t)6\n\n\n\
    \x02\x06\x01\x12\x04\x0c\0\x10\x01\n\n\n\x03\x06\x01\x01\x12\x03\x0c\x08\
    \x10\n\x0b\n\x04\x06\x01\x02\0\x12\x03\r\x08G\n\x0c\n\x05\x06\x01\x02\0\
    \x01\x12\x03\r\x0c\x10\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03\r\x11$\n\
    \x0c\n\x05\x06\x01\x02\0\x03\x12\x03\r/C\n\x0b\n\x04\x06\x01\x02\x01\x12\
    \x03\x0e\x08K\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03\x0e\x0c\x12\n\x0c\
    \n\x05\x06\x01\x02\x01\x02\x12\x03\x0e\x13'\n\x0c\n\x05\x06\x01\x02\x01\
    \x03\x12\x03\x0e2G\n\x0b\n\x04\x06\x01\x02\x02\x12\x03\x0f\x08O\n\x0c\n\
    \x05\x06\x01\x02\x02\x01\x12\x03\x0f\x0c\x18\n\x0c\n\x05\x06\x01\x02\x02\
    \x02\x12\x03\x0f\x19,\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\x03\x0f7K\n\n\
    \n\x02\x06\x02\x12\x04\x12\0\x16\x01\n\n\n\x03\x06\x02\x01\x12\x03\x12\
    \x08\r\n\x0b\n\x04\x06\x02\x02\0\x12\x03\x13\x08=\n\x0c\n\x05\x06\x02\
    \x02\0\x01\x12\x03\x13\x0c\x12\n\x0c\n\x05\x06\x02\x02\0\x02\x12\x03\x13\
    \x13\x20\n\x0c\n\x05\x06\x02\x02\0\x03\x12\x03\x13+9\n\x0b\n\x04\x06\x02\
    \x02\x01\x12\x03\x14\x08=\n\x0c\n\x05\x06\x02\x02\x01\x01\x12\x03\x14\
    \x0c\x12\n\x0c\n\x05\x06\x02\x02\x01\x02\x12\x03\x14\x13\x20\n\x0c\n\x05\
    \x06\x02\x02\x01\x03\x12\x03\x14+9\n\x0b\n\x04\x06\x02\x02\x02\x12\x03\
    \x15\x087\n\x0c\n\x05\x06\x02\x02\x02\x01\x12\x03\x15\x0c\x10\n\x0c\n\
    \x05\x06\x02\x02\x02\x02\x12\x03\x15\x11\x1c\n\x0c\n\x05\x06\x02\x02\x02\
    \x03\x12\x03\x15'3\n\n\n\x02\x04\0\x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\x18\x08\x1b\n\x0b\n\x04\x04\0\x02\0\x12\x03\x19\x08\x1c\n\r\
    \n\x05\x04\0\x02\0\x04\x12\x04\x19\x08\x18\x1d\n\x0c\n\x05\x04\0\x02\0\
    \x06\x12\x03\x19\x08\x0f\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x19\x10\x17\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x19\x1a\x1b\n\n\n\x02\x04\x01\x12\
    \x04\x1c\0\x1e\x01\n\n\n\x03\x04\x01\x01\x12\x03\x1c\x08\x1c\n\x0b\n\x04\
    \x04\x01\x02\0\x12\x03\x1d\x08&\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x1d\x08\x10\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1d\x11\x18\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x1d\x19!\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x1d$%\n\n\n\x02\x04\x02\x12\x04\x20\0#\x01\n\n\n\x03\x04\x02\
    \x01\x12\x03\x20\x08\x1c\n\x0b\n\x04\x04\x02\x02\0\x12\x03!\x08\x16\n\r\
    \n\x05\x04\x02\x02\0\x04\x12\x04!\x08\x20\x1e\n\x0c\n\x05\x04\x02\x02\0\
    \x05\x12\x03!\x08\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03!\x0f\x11\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03!\x14\x15\n\x0b\n\x04\x04\x02\x02\
    \x01\x12\x03\"\x08\x1c\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\"\x08!\x16\
    \n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\"\x08\x0f\n\x0c\n\x05\x04\x02\
    \x02\x01\x01\x12\x03\"\x10\x17\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\"\
    \x1a\x1b\n\t\n\x02\x04\x03\x12\x03%\0\x20\n\n\n\x03\x04\x03\x01\x12\x03%\
    \x08\x1d\n\n\n\x02\x04\x04\x12\x04'\0,\x01\n\n\n\x03\x04\x04\x01\x12\x03\
    '\x08\r\n\x0b\n\x04\x04\x04\x02\0\x12\x03(\x08\x20\n\r\n\x05\x04\x04\x02\
    \0\x04\x12\x04(\x08'\x0f\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03(\x08\x0e\
    \n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03(\x0f\x1b\n\x0c\n\x05\x04\x04\x02\
    \0\x03\x12\x03(\x1e\x1f\n\x0b\n\x04\x04\x04\x02\x01\x12\x03)\x08!\n\r\n\
    \x05\x04\x04\x02\x01\x04\x12\x04)\x08(\x20\n\x0c\n\x05\x04\x04\x02\x01\
    \x05\x12\x03)\x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03)\x0f\x1c\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03)\x1f\x20\n\x0b\n\x04\x04\x04\x02\
    \x02\x12\x03*\x08\x1a\n\r\n\x05\x04\x04\x02\x02\x04\x12\x04*\x08)!\n\x0c\
    \n\x05\x04\x04\x02\x02\x05\x12\x03*\x08\r\n\x0c\n\x05\x04\x04\x02\x02\
    \x01\x12\x03*\x0e\x15\n\x0c\n\x05\x04\x04\x02\x02\x03\x12\x03*\x18\x19\n\
    \x0b\n\x04\x04\x04\x02\x03\x12\x03+\x08\x19\n\r\n\x05\x04\x04\x02\x03\
    \x04\x12\x04+\x08*\x1a\n\x0c\n\x05\x04\x04\x02\x03\x05\x12\x03+\x08\r\n\
    \x0c\n\x05\x04\x04\x02\x03\x01\x12\x03+\x0e\x14\n\x0c\n\x05\x04\x04\x02\
    \x03\x03\x12\x03+\x17\x18\n\n\n\x02\x04\x05\x12\x04.\06\x01\n\n\n\x03\
    \x04\x05\x01\x12\x03.\x08\x0f\n\x0b\n\x04\x04\x05\x02\0\x12\x03/\x08\x16\
    \n\r\n\x05\x04\x05\x02\0\x04\x12\x04/\x08.\x11\n\x0c\n\x05\x04\x05\x02\0\
    \x05\x12\x03/\x08\x0e\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03/\x0f\x11\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03/\x14\x15\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x030\x08\x18\n\r\n\x05\x04\x05\x02\x01\x04\x12\x040\x08/\x16\n\
    \x0c\n\x05\x04\x05\x02\x01\x05\x12\x030\x08\x0e\n\x0c\n\x05\x04\x05\x02\
    \x01\x01\x12\x030\x0f\x13\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x030\x16\
    \x17\n\x0b\n\x04\x04\x05\x02\x02\x12\x031\x08)\n\r\n\x05\x04\x05\x02\x02\
    \x04\x12\x041\x080\x18\n\x0c\n\x05\x04\x05\x02\x02\x06\x12\x031\x08\x1b\
    \n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x031\x1c$\n\x0c\n\x05\x04\x05\x02\
    \x02\x03\x12\x031'(\n\x0b\n\x04\x04\x05\x02\x03\x12\x032\x08#\n\x0c\n\
    \x05\x04\x05\x02\x03\x04\x12\x032\x08\x10\n\x0c\n\x05\x04\x05\x02\x03\
    \x05\x12\x032\x11\x17\n\x0c\n\x05\x04\x05\x02\x03\x01\x12\x032\x18\x1e\n\
    \x0c\n\x05\x04\x05\x02\x03\x03\x12\x032!\"\n\x0b\n\x04\x04\x05\x02\x04\
    \x12\x033\x08\x1a\n\r\n\x05\x04\x05\x02\x04\x04\x12\x043\x082#\n\x0c\n\
    \x05\x04\x05\x02\x04\x05\x12\x033\x08\x0e\n\x0c\n\x05\x04\x05\x02\x04\
    \x01\x12\x033\x0f\x15\n\x0c\n\x05\x04\x05\x02\x04\x03\x12\x033\x18\x19\n\
    \x0b\n\x04\x04\x05\x02\x05\x12\x034\x08\x1a\n\r\n\x05\x04\x05\x02\x05\
    \x04\x12\x044\x083\x1a\n\x0c\n\x05\x04\x05\x02\x05\x05\x12\x034\x08\x0e\
    \n\x0c\n\x05\x04\x05\x02\x05\x01\x12\x034\x0f\x15\n\x0c\n\x05\x04\x05\
    \x02\x05\x03\x12\x034\x18\x19\n\x0b\n\x04\x04\x05\x02\x06\x12\x035\x08\
    \x18\n\r\n\x05\x04\x05\x02\x06\x04\x12\x045\x084\x1a\n\x0c\n\x05\x04\x05\
    \x02\x06\x05\x12\x035\x08\x0e\n\x0c\n\x05\x04\x05\x02\x06\x01\x12\x035\
    \x0f\x13\n\x0c\n\x05\x04\x05\x02\x06\x03\x12\x035\x16\x17\n\n\n\x02\x04\
    \x06\x12\x048\0<\x01\n\n\n\x03\x04\x06\x01\x12\x038\x08\x10\n\x0b\n\x04\
    \x04\x06\x02\0\x12\x039\x08\x18\n\r\n\x05\x04\x06\x02\0\x04\x12\x049\x08\
    8\x11\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x039\x08\x0e\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x039\x0f\x13\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x039\x16\
    \x17\n\x0b\n\x04\x04\x06\x02\x01\x12\x03:\x08\x18\n\r\n\x05\x04\x06\x02\
    \x01\x04\x12\x04:\x089\x18\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03:\x08\
    \x0e\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03:\x0f\x13\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03:\x16\x17\n\x0b\n\x04\x04\x06\x02\x02\x12\x03;\
    \x08\x1c\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04;\x08:\x18\n\x0c\n\x05\x04\
    \x06\x02\x02\x05\x12\x03;\x08\x0e\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\
    \x03;\x0f\x17\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03;\x1a\x1b\n\n\n\x02\
    \x04\x07\x12\x04>\0G\x01\n\n\n\x03\x04\x07\x01\x12\x03>\x08\x17\n\x0b\n\
    \x04\x04\x07\x02\0\x12\x03?\x08\x16\n\r\n\x05\x04\x07\x02\0\x04\x12\x04?\
    \x08>\x19\n\x0c\n\x05\x04\x07\x02\0\x05\x12\x03?\x08\x0e\n\x0c\n\x05\x04\
    \x07\x02\0\x01\x12\x03?\x0f\x11\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03?\
    \x14\x15\n\x0b\n\x04\x04\x07\x02\x01\x12\x03@\x08)\n\r\n\x05\x04\x07\x02\
    \x01\x04\x12\x04@\x08?\x16\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03@\x08\
    \x1b\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03@\x1c$\n\x0c\n\x05\x04\x07\
    \x02\x01\x03\x12\x03@'(\n\x0b\n\x04\x04\x07\x02\x02\x12\x03A\x08#\n\x0c\
    \n\x05\x04\x07\x02\x02\x04\x12\x03A\x08\x10\n\x0c\n\x05\x04\x07\x02\x02\
    \x05\x12\x03A\x11\x17\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x03A\x18\x1e\n\
    \x0c\n\x05\x04\x07\x02\x02\x03\x12\x03A!\"\n\x0b\n\x04\x04\x07\x02\x03\
    \x12\x03B\x08\x1a\n\r\n\x05\x04\x07\x02\x03\x04\x12\x04B\x08A#\n\x0c\n\
    \x05\x04\x07\x02\x03\x05\x12\x03B\x08\x0e\n\x0c\n\x05\x04\x07\x02\x03\
    \x01\x12\x03B\x0f\x15\n\x0c\n\x05\x04\x07\x02\x03\x03\x12\x03B\x18\x19\n\
    \x0b\n\x04\x04\x07\x02\x04\x12\x03C\x08\x18\n\r\n\x05\x04\x07\x02\x04\
    \x04\x12\x04C\x08B\x1a\n\x0c\n\x05\x04\x07\x02\x04\x05\x12\x03C\x08\x0e\
    \n\x0c\n\x05\x04\x07\x02\x04\x01\x12\x03C\x0f\x13\n\x0c\n\x05\x04\x07\
    \x02\x04\x03\x12\x03C\x16\x17\n\x0b\n\x04\x04\x07\x02\x05\x12\x03D\x08\
    \x1c\n\r\n\x05\x04\x07\x02\x05\x04\x12\x04D\x08C\x18\n\x0c\n\x05\x04\x07\
    \x02\x05\x05\x12\x03D\x08\x0e\n\x0c\n\x05\x04\x07\x02\x05\x01\x12\x03D\
    \x0f\x17\n\x0c\n\x05\x04\x07\x02\x05\x03\x12\x03D\x1a\x1b\n\x0b\n\x04\
    \x04\x07\x02\x06\x12\x03E\x08\x1c\n\r\n\x05\x04\x07\x02\x06\x04\x12\x04E\
    \x08D\x1c\n\x0c\n\x05\x04\x07\x02\x06\x06\x12\x03E\x08\x0f\n\x0c\n\x05\
    \x04\x07\x02\x06\x01\x12\x03E\x10\x17\n\x0c\n\x05\x04\x07\x02\x06\x03\
    \x12\x03E\x1a\x1b\n\x0b\n\x04\x04\x07\x02\x07\x12\x03F\x08\x18\n\r\n\x05\
    \x04\x07\x02\x07\x04\x12\x04F\x08E\x1c\n\x0c\n\x05\x04\x07\x02\x07\x05\
    \x12\x03F\x08\x0e\n\x0c\n\x05\x04\x07\x02\x07\x01\x12\x03F\x0f\x13\n\x0c\
    \n\x05\x04\x07\x02\x07\x03\x12\x03F\x16\x17\n\n\n\x02\x04\x08\x12\x04I\0\
    K\x01\n\n\n\x03\x04\x08\x01\x12\x03I\x08\x18\n\x0b\n\x04\x04\x08\x02\0\
    \x12\x03J\x08\x1c\n\r\n\x05\x04\x08\x02\0\x04\x12\x04J\x08I\x1a\n\x0c\n\
    \x05\x04\x08\x02\0\x06\x12\x03J\x08\x0f\n\x0c\n\x05\x04\x08\x02\0\x01\
    \x12\x03J\x10\x17\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03J\x1a\x1b\n\n\n\
    \x02\x04\t\x12\x04M\0Q\x01\n\n\n\x03\x04\t\x01\x12\x03M\x08\x14\n\x0b\n\
    \x04\x04\t\x02\0\x12\x03N\x08\x19\n\r\n\x05\x04\t\x02\0\x04\x12\x04N\x08\
    M\x16\n\x0c\n\x05\x04\t\x02\0\x05\x12\x03N\x08\x0e\n\x0c\n\x05\x04\t\x02\
    \0\x01\x12\x03N\x0f\x14\n\x0c\n\x05\x04\t\x02\0\x03\x12\x03N\x17\x18\n\
    \x0b\n\x04\x04\t\x02\x01\x12\x03O\x08\x1e\n\r\n\x05\x04\t\x02\x01\x04\
    \x12\x04O\x08N\x19\n\x0c\n\x05\x04\t\x02\x01\x06\x12\x03O\x08\x10\n\x0c\
    \n\x05\x04\t\x02\x01\x01\x12\x03O\x11\x19\n\x0c\n\x05\x04\t\x02\x01\x03\
    \x12\x03O\x1c\x1d\n\x0b\n\x04\x04\t\x02\x02\x12\x03P\x08\x1c\n\r\n\x05\
    \x04\t\x02\x02\x04\x12\x04P\x08O\x1e\n\x0c\n\x05\x04\t\x02\x02\x06\x12\
    \x03P\x08\x0f\n\x0c\n\x05\x04\t\x02\x02\x01\x12\x03P\x10\x17\n\x0c\n\x05\
    \x04\t\x02\x02\x03\x12\x03P\x1a\x1b\n\t\n\x02\x04\n\x12\x03S\0\x18\n\n\n\
    \x03\x04\n\x01\x12\x03S\x08\x15\n\n\n\x02\x04\x0b\x12\x04U\0Y\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03U\x08\x15\n\x0b\n\x04\x04\x0b\x02\0\x12\x03V\x08\
    \x19\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04V\x08U\x17\n\x0c\n\x05\x04\x0b\
    \x02\0\x05\x12\x03V\x08\x0e\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03V\x0f\
    \x14\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03V\x17\x18\n\x0b\n\x04\x04\x0b\
    \x02\x01\x12\x03W\x08\x1e\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04W\x08V\
    \x19\n\x0c\n\x05\x04\x0b\x02\x01\x06\x12\x03W\x08\x10\n\x0c\n\x05\x04\
    \x0b\x02\x01\x01\x12\x03W\x11\x19\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\
    \x03W\x1c\x1d\n\x0b\n\x04\x04\x0b\x02\x02\x12\x03X\x08\x1c\n\r\n\x05\x04\
    \x0b\x02\x02\x04\x12\x04X\x08W\x1e\n\x0c\n\x05\x04\x0b\x02\x02\x06\x12\
    \x03X\x08\x0f\n\x0c\n\x05\x04\x0b\x02\x02\x01\x12\x03X\x10\x17\n\x0c\n\
    \x05\x04\x0b\x02\x02\x03\x12\x03X\x1a\x1b\n\t\n\x02\x04\x0c\x12\x03[\0\
    \x19\n\n\n\x03\x04\x0c\x01\x12\x03[\x08\x16\n\n\n\x02\x04\r\x12\x04]\0`\
    \x01\n\n\n\x03\x04\r\x01\x12\x03]\x08\x16\n\x0b\n\x04\x04\r\x02\0\x12\
    \x03^\x08\x19\n\r\n\x05\x04\r\x02\0\x04\x12\x04^\x08]\x18\n\x0c\n\x05\
    \x04\r\x02\0\x05\x12\x03^\x08\x0e\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03^\
    \x0f\x14\n\x0c\n\x05\x04\r\x02\0\x03\x12\x03^\x17\x18\n\x0b\n\x04\x04\r\
    \x02\x01\x12\x03_\x08\x1c\n\r\n\x05\x04\r\x02\x01\x04\x12\x04_\x08^\x19\
    \n\x0c\n\x05\x04\r\x02\x01\x06\x12\x03_\x08\x0f\n\x0c\n\x05\x04\r\x02\
    \x01\x01\x12\x03_\x10\x17\n\x0c\n\x05\x04\r\x02\x01\x03\x12\x03_\x1a\x1b\
    \n\n\n\x02\x04\x0e\x12\x04b\0d\x01\n\n\n\x03\x04\x0e\x01\x12\x03b\x08\
    \x17\n\x0b\n\x04\x04\x0e\x02\0\x12\x03c\x08\x1c\n\r\n\x05\x04\x0e\x02\0\
    \x04\x12\x04c\x08b\x19\n\x0c\n\x05\x04\x0e\x02\0\x06\x12\x03c\x08\x0f\n\
    \x0c\n\x05\x04\x0e\x02\0\x01\x12\x03c\x10\x17\n\x0c\n\x05\x04\x0e\x02\0\
    \x03\x12\x03c\x1a\x1b\n\n\n\x02\x04\x0f\x12\x04f\0l\x01\n\n\n\x03\x04\
    \x0f\x01\x12\x03f\x08\x14\n\x0b\n\x04\x04\x0f\x02\0\x12\x03g\x08\x16\n\r\
    \n\x05\x04\x0f\x02\0\x04\x12\x04g\x08f\x16\n\x0c\n\x05\x04\x0f\x02\0\x05\
    \x12\x03g\x08\x0e\n\x0c\n\x05\x04\x0f\x02\0\x01\x12\x03g\x0f\x11\n\x0c\n\
    \x05\x04\x0f\x02\0\x03\x12\x03g\x14\x15\n\x0b\n\x04\x04\x0f\x02\x01\x12\
    \x03h\x08\x1a\n\r\n\x05\x04\x0f\x02\x01\x04\x12\x04h\x08g\x16\n\x0c\n\
    \x05\x04\x0f\x02\x01\x05\x12\x03h\x08\x0e\n\x0c\n\x05\x04\x0f\x02\x01\
    \x01\x12\x03h\x0f\x15\n\x0c\n\x05\x04\x0f\x02\x01\x03\x12\x03h\x18\x19\n\
    \x0b\n\x04\x04\x0f\x02\x02\x12\x03i\x08!\n\r\n\x05\x04\x0f\x02\x02\x04\
    \x12\x04i\x08h\x1a\n\x0c\n\x05\x04\x0f\x02\x02\x05\x12\x03i\x08\x0e\n\
    \x0c\n\x05\x04\x0f\x02\x02\x01\x12\x03i\x0f\x1c\n\x0c\n\x05\x04\x0f\x02\
    \x02\x03\x12\x03i\x1f\x20\n\x0b\n\x04\x04\x0f\x02\x03\x12\x03j\x08\x1f\n\
    \r\n\x05\x04\x0f\x02\x03\x04\x12\x04j\x08i!\n\x0c\n\x05\x04\x0f\x02\x03\
    \x05\x12\x03j\x08\r\n\x0c\n\x05\x04\x0f\x02\x03\x01\x12\x03j\x0e\x1a\n\
    \x0c\n\x05\x04\x0f\x02\x03\x03\x12\x03j\x1d\x1e\n\x0b\n\x04\x04\x0f\x02\
    \x04\x12\x03k\x08\x1c\n\r\n\x05\x04\x0f\x02\x04\x04\x12\x04k\x08j\x1f\n\
    \x0c\n\x05\x04\x0f\x02\x04\x06\x12\x03k\x08\x0f\n\x0c\n\x05\x04\x0f\x02\
    \x04\x01\x12\x03k\x10\x17\n\x0c\n\x05\x04\x0f\x02\x04\x03\x12\x03k\x1a\
    \x1b\n\n\n\x02\x04\x10\x12\x04n\0p\x01\n\n\n\x03\x04\x10\x01\x12\x03n\
    \x08\x15\n\x0b\n\x04\x04\x10\x02\0\x12\x03o\x08\x18\n\r\n\x05\x04\x10\
    \x02\0\x04\x12\x04o\x08n\x17\n\x0c\n\x05\x04\x10\x02\0\x06\x12\x03o\x08\
    \r\n\x0c\n\x05\x04\x10\x02\0\x01\x12\x03o\x0e\x13\n\x0c\n\x05\x04\x10\
    \x02\0\x03\x12\x03o\x16\x17\n\n\n\x02\x05\0\x12\x04r\0v\x01\n\n\n\x03\
    \x05\0\x01\x12\x03r\x05\x0b\n\x0b\n\x04\x05\0\x02\0\x12\x03s\x08\x14\n\
    \x0c\n\x05\x05\0\x02\0\x01\x12\x03s\x08\x0f\n\x0c\n\x05\x05\0\x02\0\x02\
    \x12\x03s\x12\x13\n\x0b\n\x04\x05\0\x02\x01\x12\x03t\x08\x14\n\x0c\n\x05\
    \x05\0\x02\x01\x01\x12\x03t\x08\x0f\n\x0c\n\x05\x05\0\x02\x01\x02\x12\
    \x03t\x12\x13\n\x0b\n\x04\x05\0\x02\x02\x12\x03u\x08\x13\n\x0c\n\x05\x05\
    \0\x02\x02\x01\x12\x03u\x08\x0e\n\x0c\n\x05\x05\0\x02\x02\x02\x12\x03u\
    \x11\x12\n\n\n\x02\x04\x11\x12\x04x\0~\x01\n\n\n\x03\x04\x11\x01\x12\x03\
    x\x08\x0c\n\x0b\n\x04\x04\x11\x02\0\x12\x03y\x08\x16\n\r\n\x05\x04\x11\
    \x02\0\x04\x12\x04y\x08x\x0e\n\x0c\n\x05\x04\x11\x02\0\x05\x12\x03y\x08\
    \x0e\n\x0c\n\x05\x04\x11\x02\0\x01\x12\x03y\x0f\x11\n\x0c\n\x05\x04\x11\
    \x02\0\x03\x12\x03y\x14\x15\n\x0b\n\x04\x04\x11\x02\x01\x12\x03z\x08\x19\
    \n\r\n\x05\x04\x11\x02\x01\x04\x12\x04z\x08y\x16\n\x0c\n\x05\x04\x11\x02\
    \x01\x05\x12\x03z\x08\x0e\n\x0c\n\x05\x04\x11\x02\x01\x01\x12\x03z\x0f\
    \x14\n\x0c\n\x05\x04\x11\x02\x01\x03\x12\x03z\x17\x18\n\x0b\n\x04\x04\
    \x11\x02\x02\x12\x03{\x08\x1e\n\r\n\x05\x04\x11\x02\x02\x04\x12\x04{\x08\
    z\x19\n\x0c\n\x05\x04\x11\x02\x02\x06\x12\x03{\x08\x10\n\x0c\n\x05\x04\
    \x11\x02\x02\x01\x12\x03{\x11\x19\n\x0c\n\x05\x04\x11\x02\x02\x03\x12\
    \x03{\x1c\x1d\n\x0b\n\x04\x04\x11\x02\x03\x12\x03|\x08\x1a\n\r\n\x05\x04\
    \x11\x02\x03\x04\x12\x04|\x08{\x1e\n\x0c\n\x05\x04\x11\x02\x03\x06\x12\
    \x03|\x08\x0e\n\x0c\n\x05\x04\x11\x02\x03\x01\x12\x03|\x0f\x15\n\x0c\n\
    \x05\x04\x11\x02\x03\x03\x12\x03|\x18\x19\n\x0b\n\x04\x04\x11\x02\x04\
    \x12\x03}\x08\x1b\n\r\n\x05\x04\x11\x02\x04\x04\x12\x04}\x08|\x1a\n\x0c\
    \n\x05\x04\x11\x02\x04\x05\x12\x03}\x08\r\n\x0c\n\x05\x04\x11\x02\x04\
    \x01\x12\x03}\x0e\x16\n\x0c\n\x05\x04\x11\x02\x04\x03\x12\x03}\x19\x1a\n\
    \x0c\n\x02\x04\x12\x12\x06\x80\x01\0\x82\x01\x01\n\x0b\n\x03\x04\x12\x01\
    \x12\x04\x80\x01\x08\x0f\n\x0c\n\x04\x04\x12\x02\0\x12\x04\x81\x01\x08\
    \x1d\n\x0f\n\x05\x04\x12\x02\0\x04\x12\x06\x81\x01\x08\x80\x01\x11\n\r\n\
    \x05\x04\x12\x02\0\x05\x12\x04\x81\x01\x08\x0e\n\r\n\x05\x04\x12\x02\0\
    \x01\x12\x04\x81\x01\x0f\x18\n\r\n\x05\x04\x12\x02\0\x03\x12\x04\x81\x01\
    \x1b\x1c\n\x0c\n\x02\x04\x13\x12\x06\x84\x01\0\x87\x01\x01\n\x0b\n\x03\
    \x04\x13\x01\x12\x04\x84\x01\x08\x15\n\x0c\n\x04\x04\x13\x02\0\x12\x04\
    \x85\x01\x08\x16\n\x0f\n\x05\x04\x13\x02\0\x04\x12\x06\x85\x01\x08\x84\
    \x01\x17\n\r\n\x05\x04\x13\x02\0\x06\x12\x04\x85\x01\x08\x0c\n\r\n\x05\
    \x04\x13\x02\0\x01\x12\x04\x85\x01\r\x11\n\r\n\x05\x04\x13\x02\0\x03\x12\
    \x04\x85\x01\x14\x15\n\x0c\n\x04\x04\x13\x02\x01\x12\x04\x86\x01\x08\x1c\
    \n\x0f\n\x05\x04\x13\x02\x01\x04\x12\x06\x86\x01\x08\x85\x01\x16\n\r\n\
    \x05\x04\x13\x02\x01\x06\x12\x04\x86\x01\x08\x0f\n\r\n\x05\x04\x13\x02\
    \x01\x01\x12\x04\x86\x01\x10\x17\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\
    \x86\x01\x1a\x1b\n\n\n\x02\x04\x14\x12\x04\x89\x01\0\x19\n\x0b\n\x03\x04\
    \x14\x01\x12\x04\x89\x01\x08\x16\n\x0c\n\x02\x04\x15\x12\x06\x8b\x01\0\
    \x8e\x01\x01\n\x0b\n\x03\x04\x15\x01\x12\x04\x8b\x01\x08\x15\n\x0c\n\x04\
    \x04\x15\x02\0\x12\x04\x8c\x01\x08\x16\n\x0f\n\x05\x04\x15\x02\0\x04\x12\
    \x06\x8c\x01\x08\x8b\x01\x17\n\r\n\x05\x04\x15\x02\0\x05\x12\x04\x8c\x01\
    \x08\x0e\n\r\n\x05\x04\x15\x02\0\x01\x12\x04\x8c\x01\x0f\x11\n\r\n\x05\
    \x04\x15\x02\0\x03\x12\x04\x8c\x01\x14\x15\n\x0c\n\x04\x04\x15\x02\x01\
    \x12\x04\x8d\x01\x08\x1c\n\x0f\n\x05\x04\x15\x02\x01\x04\x12\x06\x8d\x01\
    \x08\x8c\x01\x16\n\r\n\x05\x04\x15\x02\x01\x06\x12\x04\x8d\x01\x08\x0f\n\
    \r\n\x05\x04\x15\x02\x01\x01\x12\x04\x8d\x01\x10\x17\n\r\n\x05\x04\x15\
    \x02\x01\x03\x12\x04\x8d\x01\x1a\x1b\n\n\n\x02\x04\x16\x12\x04\x90\x01\0\
    \x19\n\x0b\n\x03\x04\x16\x01\x12\x04\x90\x01\x08\x16\n\x0c\n\x02\x04\x17\
    \x12\x06\x92\x01\0\x94\x01\x01\n\x0b\n\x03\x04\x17\x01\x12\x04\x92\x01\
    \x08\x13\n\x0c\n\x04\x04\x17\x02\0\x12\x04\x93\x01\x08\x1c\n\x0f\n\x05\
    \x04\x17\x02\0\x04\x12\x06\x93\x01\x08\x92\x01\x15\n\r\n\x05\x04\x17\x02\
    \0\x06\x12\x04\x93\x01\x08\x0f\n\r\n\x05\x04\x17\x02\0\x01\x12\x04\x93\
    \x01\x10\x17\n\r\n\x05\x04\x17\x02\0\x03\x12\x04\x93\x01\x1a\x1b\n\x0c\n\
    \x02\x04\x18\x12\x06\x96\x01\0\x98\x01\x01\n\x0b\n\x03\x04\x18\x01\x12\
    \x04\x96\x01\x08\x14\n\x0c\n\x04\x04\x18\x02\0\x12\x04\x97\x01\x08\x20\n\
    \r\n\x05\x04\x18\x02\0\x04\x12\x04\x97\x01\x08\x10\n\r\n\x05\x04\x18\x02\
    \0\x06\x12\x04\x97\x01\x11\x15\n\r\n\x05\x04\x18\x02\0\x01\x12\x04\x97\
    \x01\x16\x1b\n\r\n\x05\x04\x18\x02\0\x03\x12\x04\x97\x01\x1e\x1f\n\x0c\n\
    \x02\x04\x19\x12\x06\x9a\x01\0\x9f\x01\x01\n\x0b\n\x03\x04\x19\x01\x12\
    \x04\x9a\x01\x08\x1b\n\x0c\n\x04\x04\x19\x02\0\x12\x04\x9b\x01\x08\x16\n\
    \x0f\n\x05\x04\x19\x02\0\x04\x12\x06\x9b\x01\x08\x9a\x01\x1c\n\r\n\x05\
    \x04\x19\x02\0\x05\x12\x04\x9b\x01\x08\x0e\n\r\n\x05\x04\x19\x02\0\x01\
    \x12\x04\x9b\x01\x0f\x11\n\r\n\x05\x04\x19\x02\0\x03\x12\x04\x9b\x01\x14\
    \x15\n\x0c\n\x04\x04\x19\x02\x01\x12\x04\x9c\x01\x08\x1e\n\x0f\n\x05\x04\
    \x19\x02\x01\x04\x12\x06\x9c\x01\x08\x9b\x01\x16\n\r\n\x05\x04\x19\x02\
    \x01\x05\x12\x04\x9c\x01\x08\x0e\n\r\n\x05\x04\x19\x02\x01\x01\x12\x04\
    \x9c\x01\x0f\x19\n\r\n\x05\x04\x19\x02\x01\x03\x12\x04\x9c\x01\x1c\x1d\n\
    \x0c\n\x04\x04\x19\x02\x02\x12\x04\x9d\x01\x08\x1e\n\x0f\n\x05\x04\x19\
    \x02\x02\x04\x12\x06\x9d\x01\x08\x9c\x01\x1e\n\r\n\x05\x04\x19\x02\x02\
    \x05\x12\x04\x9d\x01\x08\x0e\n\r\n\x05\x04\x19\x02\x02\x01\x12\x04\x9d\
    \x01\x0f\x19\n\r\n\x05\x04\x19\x02\x02\x03\x12\x04\x9d\x01\x1c\x1d\n\x0c\
    \n\x04\x04\x19\x02\x03\x12\x04\x9e\x01\x08\x1c\n\x0f\n\x05\x04\x19\x02\
    \x03\x04\x12\x06\x9e\x01\x08\x9d\x01\x1e\n\r\n\x05\x04\x19\x02\x03\x06\
    \x12\x04\x9e\x01\x08\x0f\n\r\n\x05\x04\x19\x02\x03\x01\x12\x04\x9e\x01\
    \x10\x17\n\r\n\x05\x04\x19\x02\x03\x03\x12\x04\x9e\x01\x1a\x1b\n\n\n\x02\
    \x04\x1a\x12\x04\xa1\x01\0\x1e\n\x0b\n\x03\x04\x1a\x01\x12\x04\xa1\x01\
    \x08\x1cb\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
