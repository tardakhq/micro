// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `debug/debug.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct HealthRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthRequest {
    fn default() -> &'a HealthRequest {
        <HealthRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthRequest {
    pub fn new() -> HealthRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HealthRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthRequest {
        HealthRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthRequest>(
                "HealthRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthRequest {
        static instance: ::protobuf::rt::LazyV2<HealthRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthRequest::new)
    }
}

impl ::protobuf::Clear for HealthRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthResponse {
    // message fields
    pub status: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthResponse {
    fn default() -> &'a HealthResponse {
        <HealthResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthResponse {
    pub fn new() -> HealthResponse {
        ::std::default::Default::default()
    }

    // string status = 1;


    pub fn get_status(&self) -> &str {
        &self.status
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ::std::string::String) {
        self.status = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut ::std::string::String {
        &mut self.status
    }

    // Take field
    pub fn take_status(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HealthResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.status.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.status.is_empty() {
            os.write_string(1, &self.status)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthResponse {
        HealthResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "status",
                |m: &HealthResponse| { &m.status },
                |m: &mut HealthResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthResponse>(
                "HealthResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthResponse {
        static instance: ::protobuf::rt::LazyV2<HealthResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthResponse::new)
    }
}

impl ::protobuf::Clear for HealthResponse {
    fn clear(&mut self) {
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsRequest {
    fn default() -> &'a StatsRequest {
        <StatsRequest as ::protobuf::Message>::default_instance()
    }
}

impl StatsRequest {
    pub fn new() -> StatsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StatsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsRequest {
        StatsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsRequest>(
                "StatsRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsRequest {
        static instance: ::protobuf::rt::LazyV2<StatsRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsRequest::new)
    }
}

impl ::protobuf::Clear for StatsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StatsResponse {
    // message fields
    pub timestamp: u64,
    pub started: u64,
    pub uptime: u64,
    pub memory: u64,
    pub threads: u64,
    pub gc: u64,
    pub requests: u64,
    pub errors: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StatsResponse {
    fn default() -> &'a StatsResponse {
        <StatsResponse as ::protobuf::Message>::default_instance()
    }
}

impl StatsResponse {
    pub fn new() -> StatsResponse {
        ::std::default::Default::default()
    }

    // uint64 timestamp = 1;


    pub fn get_timestamp(&self) -> u64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: u64) {
        self.timestamp = v;
    }

    // uint64 started = 2;


    pub fn get_started(&self) -> u64 {
        self.started
    }
    pub fn clear_started(&mut self) {
        self.started = 0;
    }

    // Param is passed by value, moved
    pub fn set_started(&mut self, v: u64) {
        self.started = v;
    }

    // uint64 uptime = 3;


    pub fn get_uptime(&self) -> u64 {
        self.uptime
    }
    pub fn clear_uptime(&mut self) {
        self.uptime = 0;
    }

    // Param is passed by value, moved
    pub fn set_uptime(&mut self, v: u64) {
        self.uptime = v;
    }

    // uint64 memory = 4;


    pub fn get_memory(&self) -> u64 {
        self.memory
    }
    pub fn clear_memory(&mut self) {
        self.memory = 0;
    }

    // Param is passed by value, moved
    pub fn set_memory(&mut self, v: u64) {
        self.memory = v;
    }

    // uint64 threads = 5;


    pub fn get_threads(&self) -> u64 {
        self.threads
    }
    pub fn clear_threads(&mut self) {
        self.threads = 0;
    }

    // Param is passed by value, moved
    pub fn set_threads(&mut self, v: u64) {
        self.threads = v;
    }

    // uint64 gc = 6;


    pub fn get_gc(&self) -> u64 {
        self.gc
    }
    pub fn clear_gc(&mut self) {
        self.gc = 0;
    }

    // Param is passed by value, moved
    pub fn set_gc(&mut self, v: u64) {
        self.gc = v;
    }

    // uint64 requests = 7;


    pub fn get_requests(&self) -> u64 {
        self.requests
    }
    pub fn clear_requests(&mut self) {
        self.requests = 0;
    }

    // Param is passed by value, moved
    pub fn set_requests(&mut self, v: u64) {
        self.requests = v;
    }

    // uint64 errors = 8;


    pub fn get_errors(&self) -> u64 {
        self.errors
    }
    pub fn clear_errors(&mut self) {
        self.errors = 0;
    }

    // Param is passed by value, moved
    pub fn set_errors(&mut self, v: u64) {
        self.errors = v;
    }
}

impl ::protobuf::Message for StatsResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.started = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uptime = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.memory = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.threads = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.gc = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.requests = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.errors = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.started != 0 {
            my_size += ::protobuf::rt::value_size(2, self.started, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.uptime != 0 {
            my_size += ::protobuf::rt::value_size(3, self.uptime, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.memory != 0 {
            my_size += ::protobuf::rt::value_size(4, self.memory, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.threads != 0 {
            my_size += ::protobuf::rt::value_size(5, self.threads, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.gc != 0 {
            my_size += ::protobuf::rt::value_size(6, self.gc, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.requests != 0 {
            my_size += ::protobuf::rt::value_size(7, self.requests, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.errors != 0 {
            my_size += ::protobuf::rt::value_size(8, self.errors, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_uint64(1, self.timestamp)?;
        }
        if self.started != 0 {
            os.write_uint64(2, self.started)?;
        }
        if self.uptime != 0 {
            os.write_uint64(3, self.uptime)?;
        }
        if self.memory != 0 {
            os.write_uint64(4, self.memory)?;
        }
        if self.threads != 0 {
            os.write_uint64(5, self.threads)?;
        }
        if self.gc != 0 {
            os.write_uint64(6, self.gc)?;
        }
        if self.requests != 0 {
            os.write_uint64(7, self.requests)?;
        }
        if self.errors != 0 {
            os.write_uint64(8, self.errors)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StatsResponse {
        StatsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "timestamp",
                |m: &StatsResponse| { &m.timestamp },
                |m: &mut StatsResponse| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "started",
                |m: &StatsResponse| { &m.started },
                |m: &mut StatsResponse| { &mut m.started },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "uptime",
                |m: &StatsResponse| { &m.uptime },
                |m: &mut StatsResponse| { &mut m.uptime },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "memory",
                |m: &StatsResponse| { &m.memory },
                |m: &mut StatsResponse| { &mut m.memory },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "threads",
                |m: &StatsResponse| { &m.threads },
                |m: &mut StatsResponse| { &mut m.threads },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "gc",
                |m: &StatsResponse| { &m.gc },
                |m: &mut StatsResponse| { &mut m.gc },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "requests",
                |m: &StatsResponse| { &m.requests },
                |m: &mut StatsResponse| { &mut m.requests },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "errors",
                |m: &StatsResponse| { &m.errors },
                |m: &mut StatsResponse| { &mut m.errors },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StatsResponse>(
                "StatsResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StatsResponse {
        static instance: ::protobuf::rt::LazyV2<StatsResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StatsResponse::new)
    }
}

impl ::protobuf::Clear for StatsResponse {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.started = 0;
        self.uptime = 0;
        self.memory = 0;
        self.threads = 0;
        self.gc = 0;
        self.requests = 0;
        self.errors = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StatsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StatsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogRequest {
    // message fields
    pub count: i64,
    pub since: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogRequest {
    fn default() -> &'a LogRequest {
        <LogRequest as ::protobuf::Message>::default_instance()
    }
}

impl LogRequest {
    pub fn new() -> LogRequest {
        ::std::default::Default::default()
    }

    // int64 count = 1;


    pub fn get_count(&self) -> i64 {
        self.count
    }
    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: i64) {
        self.count = v;
    }

    // int64 since = 2;


    pub fn get_since(&self) -> i64 {
        self.since
    }
    pub fn clear_since(&mut self) {
        self.since = 0;
    }

    // Param is passed by value, moved
    pub fn set_since(&mut self, v: i64) {
        self.since = v;
    }
}

impl ::protobuf::Message for LogRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.count = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.since = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(1, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.since != 0 {
            my_size += ::protobuf::rt::value_size(2, self.since, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        if self.since != 0 {
            os.write_int64(2, self.since)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogRequest {
        LogRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "count",
                |m: &LogRequest| { &m.count },
                |m: &mut LogRequest| { &mut m.count },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "since",
                |m: &LogRequest| { &m.since },
                |m: &mut LogRequest| { &mut m.since },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogRequest>(
                "LogRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogRequest {
        static instance: ::protobuf::rt::LazyV2<LogRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogRequest::new)
    }
}

impl ::protobuf::Clear for LogRequest {
    fn clear(&mut self) {
        self.count = 0;
        self.since = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LogResponse {
    // message fields
    pub records: ::protobuf::RepeatedField<Record>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LogResponse {
    fn default() -> &'a LogResponse {
        <LogResponse as ::protobuf::Message>::default_instance()
    }
}

impl LogResponse {
    pub fn new() -> LogResponse {
        ::std::default::Default::default()
    }

    // repeated .debug.Record records = 1;


    pub fn get_records(&self) -> &[Record] {
        &self.records
    }
    pub fn clear_records(&mut self) {
        self.records.clear();
    }

    // Param is passed by value, moved
    pub fn set_records(&mut self, v: ::protobuf::RepeatedField<Record>) {
        self.records = v;
    }

    // Mutable pointer to the field.
    pub fn mut_records(&mut self) -> &mut ::protobuf::RepeatedField<Record> {
        &mut self.records
    }

    // Take field
    pub fn take_records(&mut self) -> ::protobuf::RepeatedField<Record> {
        ::std::mem::replace(&mut self.records, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for LogResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.records {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.records)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.records {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.records {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LogResponse {
        LogResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Record>>(
                "records",
                |m: &LogResponse| { &m.records },
                |m: &mut LogResponse| { &mut m.records },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<LogResponse>(
                "LogResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static LogResponse {
        static instance: ::protobuf::rt::LazyV2<LogResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(LogResponse::new)
    }
}

impl ::protobuf::Clear for LogResponse {
    fn clear(&mut self) {
        self.records.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LogResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LogResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Record {
    // message fields
    pub timestamp: i64,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub message: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Record {
    fn default() -> &'a Record {
        <Record as ::protobuf::Message>::default_instance()
    }
}

impl Record {
    pub fn new() -> Record {
        ::std::default::Default::default()
    }

    // int64 timestamp = 1;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }

    // repeated .debug.Record.MetadataEntry metadata = 2;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // string message = 3;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Record {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(1, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.metadata);
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.timestamp != 0 {
            os.write_int64(1, self.timestamp)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.metadata, os)?;
        if !self.message.is_empty() {
            os.write_string(3, &self.message)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Record {
        Record::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Record| { &m.timestamp },
                |m: &mut Record| { &mut m.timestamp },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Record| { &m.metadata },
                |m: &mut Record| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &Record| { &m.message },
                |m: &mut Record| { &mut m.message },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Record>(
                "Record",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Record {
        static instance: ::protobuf::rt::LazyV2<Record> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Record::new)
    }
}

impl ::protobuf::Clear for Record {
    fn clear(&mut self) {
        self.timestamp = 0;
        self.metadata.clear();
        self.message.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Record {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Record {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraceRequest {
    // message fields
    pub id: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceRequest {
    fn default() -> &'a TraceRequest {
        <TraceRequest as ::protobuf::Message>::default_instance()
    }
}

impl TraceRequest {
    pub fn new() -> TraceRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }
}

impl ::protobuf::Message for TraceRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceRequest {
        TraceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &TraceRequest| { &m.id },
                |m: &mut TraceRequest| { &mut m.id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceRequest>(
                "TraceRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceRequest {
        static instance: ::protobuf::rt::LazyV2<TraceRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceRequest::new)
    }
}

impl ::protobuf::Clear for TraceRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TraceResponse {
    // message fields
    pub spans: ::protobuf::RepeatedField<Span>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TraceResponse {
    fn default() -> &'a TraceResponse {
        <TraceResponse as ::protobuf::Message>::default_instance()
    }
}

impl TraceResponse {
    pub fn new() -> TraceResponse {
        ::std::default::Default::default()
    }

    // repeated .debug.Span spans = 1;


    pub fn get_spans(&self) -> &[Span] {
        &self.spans
    }
    pub fn clear_spans(&mut self) {
        self.spans.clear();
    }

    // Param is passed by value, moved
    pub fn set_spans(&mut self, v: ::protobuf::RepeatedField<Span>) {
        self.spans = v;
    }

    // Mutable pointer to the field.
    pub fn mut_spans(&mut self) -> &mut ::protobuf::RepeatedField<Span> {
        &mut self.spans
    }

    // Take field
    pub fn take_spans(&mut self) -> ::protobuf::RepeatedField<Span> {
        ::std::mem::replace(&mut self.spans, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for TraceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.spans {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.spans)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.spans {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.spans {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TraceResponse {
        TraceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Span>>(
                "spans",
                |m: &TraceResponse| { &m.spans },
                |m: &mut TraceResponse| { &mut m.spans },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<TraceResponse>(
                "TraceResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static TraceResponse {
        static instance: ::protobuf::rt::LazyV2<TraceResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(TraceResponse::new)
    }
}

impl ::protobuf::Clear for TraceResponse {
    fn clear(&mut self) {
        self.spans.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TraceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TraceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Span {
    // message fields
    pub trace: ::std::string::String,
    pub id: ::std::string::String,
    pub parent: ::std::string::String,
    pub name: ::std::string::String,
    pub started: u64,
    pub duration: u64,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub field_type: SpanType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Span {
    fn default() -> &'a Span {
        <Span as ::protobuf::Message>::default_instance()
    }
}

impl Span {
    pub fn new() -> Span {
        ::std::default::Default::default()
    }

    // string trace = 1;


    pub fn get_trace(&self) -> &str {
        &self.trace
    }
    pub fn clear_trace(&mut self) {
        self.trace.clear();
    }

    // Param is passed by value, moved
    pub fn set_trace(&mut self, v: ::std::string::String) {
        self.trace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_trace(&mut self) -> &mut ::std::string::String {
        &mut self.trace
    }

    // Take field
    pub fn take_trace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.trace, ::std::string::String::new())
    }

    // string id = 2;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string parent = 3;


    pub fn get_parent(&self) -> &str {
        &self.parent
    }
    pub fn clear_parent(&mut self) {
        self.parent.clear();
    }

    // Param is passed by value, moved
    pub fn set_parent(&mut self, v: ::std::string::String) {
        self.parent = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_parent(&mut self) -> &mut ::std::string::String {
        &mut self.parent
    }

    // Take field
    pub fn take_parent(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.parent, ::std::string::String::new())
    }

    // string name = 4;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // uint64 started = 5;


    pub fn get_started(&self) -> u64 {
        self.started
    }
    pub fn clear_started(&mut self) {
        self.started = 0;
    }

    // Param is passed by value, moved
    pub fn set_started(&mut self, v: u64) {
        self.started = v;
    }

    // uint64 duration = 6;


    pub fn get_duration(&self) -> u64 {
        self.duration
    }
    pub fn clear_duration(&mut self) {
        self.duration = 0;
    }

    // Param is passed by value, moved
    pub fn set_duration(&mut self, v: u64) {
        self.duration = v;
    }

    // repeated .debug.Span.MetadataEntry metadata = 7;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // .debug.SpanType type = 8;


    pub fn get_field_type(&self) -> SpanType {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = SpanType::INBOUND;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: SpanType) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Span {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.trace)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.parent)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.started = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.duration = tmp;
                },
                7 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                8 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 8, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.trace.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.trace);
        }
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.id);
        }
        if !self.parent.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.parent);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.name);
        }
        if self.started != 0 {
            my_size += ::protobuf::rt::value_size(5, self.started, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.duration != 0 {
            my_size += ::protobuf::rt::value_size(6, self.duration, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.metadata);
        if self.field_type != SpanType::INBOUND {
            my_size += ::protobuf::rt::enum_size(8, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.trace.is_empty() {
            os.write_string(1, &self.trace)?;
        }
        if !self.id.is_empty() {
            os.write_string(2, &self.id)?;
        }
        if !self.parent.is_empty() {
            os.write_string(3, &self.parent)?;
        }
        if !self.name.is_empty() {
            os.write_string(4, &self.name)?;
        }
        if self.started != 0 {
            os.write_uint64(5, self.started)?;
        }
        if self.duration != 0 {
            os.write_uint64(6, self.duration)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(7, &self.metadata, os)?;
        if self.field_type != SpanType::INBOUND {
            os.write_enum(8, ::protobuf::ProtobufEnum::value(&self.field_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Span {
        Span::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "trace",
                |m: &Span| { &m.trace },
                |m: &mut Span| { &mut m.trace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Span| { &m.id },
                |m: &mut Span| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parent",
                |m: &Span| { &m.parent },
                |m: &mut Span| { &mut m.parent },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "name",
                |m: &Span| { &m.name },
                |m: &mut Span| { &mut m.name },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "started",
                |m: &Span| { &m.started },
                |m: &mut Span| { &mut m.started },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "duration",
                |m: &Span| { &m.duration },
                |m: &mut Span| { &mut m.duration },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Span| { &m.metadata },
                |m: &mut Span| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<SpanType>>(
                "type",
                |m: &Span| { &m.field_type },
                |m: &mut Span| { &mut m.field_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Span>(
                "Span",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Span {
        static instance: ::protobuf::rt::LazyV2<Span> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Span::new)
    }
}

impl ::protobuf::Clear for Span {
    fn clear(&mut self) {
        self.trace.clear();
        self.id.clear();
        self.parent.clear();
        self.name.clear();
        self.started = 0;
        self.duration = 0;
        self.metadata.clear();
        self.field_type = SpanType::INBOUND;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Span {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Span {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum SpanType {
    INBOUND = 0,
    OUTBOUND = 1,
}

impl ::protobuf::ProtobufEnum for SpanType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<SpanType> {
        match value {
            0 => ::std::option::Option::Some(SpanType::INBOUND),
            1 => ::std::option::Option::Some(SpanType::OUTBOUND),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [SpanType] = &[
            SpanType::INBOUND,
            SpanType::OUTBOUND,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<SpanType>("SpanType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for SpanType {
}

impl ::std::default::Default for SpanType {
    fn default() -> Self {
        SpanType::INBOUND
    }
}

impl ::protobuf::reflect::ProtobufValue for SpanType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11debug/debug.proto\x12\x05debug\"\x0f\n\rHealthRequest\"(\n\x0eHeal\
    thResponse\x12\x16\n\x06status\x18\x01\x20\x01(\tR\x06status\"\x0e\n\x0c\
    StatsRequest\"\xd5\x01\n\rStatsResponse\x12\x1c\n\ttimestamp\x18\x01\x20\
    \x01(\x04R\ttimestamp\x12\x18\n\x07started\x18\x02\x20\x01(\x04R\x07star\
    ted\x12\x16\n\x06uptime\x18\x03\x20\x01(\x04R\x06uptime\x12\x16\n\x06mem\
    ory\x18\x04\x20\x01(\x04R\x06memory\x12\x18\n\x07threads\x18\x05\x20\x01\
    (\x04R\x07threads\x12\x0e\n\x02gc\x18\x06\x20\x01(\x04R\x02gc\x12\x1a\n\
    \x08requests\x18\x07\x20\x01(\x04R\x08requests\x12\x16\n\x06errors\x18\
    \x08\x20\x01(\x04R\x06errors\"8\n\nLogRequest\x12\x14\n\x05count\x18\x01\
    \x20\x01(\x03R\x05count\x12\x14\n\x05since\x18\x02\x20\x01(\x03R\x05sinc\
    e\"6\n\x0bLogResponse\x12'\n\x07records\x18\x01\x20\x03(\x0b2\r.debug.Re\
    cordR\x07records\"\xb6\x01\n\x06Record\x12\x1c\n\ttimestamp\x18\x01\x20\
    \x01(\x03R\ttimestamp\x127\n\x08metadata\x18\x02\x20\x03(\x0b2\x1b.debug\
    .Record.MetadataEntryR\x08metadata\x12\x18\n\x07message\x18\x03\x20\x01(\
    \tR\x07message\x1a;\n\rMetadataEntry\x12\x10\n\x03key\x18\x01\x20\x01(\t\
    R\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05value:\x028\x01\"\x1e\
    \n\x0cTraceRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\"2\n\rTrace\
    Response\x12!\n\x05spans\x18\x01\x20\x03(\x0b2\x0b.debug.SpanR\x05spans\
    \"\xa7\x02\n\x04Span\x12\x14\n\x05trace\x18\x01\x20\x01(\tR\x05trace\x12\
    \x0e\n\x02id\x18\x02\x20\x01(\tR\x02id\x12\x16\n\x06parent\x18\x03\x20\
    \x01(\tR\x06parent\x12\x12\n\x04name\x18\x04\x20\x01(\tR\x04name\x12\x18\
    \n\x07started\x18\x05\x20\x01(\x04R\x07started\x12\x1a\n\x08duration\x18\
    \x06\x20\x01(\x04R\x08duration\x125\n\x08metadata\x18\x07\x20\x03(\x0b2\
    \x19.debug.Span.MetadataEntryR\x08metadata\x12#\n\x04type\x18\x08\x20\
    \x01(\x0e2\x0f.debug.SpanTypeR\x04type\x1a;\n\rMetadataEntry\x12\x10\n\
    \x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\t\
    R\x05value:\x028\x01*%\n\x08SpanType\x12\x0b\n\x07INBOUND\x10\0\x12\x0c\
    \n\x08OUTBOUND\x10\x012\xdc\x01\n\x05Debug\x12.\n\x03Log\x12\x11.debug.L\
    ogRequest\x1a\x12.debug.LogResponse\"\0\x127\n\x06Health\x12\x14.debug.H\
    ealthRequest\x1a\x15.debug.HealthResponse\"\0\x124\n\x05Stats\x12\x13.de\
    bug.StatsRequest\x1a\x14.debug.StatsResponse\"\0\x124\n\x05Trace\x12\x13\
    .debug.TraceRequest\x1a\x14.debug.TraceResponse\"\0B-Z+github.com/micro/\
    micro/v3/debug/proto;debugJ\xda\x17\n\x06\x12\x04\0\0a\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\r\n\x08\n\x01\x08\
    \x12\x03\x04\0B\n\t\n\x02\x08\x0b\x12\x03\x04\0B\n\n\n\x02\x06\0\x12\x04\
    \x06\0\x0b\x01\n\n\n\x03\x06\0\x01\x12\x03\x06\x08\r\n\x0b\n\x04\x06\0\
    \x02\0\x12\x03\x07\x084\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x07\x0c\x0f\
    \n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x07\x10\x1a\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03\x07%0\n\x0b\n\x04\x06\0\x02\x01\x12\x03\x08\x08=\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x08\x0c\x12\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x08\x13\x20\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x08+9\n\x0b\n\
    \x04\x06\0\x02\x02\x12\x03\t\x08:\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\
    \t\x0c\x11\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\t\x12\x1e\n\x0c\n\x05\
    \x06\0\x02\x02\x03\x12\x03\t)6\n\x0b\n\x04\x06\0\x02\x03\x12\x03\n\x08:\
    \n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\n\x0c\x11\n\x0c\n\x05\x06\0\x02\
    \x03\x02\x12\x03\n\x12\x1e\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\n)6\n\t\
    \n\x02\x04\0\x12\x03\r\0\x18\n\n\n\x03\x04\0\x01\x12\x03\r\x08\x15\n\n\n\
    \x02\x04\x01\x12\x04\x0f\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x0f\x08\
    \x16\n\x1a\n\x04\x04\x01\x02\0\x12\x03\x11\x08\x1a\x1a\r\x20default:\x20\
    ok\n\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x11\x08\x0f\x18\n\x0c\n\x05\x04\
    \x01\x02\0\x05\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\
    \x11\x0f\x15\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11\x18\x19\n\t\n\x02\
    \x04\x02\x12\x03\x14\0\x17\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08\x14\n\n\
    \n\x02\x04\x03\x12\x04\x16\0'\x01\n\n\n\x03\x04\x03\x01\x12\x03\x16\x08\
    \x15\n%\n\x04\x04\x03\x02\0\x12\x03\x18\x08\x1d\x1a\x18\x20timestamp\x20\
    of\x20recording\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x18\x08\x16\x17\n\
    \x0c\n\x05\x04\x03\x02\0\x05\x12\x03\x18\x08\x0e\n\x0c\n\x05\x04\x03\x02\
    \0\x01\x12\x03\x18\x0f\x18\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x18\x1b\
    \x1c\n\x1d\n\x04\x04\x03\x02\x01\x12\x03\x1a\x08\x1b\x1a\x10\x20unix\x20\
    timestamp\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x1a\x08\x18\x1d\n\x0c\
    \n\x05\x04\x03\x02\x01\x05\x12\x03\x1a\x08\x0e\n\x0c\n\x05\x04\x03\x02\
    \x01\x01\x12\x03\x1a\x0f\x16\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03\x1a\
    \x19\x1a\n\x19\n\x04\x04\x03\x02\x02\x12\x03\x1c\x08\x1a\x1a\x0c\x20in\
    \x20seconds\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04\x1c\x08\x1a\x1b\n\
    \x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x1c\x08\x0e\n\x0c\n\x05\x04\x03\
    \x02\x02\x01\x12\x03\x1c\x0f\x15\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03\
    \x1c\x18\x19\n\x17\n\x04\x04\x03\x02\x03\x12\x03\x1e\x08\x1a\x1a\n\x20in\
    \x20bytes\n\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04\x1e\x08\x1c\x1a\n\x0c\
    \n\x05\x04\x03\x02\x03\x05\x12\x03\x1e\x08\x0e\n\x0c\n\x05\x04\x03\x02\
    \x03\x01\x12\x03\x1e\x0f\x15\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\x1e\
    \x18\x19\n\x1a\n\x04\x04\x03\x02\x04\x12\x03\x20\x08\x1b\x1a\r\x20num\
    \x20threads\n\n\r\n\x05\x04\x03\x02\x04\x04\x12\x04\x20\x08\x1e\x1a\n\
    \x0c\n\x05\x04\x03\x02\x04\x05\x12\x03\x20\x08\x0e\n\x0c\n\x05\x04\x03\
    \x02\x04\x01\x12\x03\x20\x0f\x16\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\
    \x20\x19\x1a\n&\n\x04\x04\x03\x02\x05\x12\x03\"\x08\x16\x1a\x19\x20total\
    \x20gc\x20in\x20nanoseconds\n\n\r\n\x05\x04\x03\x02\x05\x04\x12\x04\"\
    \x08\x20\x1b\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x03\"\x08\x0e\n\x0c\n\
    \x05\x04\x03\x02\x05\x01\x12\x03\"\x0f\x11\n\x0c\n\x05\x04\x03\x02\x05\
    \x03\x12\x03\"\x14\x15\n'\n\x04\x04\x03\x02\x06\x12\x03$\x08\x1c\x1a\x1a\
    \x20total\x20number\x20of\x20requests\n\n\r\n\x05\x04\x03\x02\x06\x04\
    \x12\x04$\x08\"\x16\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\x03$\x08\x0e\n\
    \x0c\n\x05\x04\x03\x02\x06\x01\x12\x03$\x0f\x17\n\x0c\n\x05\x04\x03\x02\
    \x06\x03\x12\x03$\x1a\x1b\n%\n\x04\x04\x03\x02\x07\x12\x03&\x08\x1a\x1a\
    \x18\x20total\x20number\x20of\x20errors\n\n\r\n\x05\x04\x03\x02\x07\x04\
    \x12\x04&\x08$\x1c\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03&\x08\x0e\n\
    \x0c\n\x05\x04\x03\x02\x07\x01\x12\x03&\x0f\x15\n\x0c\n\x05\x04\x03\x02\
    \x07\x03\x12\x03&\x18\x19\n.\n\x02\x04\x04\x12\x04*\01\x01\x1a\"\x20LogR\
    equest\x20requests\x20service\x20logs\n\n\n\n\x03\x04\x04\x01\x12\x03*\
    \x08\x12\n*\n\x04\x04\x04\x02\0\x12\x03,\x08\x18\x1a\x1d\x20count\x20of\
    \x20records\x20to\x20request\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04,\x08*\
    \x14\n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03,\x08\r\n\x0c\n\x05\x04\x04\
    \x02\0\x01\x12\x03,\x0e\x13\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03,\x16\
    \x17\nY\n\x04\x04\x04\x02\x01\x12\x030\x08\x18\x1aL\x20relative\x20time\
    \x20in\x20seconds\n\x20before\x20the\x20current\x20time\n\x20from\x20whi\
    ch\x20to\x20show\x20logs\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x040\x08,\
    \x18\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x030\x08\r\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x030\x0e\x13\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x030\
    \x16\x17\n0\n\x02\x04\x05\x12\x044\06\x01\x1a$\x20LogResponse\x20returns\
    \x20a\x20list\x20of\x20logs\n\n\n\n\x03\x04\x05\x01\x12\x034\x08\x13\n\
    \x0b\n\x04\x04\x05\x02\0\x12\x035\x08$\n\x0c\n\x05\x04\x05\x02\0\x04\x12\
    \x035\x08\x10\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x035\x11\x17\n\x0c\n\x05\
    \x04\x05\x02\0\x01\x12\x035\x18\x1f\n\x0c\n\x05\x04\x05\x02\0\x03\x12\
    \x035\"#\n*\n\x02\x04\x06\x12\x049\0@\x01\x1a\x1e\x20Record\x20is\x20ser\
    vice\x20log\x20record\n\n\n\n\x03\x04\x06\x01\x12\x039\x08\x0e\n&\n\x04\
    \x04\x06\x02\0\x12\x03;\x04\x18\x1a\x19\x20timestamp\x20of\x20log\x20rec\
    ord\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04;\x049\x10\n\x0c\n\x05\x04\x06\
    \x02\0\x05\x12\x03;\x04\t\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03;\n\x13\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03;\x16\x17\n\x1e\n\x04\x04\x06\x02\
    \x01\x12\x03=\x04$\x1a\x11\x20record\x20metadata\n\n\r\n\x05\x04\x06\x02\
    \x01\x04\x12\x04=\x04;\x18\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03=\x04\
    \x16\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03=\x17\x1f\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03=\"#\n\x16\n\x04\x04\x06\x02\x02\x12\x03?\x04\
    \x17\x1a\t\x20message\n\n\r\n\x05\x04\x06\x02\x02\x04\x12\x04?\x04=$\n\
    \x0c\n\x05\x04\x06\x02\x02\x05\x12\x03?\x04\n\n\x0c\n\x05\x04\x06\x02\
    \x02\x01\x12\x03?\x0b\x12\n\x0c\n\x05\x04\x06\x02\x02\x03\x12\x03?\x15\
    \x16\n\n\n\x02\x04\x07\x12\x04B\0E\x01\n\n\n\x03\x04\x07\x01\x12\x03B\
    \x08\x14\n#\n\x04\x04\x07\x02\0\x12\x03D\x08\x16\x1a\x16\x20trace\x20id\
    \x20to\x20retrieve\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x04D\x08B\x16\n\x0c\
    \n\x05\x04\x07\x02\0\x05\x12\x03D\x08\x0e\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03D\x0f\x11\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03D\x14\x15\n\n\n\
    \x02\x04\x08\x12\x04G\0I\x01\n\n\n\x03\x04\x08\x01\x12\x03G\x08\x15\n\
    \x0b\n\x04\x04\x08\x02\0\x12\x03H\x08\x20\n\x0c\n\x05\x04\x08\x02\0\x04\
    \x12\x03H\x08\x10\n\x0c\n\x05\x04\x08\x02\0\x06\x12\x03H\x11\x15\n\x0c\n\
    \x05\x04\x08\x02\0\x01\x12\x03H\x16\x1b\n\x0c\n\x05\x04\x08\x02\0\x03\
    \x12\x03H\x1e\x1f\n\n\n\x02\x05\0\x12\x04L\0O\x01\n\n\n\x03\x05\0\x01\
    \x12\x03L\x05\r\n\x0b\n\x04\x05\0\x02\0\x12\x03M\x04\x10\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03M\x04\x0b\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03M\x0e\
    \x0f\n\x0b\n\x04\x05\0\x02\x01\x12\x03N\x04\x11\n\x0c\n\x05\x05\0\x02\
    \x01\x01\x12\x03N\x04\x0c\n\x0c\n\x05\x05\0\x02\x01\x02\x12\x03N\x0f\x10\
    \n\n\n\x02\x04\t\x12\x04Q\0a\x01\n\n\n\x03\x04\t\x01\x12\x03Q\x08\x0c\n\
    \x1b\n\x04\x04\t\x02\0\x12\x03S\x08\x19\x1a\x0e\x20the\x20trace\x20id\n\
    \n\r\n\x05\x04\t\x02\0\x04\x12\x04S\x08Q\x0e\n\x0c\n\x05\x04\t\x02\0\x05\
    \x12\x03S\x08\x0e\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03S\x0f\x14\n\x0c\n\
    \x05\x04\t\x02\0\x03\x12\x03S\x17\x18\n\x1d\n\x04\x04\t\x02\x01\x12\x03U\
    \x08\x16\x1a\x10\x20id\x20of\x20the\x20span\n\n\r\n\x05\x04\t\x02\x01\
    \x04\x12\x04U\x08S\x19\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03U\x08\x0e\n\
    \x0c\n\x05\x04\t\x02\x01\x01\x12\x03U\x0f\x11\n\x0c\n\x05\x04\t\x02\x01\
    \x03\x12\x03U\x14\x15\n\x1a\n\x04\x04\t\x02\x02\x12\x03W\x08\x1a\x1a\r\
    \x20parent\x20span\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04W\x08U\x16\n\x0c\
    \n\x05\x04\t\x02\x02\x05\x12\x03W\x08\x0e\n\x0c\n\x05\x04\t\x02\x02\x01\
    \x12\x03W\x0f\x15\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03W\x18\x19\n#\n\
    \x04\x04\t\x02\x03\x12\x03Y\x08\x18\x1a\x16\x20name\x20of\x20the\x20reso\
    urce\n\n\r\n\x05\x04\t\x02\x03\x04\x12\x04Y\x08W\x1a\n\x0c\n\x05\x04\t\
    \x02\x03\x05\x12\x03Y\x08\x0e\n\x0c\n\x05\x04\t\x02\x03\x01\x12\x03Y\x0f\
    \x13\n\x0c\n\x05\x04\t\x02\x03\x03\x12\x03Y\x16\x17\n+\n\x04\x04\t\x02\
    \x04\x12\x03[\x08\x1b\x1a\x1e\x20time\x20of\x20start\x20in\x20nanosecond\
    s\n\n\r\n\x05\x04\t\x02\x04\x04\x12\x04[\x08Y\x18\n\x0c\n\x05\x04\t\x02\
    \x04\x05\x12\x03[\x08\x0e\n\x0c\n\x05\x04\t\x02\x04\x01\x12\x03[\x0f\x16\
    \n\x0c\n\x05\x04\t\x02\x04\x03\x12\x03[\x19\x1a\n7\n\x04\x04\t\x02\x05\
    \x12\x03]\x08\x1c\x1a*\x20duration\x20of\x20the\x20execution\x20in\x20na\
    noseconds\n\n\r\n\x05\x04\t\x02\x05\x04\x12\x04]\x08[\x1b\n\x0c\n\x05\
    \x04\t\x02\x05\x05\x12\x03]\x08\x0e\n\x0c\n\x05\x04\t\x02\x05\x01\x12\
    \x03]\x0f\x17\n\x0c\n\x05\x04\t\x02\x05\x03\x12\x03]\x1a\x1b\n\"\n\x04\
    \x04\t\x02\x06\x12\x03_\x08(\x1a\x15\x20associated\x20metadata\n\n\r\n\
    \x05\x04\t\x02\x06\x04\x12\x04_\x08]\x1c\n\x0c\n\x05\x04\t\x02\x06\x06\
    \x12\x03_\x08\x1a\n\x0c\n\x05\x04\t\x02\x06\x01\x12\x03_\x1b#\n\x0c\n\
    \x05\x04\t\x02\x06\x03\x12\x03_&'\n\x0b\n\x04\x04\t\x02\x07\x12\x03`\x08\
    \x1a\n\r\n\x05\x04\t\x02\x07\x04\x12\x04`\x08_(\n\x0c\n\x05\x04\t\x02\
    \x07\x06\x12\x03`\x08\x10\n\x0c\n\x05\x04\t\x02\x07\x01\x12\x03`\x11\x15\
    \n\x0c\n\x05\x04\t\x02\x07\x03\x12\x03`\x18\x19b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
