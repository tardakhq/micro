// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `signup/signup.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct SendVerificationEmailRequest {
    // message fields
    pub email: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendVerificationEmailRequest {
    fn default() -> &'a SendVerificationEmailRequest {
        <SendVerificationEmailRequest as ::protobuf::Message>::default_instance()
    }
}

impl SendVerificationEmailRequest {
    pub fn new() -> SendVerificationEmailRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SendVerificationEmailRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendVerificationEmailRequest {
        SendVerificationEmailRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &SendVerificationEmailRequest| { &m.email },
                |m: &mut SendVerificationEmailRequest| { &mut m.email },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendVerificationEmailRequest>(
                "SendVerificationEmailRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendVerificationEmailRequest {
        static instance: ::protobuf::rt::LazyV2<SendVerificationEmailRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendVerificationEmailRequest::new)
    }
}

impl ::protobuf::Clear for SendVerificationEmailRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendVerificationEmailRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendVerificationEmailRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SendVerificationEmailResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SendVerificationEmailResponse {
    fn default() -> &'a SendVerificationEmailResponse {
        <SendVerificationEmailResponse as ::protobuf::Message>::default_instance()
    }
}

impl SendVerificationEmailResponse {
    pub fn new() -> SendVerificationEmailResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SendVerificationEmailResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SendVerificationEmailResponse {
        SendVerificationEmailResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SendVerificationEmailResponse>(
                "SendVerificationEmailResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SendVerificationEmailResponse {
        static instance: ::protobuf::rt::LazyV2<SendVerificationEmailResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SendVerificationEmailResponse::new)
    }
}

impl ::protobuf::Clear for SendVerificationEmailResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SendVerificationEmailResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SendVerificationEmailResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyRequest {
    // message fields
    pub email: ::std::string::String,
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyRequest {
    fn default() -> &'a VerifyRequest {
        <VerifyRequest as ::protobuf::Message>::default_instance()
    }
}

impl VerifyRequest {
    pub fn new() -> VerifyRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string token = 2;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for VerifyRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyRequest {
        VerifyRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &VerifyRequest| { &m.email },
                |m: &mut VerifyRequest| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &VerifyRequest| { &m.token },
                |m: &mut VerifyRequest| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerifyRequest>(
                "VerifyRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerifyRequest {
        static instance: ::protobuf::rt::LazyV2<VerifyRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerifyRequest::new)
    }
}

impl ::protobuf::Clear for VerifyRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VerifyResponse {
    // message fields
    pub authToken: ::protobuf::SingularPtrField<AuthToken>,
    pub customerID: ::std::string::String,
    pub namespace: ::std::string::String,
    pub message: ::std::string::String,
    pub payment_required: bool,
    pub namespaces: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VerifyResponse {
    fn default() -> &'a VerifyResponse {
        <VerifyResponse as ::protobuf::Message>::default_instance()
    }
}

impl VerifyResponse {
    pub fn new() -> VerifyResponse {
        ::std::default::Default::default()
    }

    // .go.micro.service.signup.AuthToken authToken = 1;


    pub fn get_authToken(&self) -> &AuthToken {
        self.authToken.as_ref().unwrap_or_else(|| <AuthToken as ::protobuf::Message>::default_instance())
    }
    pub fn clear_authToken(&mut self) {
        self.authToken.clear();
    }

    pub fn has_authToken(&self) -> bool {
        self.authToken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authToken(&mut self, v: AuthToken) {
        self.authToken = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authToken(&mut self) -> &mut AuthToken {
        if self.authToken.is_none() {
            self.authToken.set_default();
        }
        self.authToken.as_mut().unwrap()
    }

    // Take field
    pub fn take_authToken(&mut self) -> AuthToken {
        self.authToken.take().unwrap_or_else(|| AuthToken::new())
    }

    // string customerID = 2;


    pub fn get_customerID(&self) -> &str {
        &self.customerID
    }
    pub fn clear_customerID(&mut self) {
        self.customerID.clear();
    }

    // Param is passed by value, moved
    pub fn set_customerID(&mut self, v: ::std::string::String) {
        self.customerID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_customerID(&mut self) -> &mut ::std::string::String {
        &mut self.customerID
    }

    // Take field
    pub fn take_customerID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.customerID, ::std::string::String::new())
    }

    // string namespace = 3;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }

    // string message = 4;


    pub fn get_message(&self) -> &str {
        &self.message
    }
    pub fn clear_message(&mut self) {
        self.message.clear();
    }

    // Param is passed by value, moved
    pub fn set_message(&mut self, v: ::std::string::String) {
        self.message = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_message(&mut self) -> &mut ::std::string::String {
        &mut self.message
    }

    // Take field
    pub fn take_message(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.message, ::std::string::String::new())
    }

    // bool payment_required = 5;


    pub fn get_payment_required(&self) -> bool {
        self.payment_required
    }
    pub fn clear_payment_required(&mut self) {
        self.payment_required = false;
    }

    // Param is passed by value, moved
    pub fn set_payment_required(&mut self, v: bool) {
        self.payment_required = v;
    }

    // repeated string namespaces = 6;


    pub fn get_namespaces(&self) -> &[::std::string::String] {
        &self.namespaces
    }
    pub fn clear_namespaces(&mut self) {
        self.namespaces.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespaces(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.namespaces = v;
    }

    // Mutable pointer to the field.
    pub fn mut_namespaces(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.namespaces
    }

    // Take field
    pub fn take_namespaces(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.namespaces, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for VerifyResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.authToken {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.authToken)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.customerID)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.message)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.payment_required = tmp;
                },
                6 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.namespaces)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.authToken.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.customerID.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.customerID);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.namespace);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.message);
        }
        if self.payment_required != false {
            my_size += 2;
        }
        for value in &self.namespaces {
            my_size += ::protobuf::rt::string_size(6, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.authToken.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.customerID.is_empty() {
            os.write_string(2, &self.customerID)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(3, &self.namespace)?;
        }
        if !self.message.is_empty() {
            os.write_string(4, &self.message)?;
        }
        if self.payment_required != false {
            os.write_bool(5, self.payment_required)?;
        }
        for v in &self.namespaces {
            os.write_string(6, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VerifyResponse {
        VerifyResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AuthToken>>(
                "authToken",
                |m: &VerifyResponse| { &m.authToken },
                |m: &mut VerifyResponse| { &mut m.authToken },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "customerID",
                |m: &VerifyResponse| { &m.customerID },
                |m: &mut VerifyResponse| { &mut m.customerID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &VerifyResponse| { &m.namespace },
                |m: &mut VerifyResponse| { &mut m.namespace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "message",
                |m: &VerifyResponse| { &m.message },
                |m: &mut VerifyResponse| { &mut m.message },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "payment_required",
                |m: &VerifyResponse| { &m.payment_required },
                |m: &mut VerifyResponse| { &mut m.payment_required },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespaces",
                |m: &VerifyResponse| { &m.namespaces },
                |m: &mut VerifyResponse| { &mut m.namespaces },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<VerifyResponse>(
                "VerifyResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static VerifyResponse {
        static instance: ::protobuf::rt::LazyV2<VerifyResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(VerifyResponse::new)
    }
}

impl ::protobuf::Clear for VerifyResponse {
    fn clear(&mut self) {
        self.authToken.clear();
        self.customerID.clear();
        self.namespace.clear();
        self.message.clear();
        self.payment_required = false;
        self.namespaces.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VerifyResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VerifyResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetPaymentMethodRequest {
    // message fields
    pub email: ::std::string::String,
    pub payment_method: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetPaymentMethodRequest {
    fn default() -> &'a SetPaymentMethodRequest {
        <SetPaymentMethodRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetPaymentMethodRequest {
    pub fn new() -> SetPaymentMethodRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string payment_method = 2;


    pub fn get_payment_method(&self) -> &str {
        &self.payment_method
    }
    pub fn clear_payment_method(&mut self) {
        self.payment_method.clear();
    }

    // Param is passed by value, moved
    pub fn set_payment_method(&mut self, v: ::std::string::String) {
        self.payment_method = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payment_method(&mut self) -> &mut ::std::string::String {
        &mut self.payment_method
    }

    // Take field
    pub fn take_payment_method(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.payment_method, ::std::string::String::new())
    }
}

impl ::protobuf::Message for SetPaymentMethodRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.payment_method)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.payment_method.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.payment_method);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.payment_method.is_empty() {
            os.write_string(2, &self.payment_method)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetPaymentMethodRequest {
        SetPaymentMethodRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &SetPaymentMethodRequest| { &m.email },
                |m: &mut SetPaymentMethodRequest| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "payment_method",
                |m: &SetPaymentMethodRequest| { &m.payment_method },
                |m: &mut SetPaymentMethodRequest| { &mut m.payment_method },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetPaymentMethodRequest>(
                "SetPaymentMethodRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetPaymentMethodRequest {
        static instance: ::protobuf::rt::LazyV2<SetPaymentMethodRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetPaymentMethodRequest::new)
    }
}

impl ::protobuf::Clear for SetPaymentMethodRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.payment_method.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetPaymentMethodRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPaymentMethodRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetPaymentMethodResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetPaymentMethodResponse {
    fn default() -> &'a SetPaymentMethodResponse {
        <SetPaymentMethodResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetPaymentMethodResponse {
    pub fn new() -> SetPaymentMethodResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SetPaymentMethodResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetPaymentMethodResponse {
        SetPaymentMethodResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<SetPaymentMethodResponse>(
                "SetPaymentMethodResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static SetPaymentMethodResponse {
        static instance: ::protobuf::rt::LazyV2<SetPaymentMethodResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(SetPaymentMethodResponse::new)
    }
}

impl ::protobuf::Clear for SetPaymentMethodResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetPaymentMethodResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPaymentMethodResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HasPaymentMethodRequest {
    // message fields
    pub token: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HasPaymentMethodRequest {
    fn default() -> &'a HasPaymentMethodRequest {
        <HasPaymentMethodRequest as ::protobuf::Message>::default_instance()
    }
}

impl HasPaymentMethodRequest {
    pub fn new() -> HasPaymentMethodRequest {
        ::std::default::Default::default()
    }

    // string token = 1;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }
}

impl ::protobuf::Message for HasPaymentMethodRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.token);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.token.is_empty() {
            os.write_string(1, &self.token)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HasPaymentMethodRequest {
        HasPaymentMethodRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &HasPaymentMethodRequest| { &m.token },
                |m: &mut HasPaymentMethodRequest| { &mut m.token },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HasPaymentMethodRequest>(
                "HasPaymentMethodRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HasPaymentMethodRequest {
        static instance: ::protobuf::rt::LazyV2<HasPaymentMethodRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HasPaymentMethodRequest::new)
    }
}

impl ::protobuf::Clear for HasPaymentMethodRequest {
    fn clear(&mut self) {
        self.token.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HasPaymentMethodRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HasPaymentMethodRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HasPaymentMethodResponse {
    // message fields
    pub has: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HasPaymentMethodResponse {
    fn default() -> &'a HasPaymentMethodResponse {
        <HasPaymentMethodResponse as ::protobuf::Message>::default_instance()
    }
}

impl HasPaymentMethodResponse {
    pub fn new() -> HasPaymentMethodResponse {
        ::std::default::Default::default()
    }

    // bool has = 1;


    pub fn get_has(&self) -> bool {
        self.has
    }
    pub fn clear_has(&mut self) {
        self.has = false;
    }

    // Param is passed by value, moved
    pub fn set_has(&mut self, v: bool) {
        self.has = v;
    }
}

impl ::protobuf::Message for HasPaymentMethodResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.has != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.has != false {
            os.write_bool(1, self.has)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HasPaymentMethodResponse {
        HasPaymentMethodResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "has",
                |m: &HasPaymentMethodResponse| { &m.has },
                |m: &mut HasPaymentMethodResponse| { &mut m.has },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HasPaymentMethodResponse>(
                "HasPaymentMethodResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HasPaymentMethodResponse {
        static instance: ::protobuf::rt::LazyV2<HasPaymentMethodResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HasPaymentMethodResponse::new)
    }
}

impl ::protobuf::Clear for HasPaymentMethodResponse {
    fn clear(&mut self) {
        self.has = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HasPaymentMethodResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HasPaymentMethodResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompleteSignupRequest {
    // message fields
    pub email: ::std::string::String,
    pub token: ::std::string::String,
    pub paymentMethodID: ::std::string::String,
    pub secret: ::std::string::String,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompleteSignupRequest {
    fn default() -> &'a CompleteSignupRequest {
        <CompleteSignupRequest as ::protobuf::Message>::default_instance()
    }
}

impl CompleteSignupRequest {
    pub fn new() -> CompleteSignupRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }

    // string token = 2;


    pub fn get_token(&self) -> &str {
        &self.token
    }
    pub fn clear_token(&mut self) {
        self.token.clear();
    }

    // Param is passed by value, moved
    pub fn set_token(&mut self, v: ::std::string::String) {
        self.token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_token(&mut self) -> &mut ::std::string::String {
        &mut self.token
    }

    // Take field
    pub fn take_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.token, ::std::string::String::new())
    }

    // string paymentMethodID = 3;


    pub fn get_paymentMethodID(&self) -> &str {
        &self.paymentMethodID
    }
    pub fn clear_paymentMethodID(&mut self) {
        self.paymentMethodID.clear();
    }

    // Param is passed by value, moved
    pub fn set_paymentMethodID(&mut self, v: ::std::string::String) {
        self.paymentMethodID = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_paymentMethodID(&mut self) -> &mut ::std::string::String {
        &mut self.paymentMethodID
    }

    // Take field
    pub fn take_paymentMethodID(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.paymentMethodID, ::std::string::String::new())
    }

    // string secret = 4;


    pub fn get_secret(&self) -> &str {
        &self.secret
    }
    pub fn clear_secret(&mut self) {
        self.secret.clear();
    }

    // Param is passed by value, moved
    pub fn set_secret(&mut self, v: ::std::string::String) {
        self.secret = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_secret(&mut self) -> &mut ::std::string::String {
        &mut self.secret
    }

    // Take field
    pub fn take_secret(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.secret, ::std::string::String::new())
    }

    // string namespace = 5;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CompleteSignupRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.token)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.paymentMethodID)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.secret)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        if !self.token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.token);
        }
        if !self.paymentMethodID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.paymentMethodID);
        }
        if !self.secret.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.secret);
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        if !self.token.is_empty() {
            os.write_string(2, &self.token)?;
        }
        if !self.paymentMethodID.is_empty() {
            os.write_string(3, &self.paymentMethodID)?;
        }
        if !self.secret.is_empty() {
            os.write_string(4, &self.secret)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(5, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompleteSignupRequest {
        CompleteSignupRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &CompleteSignupRequest| { &m.email },
                |m: &mut CompleteSignupRequest| { &mut m.email },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "token",
                |m: &CompleteSignupRequest| { &m.token },
                |m: &mut CompleteSignupRequest| { &mut m.token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "paymentMethodID",
                |m: &CompleteSignupRequest| { &m.paymentMethodID },
                |m: &mut CompleteSignupRequest| { &mut m.paymentMethodID },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "secret",
                |m: &CompleteSignupRequest| { &m.secret },
                |m: &mut CompleteSignupRequest| { &mut m.secret },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &CompleteSignupRequest| { &m.namespace },
                |m: &mut CompleteSignupRequest| { &mut m.namespace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CompleteSignupRequest>(
                "CompleteSignupRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CompleteSignupRequest {
        static instance: ::protobuf::rt::LazyV2<CompleteSignupRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CompleteSignupRequest::new)
    }
}

impl ::protobuf::Clear for CompleteSignupRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.token.clear();
        self.paymentMethodID.clear();
        self.secret.clear();
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompleteSignupRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompleteSignupRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CompleteSignupResponse {
    // message fields
    pub authToken: ::protobuf::SingularPtrField<AuthToken>,
    pub namespace: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CompleteSignupResponse {
    fn default() -> &'a CompleteSignupResponse {
        <CompleteSignupResponse as ::protobuf::Message>::default_instance()
    }
}

impl CompleteSignupResponse {
    pub fn new() -> CompleteSignupResponse {
        ::std::default::Default::default()
    }

    // .go.micro.service.signup.AuthToken authToken = 1;


    pub fn get_authToken(&self) -> &AuthToken {
        self.authToken.as_ref().unwrap_or_else(|| <AuthToken as ::protobuf::Message>::default_instance())
    }
    pub fn clear_authToken(&mut self) {
        self.authToken.clear();
    }

    pub fn has_authToken(&self) -> bool {
        self.authToken.is_some()
    }

    // Param is passed by value, moved
    pub fn set_authToken(&mut self, v: AuthToken) {
        self.authToken = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_authToken(&mut self) -> &mut AuthToken {
        if self.authToken.is_none() {
            self.authToken.set_default();
        }
        self.authToken.as_mut().unwrap()
    }

    // Take field
    pub fn take_authToken(&mut self) -> AuthToken {
        self.authToken.take().unwrap_or_else(|| AuthToken::new())
    }

    // string namespace = 2;


    pub fn get_namespace(&self) -> &str {
        &self.namespace
    }
    pub fn clear_namespace(&mut self) {
        self.namespace.clear();
    }

    // Param is passed by value, moved
    pub fn set_namespace(&mut self, v: ::std::string::String) {
        self.namespace = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_namespace(&mut self) -> &mut ::std::string::String {
        &mut self.namespace
    }

    // Take field
    pub fn take_namespace(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.namespace, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CompleteSignupResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.authToken {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.authToken)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.namespace)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.authToken.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.namespace.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.namespace);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.authToken.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.namespace.is_empty() {
            os.write_string(2, &self.namespace)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CompleteSignupResponse {
        CompleteSignupResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AuthToken>>(
                "authToken",
                |m: &CompleteSignupResponse| { &m.authToken },
                |m: &mut CompleteSignupResponse| { &mut m.authToken },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "namespace",
                |m: &CompleteSignupResponse| { &m.namespace },
                |m: &mut CompleteSignupResponse| { &mut m.namespace },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<CompleteSignupResponse>(
                "CompleteSignupResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static CompleteSignupResponse {
        static instance: ::protobuf::rt::LazyV2<CompleteSignupResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(CompleteSignupResponse::new)
    }
}

impl ::protobuf::Clear for CompleteSignupResponse {
    fn clear(&mut self) {
        self.authToken.clear();
        self.namespace.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CompleteSignupResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CompleteSignupResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AuthToken {
    // message fields
    pub access_token: ::std::string::String,
    pub refresh_token: ::std::string::String,
    pub created: i64,
    pub expiry: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AuthToken {
    fn default() -> &'a AuthToken {
        <AuthToken as ::protobuf::Message>::default_instance()
    }
}

impl AuthToken {
    pub fn new() -> AuthToken {
        ::std::default::Default::default()
    }

    // string access_token = 1;


    pub fn get_access_token(&self) -> &str {
        &self.access_token
    }
    pub fn clear_access_token(&mut self) {
        self.access_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_access_token(&mut self, v: ::std::string::String) {
        self.access_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_access_token(&mut self) -> &mut ::std::string::String {
        &mut self.access_token
    }

    // Take field
    pub fn take_access_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.access_token, ::std::string::String::new())
    }

    // string refresh_token = 2;


    pub fn get_refresh_token(&self) -> &str {
        &self.refresh_token
    }
    pub fn clear_refresh_token(&mut self) {
        self.refresh_token.clear();
    }

    // Param is passed by value, moved
    pub fn set_refresh_token(&mut self, v: ::std::string::String) {
        self.refresh_token = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_refresh_token(&mut self) -> &mut ::std::string::String {
        &mut self.refresh_token
    }

    // Take field
    pub fn take_refresh_token(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.refresh_token, ::std::string::String::new())
    }

    // int64 created = 3;


    pub fn get_created(&self) -> i64 {
        self.created
    }
    pub fn clear_created(&mut self) {
        self.created = 0;
    }

    // Param is passed by value, moved
    pub fn set_created(&mut self, v: i64) {
        self.created = v;
    }

    // int64 expiry = 4;


    pub fn get_expiry(&self) -> i64 {
        self.expiry
    }
    pub fn clear_expiry(&mut self) {
        self.expiry = 0;
    }

    // Param is passed by value, moved
    pub fn set_expiry(&mut self, v: i64) {
        self.expiry = v;
    }
}

impl ::protobuf::Message for AuthToken {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.access_token)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.refresh_token)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.created = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.expiry = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.access_token.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.access_token);
        }
        if !self.refresh_token.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.refresh_token);
        }
        if self.created != 0 {
            my_size += ::protobuf::rt::value_size(3, self.created, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.expiry != 0 {
            my_size += ::protobuf::rt::value_size(4, self.expiry, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.access_token.is_empty() {
            os.write_string(1, &self.access_token)?;
        }
        if !self.refresh_token.is_empty() {
            os.write_string(2, &self.refresh_token)?;
        }
        if self.created != 0 {
            os.write_int64(3, self.created)?;
        }
        if self.expiry != 0 {
            os.write_int64(4, self.expiry)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AuthToken {
        AuthToken::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "access_token",
                |m: &AuthToken| { &m.access_token },
                |m: &mut AuthToken| { &mut m.access_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "refresh_token",
                |m: &AuthToken| { &m.refresh_token },
                |m: &mut AuthToken| { &mut m.refresh_token },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "created",
                |m: &AuthToken| { &m.created },
                |m: &mut AuthToken| { &mut m.created },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "expiry",
                |m: &AuthToken| { &m.expiry },
                |m: &mut AuthToken| { &mut m.expiry },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AuthToken>(
                "AuthToken",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AuthToken {
        static instance: ::protobuf::rt::LazyV2<AuthToken> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AuthToken::new)
    }
}

impl ::protobuf::Clear for AuthToken {
    fn clear(&mut self) {
        self.access_token.clear();
        self.refresh_token.clear();
        self.created = 0;
        self.expiry = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AuthToken {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AuthToken {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RecoverRequest {
    // message fields
    pub email: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecoverRequest {
    fn default() -> &'a RecoverRequest {
        <RecoverRequest as ::protobuf::Message>::default_instance()
    }
}

impl RecoverRequest {
    pub fn new() -> RecoverRequest {
        ::std::default::Default::default()
    }

    // string email = 1;


    pub fn get_email(&self) -> &str {
        &self.email
    }
    pub fn clear_email(&mut self) {
        self.email.clear();
    }

    // Param is passed by value, moved
    pub fn set_email(&mut self, v: ::std::string::String) {
        self.email = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_email(&mut self) -> &mut ::std::string::String {
        &mut self.email
    }

    // Take field
    pub fn take_email(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.email, ::std::string::String::new())
    }
}

impl ::protobuf::Message for RecoverRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.email)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.email.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.email);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.email.is_empty() {
            os.write_string(1, &self.email)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecoverRequest {
        RecoverRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "email",
                |m: &RecoverRequest| { &m.email },
                |m: &mut RecoverRequest| { &mut m.email },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecoverRequest>(
                "RecoverRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecoverRequest {
        static instance: ::protobuf::rt::LazyV2<RecoverRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecoverRequest::new)
    }
}

impl ::protobuf::Clear for RecoverRequest {
    fn clear(&mut self) {
        self.email.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecoverRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecoverRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RecoverResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RecoverResponse {
    fn default() -> &'a RecoverResponse {
        <RecoverResponse as ::protobuf::Message>::default_instance()
    }
}

impl RecoverResponse {
    pub fn new() -> RecoverResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RecoverResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RecoverResponse {
        RecoverResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<RecoverResponse>(
                "RecoverResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static RecoverResponse {
        static instance: ::protobuf::rt::LazyV2<RecoverResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(RecoverResponse::new)
    }
}

impl ::protobuf::Clear for RecoverResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RecoverResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RecoverResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13signup/signup.proto\x12\x17go.micro.service.signup\"4\n\x1cSendVer\
    ificationEmailRequest\x12\x14\n\x05email\x18\x01\x20\x01(\tR\x05email\"\
    \x1f\n\x1dSendVerificationEmailResponse\";\n\rVerifyRequest\x12\x14\n\
    \x05email\x18\x01\x20\x01(\tR\x05email\x12\x14\n\x05token\x18\x02\x20\
    \x01(\tR\x05token\"\xf5\x01\n\x0eVerifyResponse\x12@\n\tauthToken\x18\
    \x01\x20\x01(\x0b2\".go.micro.service.signup.AuthTokenR\tauthToken\x12\
    \x1e\n\ncustomerID\x18\x02\x20\x01(\tR\ncustomerID\x12\x1c\n\tnamespace\
    \x18\x03\x20\x01(\tR\tnamespace\x12\x18\n\x07message\x18\x04\x20\x01(\tR\
    \x07message\x12)\n\x10payment_required\x18\x05\x20\x01(\x08R\x0fpaymentR\
    equired\x12\x1e\n\nnamespaces\x18\x06\x20\x03(\tR\nnamespaces\"V\n\x17Se\
    tPaymentMethodRequest\x12\x14\n\x05email\x18\x01\x20\x01(\tR\x05email\
    \x12%\n\x0epayment_method\x18\x02\x20\x01(\tR\rpaymentMethod\"\x1a\n\x18\
    SetPaymentMethodResponse\"/\n\x17HasPaymentMethodRequest\x12\x14\n\x05to\
    ken\x18\x01\x20\x01(\tR\x05token\",\n\x18HasPaymentMethodResponse\x12\
    \x10\n\x03has\x18\x01\x20\x01(\x08R\x03has\"\xa3\x01\n\x15CompleteSignup\
    Request\x12\x14\n\x05email\x18\x01\x20\x01(\tR\x05email\x12\x14\n\x05tok\
    en\x18\x02\x20\x01(\tR\x05token\x12(\n\x0fpaymentMethodID\x18\x03\x20\
    \x01(\tR\x0fpaymentMethodID\x12\x16\n\x06secret\x18\x04\x20\x01(\tR\x06s\
    ecret\x12\x1c\n\tnamespace\x18\x05\x20\x01(\tR\tnamespace\"x\n\x16Comple\
    teSignupResponse\x12@\n\tauthToken\x18\x01\x20\x01(\x0b2\".go.micro.serv\
    ice.signup.AuthTokenR\tauthToken\x12\x1c\n\tnamespace\x18\x02\x20\x01(\t\
    R\tnamespace\"\x85\x01\n\tAuthToken\x12!\n\x0caccess_token\x18\x01\x20\
    \x01(\tR\x0baccessToken\x12#\n\rrefresh_token\x18\x02\x20\x01(\tR\x0cref\
    reshToken\x12\x18\n\x07created\x18\x03\x20\x01(\x03R\x07created\x12\x16\
    \n\x06expiry\x18\x04\x20\x01(\x03R\x06expiry\"&\n\x0eRecoverRequest\x12\
    \x14\n\x05email\x18\x01\x20\x01(\tR\x05email\"\x11\n\x0fRecoverResponse2\
    \xaf\x05\n\x06Signup\x12\x86\x01\n\x15SendVerificationEmail\x125.go.micr\
    o.service.signup.SendVerificationEmailRequest\x1a6.go.micro.service.sign\
    up.SendVerificationEmailResponse\x12Y\n\x06Verify\x12&.go.micro.service.\
    signup.VerifyRequest\x1a'.go.micro.service.signup.VerifyResponse\x12w\n\
    \x10SetPaymentMethod\x120.go.micro.service.signup.SetPaymentMethodReques\
    t\x1a1.go.micro.service.signup.SetPaymentMethodResponse\x12w\n\x10HasPay\
    mentMethod\x120.go.micro.service.signup.HasPaymentMethodRequest\x1a1.go.\
    micro.service.signup.HasPaymentMethodResponse\x12q\n\x0eCompleteSignup\
    \x12..go.micro.service.signup.CompleteSignupRequest\x1a/.go.micro.servic\
    e.signup.CompleteSignupResponse\x12\\\n\x07Recover\x12'.go.micro.service\
    .signup.RecoverRequest\x1a(.go.micro.service.signup.RecoverResponseJ\xbf\
    \x1e\n\x06\x12\x04\0\0f\x1a\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x1f\n\n\n\x02\x06\0\x12\x04\x04\0\x0e\x01\n\n\n\x03\
    \x06\0\x01\x12\x03\x04\x08\x0e\n7\n\x04\x06\0\x02\0\x12\x03\x06\x08h\x1a\
    *\x20Sends\x20the\x20verification\x20email\x20to\x20the\x20user\n\n\x0c\
    \n\x05\x06\0\x02\0\x01\x12\x03\x06\x0c!\n\x0c\n\x05\x06\0\x02\0\x02\x12\
    \x03\x06\">\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x06If\n;\n\x04\x06\0\x02\
    \x01\x12\x03\x08\x08;\x1a.\x20Verify\x20kicks\x20off\x20the\x20process\
    \x20of\x20verification\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x08\x0c\
    \x12\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x08\x13\x20\n\x0c\n\x05\x06\0\
    \x02\x01\x03\x12\x03\x08+9\n\x0b\n\x04\x06\0\x02\x02\x12\x03\t\x08Y\n\
    \x0c\n\x05\x06\0\x02\x02\x01\x12\x03\t\x0c\x1c\n\x0c\n\x05\x06\0\x02\x02\
    \x02\x12\x03\t\x1d4\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\t?W\n\x0b\n\
    \x04\x06\0\x02\x03\x12\x03\n\x08Y\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\
    \n\x0c\x1c\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\n\x1d4\n\x0c\n\x05\x06\
    \0\x02\x03\x03\x12\x03\n?W\n4\n\x04\x06\0\x02\x04\x12\x03\x0c\x08S\x1a'\
    \x20Creates\x20a\x20subscription\x20and\x20an\x20account\n\n\x0c\n\x05\
    \x06\0\x02\x04\x01\x12\x03\x0c\x0c\x1a\n\x0c\n\x05\x06\0\x02\x04\x02\x12\
    \x03\x0c\x1b0\n\x0c\n\x05\x06\0\x02\x04\x03\x12\x03\x0c;Q\n\x0b\n\x04\
    \x06\0\x02\x05\x12\x03\r\x08>\n\x0c\n\x05\x06\0\x02\x05\x01\x12\x03\r\
    \x0c\x13\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x03\r\x14\"\n\x0c\n\x05\x06\0\
    \x02\x05\x03\x12\x03\r-<\n\n\n\x02\x04\0\x12\x04\x10\0\x12\x01\n\n\n\x03\
    \x04\0\x01\x12\x03\x10\x08$\n\x0b\n\x04\x04\0\x02\0\x12\x03\x11\x08\x19\
    \n\r\n\x05\x04\0\x02\0\x04\x12\x04\x11\x08\x10&\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x11\x08\x0e\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x11\x0f\x14\
    \n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x11\x17\x18\n\t\n\x02\x04\x01\x12\
    \x03\x14\0(\n\n\n\x03\x04\x01\x01\x12\x03\x14\x08%\n\n\n\x02\x04\x02\x12\
    \x04\x16\0\x1a\x01\n\n\n\x03\x04\x02\x01\x12\x03\x16\x08\x15\n\x0b\n\x04\
    \x04\x02\x02\0\x12\x03\x17\x08\x19\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\
    \x17\x08\x16\x17\n\x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x17\x08\x0e\n\x0c\
    \n\x05\x04\x02\x02\0\x01\x12\x03\x17\x0f\x14\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03\x17\x17\x18\n9\n\x04\x04\x02\x02\x01\x12\x03\x19\x08\x19\
    \x1a,\x20Email\x20token\x20that\x20was\x20received\x20in\x20an\x20email.\
    \n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04\x19\x08\x17\x19\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03\x19\x08\x0e\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\
    \x03\x19\x0f\x14\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03\x19\x17\x18\n\n\
    \n\x02\x04\x03\x12\x04\x1c\01\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08\
    \x16\n\xdc\x01\n\x04\x04\x03\x02\0\x12\x03\"\x08\x20\x1a\xce\x01\x20Auth\
    \x20token\x20to\x20be\x20saved\x20into\x20`~/.micro`\n\x20For\x20users\
    \x20who\x20are\x20already\x20registered\x20and\x20paid,\n\x20the\x20flow\
    \x20stops\x20here.\n\x20For\x20users\x20who\x20are\x20yet\x20to\x20be\
    \x20registered\n\x20the\x20token\x20will\x20be\x20acquired\x20in\x20the\
    \x20`FinishSignup`\x20step.\n\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\"\x08\
    \x1c\x18\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\"\x08\x11\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\"\x12\x1b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\"\
    \x1e\x1f\n\x9e\x01\n\x04\x04\x03\x02\x01\x12\x03&\x08\x1e\x1a\x90\x01\
    \x20Payment\x20provider\x20custommer\x20id\x20that\x20can\x20be\x20used\
    \x20to\n\x20acquire\x20a\x20payment\x20method,\x20see\x20`micro\x20login\
    `\x20flow\x20for\x20more.\n\x20@todo\x20this\x20is\x20likely\x20not\x20n\
    eeded\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04&\x08\"\x20\n\x0c\n\x05\x04\
    \x03\x02\x01\x05\x12\x03&\x08\x0e\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\
    \x03&\x0f\x19\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\x03&\x1c\x1d\nX\n\x04\
    \x04\x03\x02\x02\x12\x03)\x08\x1d\x1aK\x20Namespace\x20to\x20use\n\x20@t\
    odod\x20deprecated\x20since\x20we\x20no\x20longer\x20support\x20OTP\x20l\
    ogins\n\n\r\n\x05\x04\x03\x02\x02\x04\x12\x04)\x08&\x1e\n\x0c\n\x05\x04\
    \x03\x02\x02\x05\x12\x03)\x08\x0e\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\
    \x03)\x0f\x18\n\x0c\n\x05\x04\x03\x02\x02\x03\x12\x03)\x1b\x1c\n-\n\x04\
    \x04\x03\x02\x03\x12\x03+\x08\x1b\x1a\x20\x20Message\x20to\x20display\
    \x20to\x20the\x20user\n\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04+\x08)\x1d\
    \n\x0c\n\x05\x04\x03\x02\x03\x05\x12\x03+\x08\x0e\n\x0c\n\x05\x04\x03\
    \x02\x03\x01\x12\x03+\x0f\x16\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03+\
    \x19\x1a\n1\n\x04\x04\x03\x02\x04\x12\x03-\x08\"\x1a$\x20Whether\x20paym\
    ent\x20is\x20required\x20or\x20not\n\n\r\n\x05\x04\x03\x02\x04\x04\x12\
    \x04-\x08+\x1b\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03-\x08\x0c\n\x0c\n\
    \x05\x04\x03\x02\x04\x01\x12\x03-\r\x1d\n\x0c\n\x05\x04\x03\x02\x04\x03\
    \x12\x03-\x20!\nd\n\x04\x04\x03\x02\x05\x12\x030\x08'\x1aW\x20Namespaces\
    \x20one\x20has\x20access\x20to\x20based\x20on\x20previous\x20invites\n\
    \x20Currently\x20only\x201\x20is\x20supported\n\n\x0c\n\x05\x04\x03\x02\
    \x05\x04\x12\x030\x08\x10\n\x0c\n\x05\x04\x03\x02\x05\x05\x12\x030\x11\
    \x17\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x030\x18\"\n\x0c\n\x05\x04\x03\
    \x02\x05\x03\x12\x030%&\n\n\n\x02\x04\x04\x12\x043\06\x01\n\n\n\x03\x04\
    \x04\x01\x12\x033\x08\x1f\n\x0b\n\x04\x04\x04\x02\0\x12\x034\x08\x19\n\r\
    \n\x05\x04\x04\x02\0\x04\x12\x044\x083!\n\x0c\n\x05\x04\x04\x02\0\x05\
    \x12\x034\x08\x0e\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x034\x0f\x14\n\x0c\n\
    \x05\x04\x04\x02\0\x03\x12\x034\x17\x18\n\x0b\n\x04\x04\x04\x02\x01\x12\
    \x035\x08\"\n\r\n\x05\x04\x04\x02\x01\x04\x12\x045\x084\x19\n\x0c\n\x05\
    \x04\x04\x02\x01\x05\x12\x035\x08\x0e\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x035\x0f\x1d\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x035\x20!\n\n\n\
    \x02\x04\x05\x12\x048\0:\x01\n\n\n\x03\x04\x05\x01\x12\x038\x08\x20\n\n\
    \n\x02\x04\x06\x12\x04<\0A\x01\n\n\n\x03\x04\x06\x01\x12\x03<\x08\x1f\n\
    \xd1\x01\n\x04\x04\x06\x02\0\x12\x03@\x08\x19\x1a\xc3\x01\x20We\x20can't\
    \x20read\x20by\x20email\x20because\x20that\x20would\x20be\x20too\x20easy\
    \x20to\x20guess.\n\x20The\x20token\x20is\x20already\x20used\x20for\x20id\
    entification\x20purposes\x20during\x20the\x20signup\n\x20so\x20we\x20wil\
    l\x20use\x20that\x20too\x20to\x20pull\x20for\x20the\x20payment\x20method\
    .\n\n\r\n\x05\x04\x06\x02\0\x04\x12\x04@\x08<!\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03@\x08\x0e\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03@\x0f\x14\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03@\x17\x18\n\n\n\x02\x04\x07\x12\x04C\
    \0E\x01\n\n\n\x03\x04\x07\x01\x12\x03C\x08\x20\n\x0b\n\x04\x04\x07\x02\0\
    \x12\x03D\x08\x15\n\r\n\x05\x04\x07\x02\0\x04\x12\x04D\x08C\"\n\x0c\n\
    \x05\x04\x07\x02\0\x05\x12\x03D\x08\x0c\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03D\r\x10\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03D\x13\x14\n\n\n\x02\
    \x04\x08\x12\x04G\0S\x01\n\n\n\x03\x04\x08\x01\x12\x03G\x08\x1d\n\x0b\n\
    \x04\x04\x08\x02\0\x12\x03H\x08\x19\n\r\n\x05\x04\x08\x02\0\x04\x12\x04H\
    \x08G\x1f\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03H\x08\x0e\n\x0c\n\x05\x04\
    \x08\x02\0\x01\x12\x03H\x0f\x14\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03H\
    \x17\x18\nO\n\x04\x04\x08\x02\x01\x12\x03J\x08\x19\x1aB\x20The\x20token\
    \x20has\x20to\x20be\x20passed\x20here\x20too\x20for\x20identification\
    \x20purposes.\n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04J\x08H\x19\n\x0c\n\
    \x05\x04\x08\x02\x01\x05\x12\x03J\x08\x0e\n\x0c\n\x05\x04\x08\x02\x01\
    \x01\x12\x03J\x0f\x14\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03J\x17\x18\n\
    \xeb\x01\n\x04\x04\x08\x02\x02\x12\x03N\x08#\x1a\xdd\x01\x20This\x20paym\
    ent\x20method\x20ID\x20is\x20the\x20one\x20we\x20got\x20back\x20from\x20\
    Stripe\x20on\x20the\x20frontend\x20(ie.\x20`m3o.com/subscribe.html`)\n\
    \x20deprecated:\x20signup\x20service\x20now\x20knows\x20the\x20payment\
    \x20method\x20due\x20to\x20the\n\x20SetPaymentMethod\x20call\x20issued\
    \x20by\x20the\x20frontend.\n\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04N\x08J\
    \x19\n\x0c\n\x05\x04\x08\x02\x02\x05\x12\x03N\x08\x0e\n\x0c\n\x05\x04\
    \x08\x02\x02\x01\x12\x03N\x0f\x1e\n\x0c\n\x05\x04\x08\x02\x02\x03\x12\
    \x03N!\"\n9\n\x04\x04\x08\x02\x03\x12\x03P\x08\x1a\x1a,\x20The\x20secret\
    /password\x20to\x20use\x20for\x20the\x20account\n\n\r\n\x05\x04\x08\x02\
    \x03\x04\x12\x04P\x08N#\n\x0c\n\x05\x04\x08\x02\x03\x05\x12\x03P\x08\x0e\
    \n\x0c\n\x05\x04\x08\x02\x03\x01\x12\x03P\x0f\x15\n\x0c\n\x05\x04\x08\
    \x02\x03\x03\x12\x03P\x18\x19\nE\n\x04\x04\x08\x02\x04\x12\x03R\x08\x1d\
    \x1a8\x20Which\x20namespace\x20to\x20sign\x20up\x20to\x20based\x20on\x20\
    previous\x20invite\n\n\r\n\x05\x04\x08\x02\x04\x04\x12\x04R\x08P\x1a\n\
    \x0c\n\x05\x04\x08\x02\x04\x05\x12\x03R\x08\x0e\n\x0c\n\x05\x04\x08\x02\
    \x04\x01\x12\x03R\x0f\x18\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03R\x1b\
    \x1c\n\n\n\x02\x04\t\x12\x04U\0X\x01\n\n\n\x03\x04\t\x01\x12\x03U\x08\
    \x1e\n\x0b\n\x04\x04\t\x02\0\x12\x03V\x08\x20\n\r\n\x05\x04\t\x02\0\x04\
    \x12\x04V\x08U\x20\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03V\x08\x11\n\x0c\n\
    \x05\x04\t\x02\0\x01\x12\x03V\x12\x1b\n\x0c\n\x05\x04\t\x02\0\x03\x12\
    \x03V\x1e\x1f\n\x0b\n\x04\x04\t\x02\x01\x12\x03W\x08\x1d\n\r\n\x05\x04\t\
    \x02\x01\x04\x12\x04W\x08V\x20\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03W\
    \x08\x0e\n\x0c\n\x05\x04\t\x02\x01\x01\x12\x03W\x0f\x18\n\x0c\n\x05\x04\
    \t\x02\x01\x03\x12\x03W\x1b\x1c\ne\n\x02\x04\n\x12\x04[\0`\x01\x1aY\x20l\
    ifted\x20from\x20https://github.com/micro/go-micro/blob/master/auth/serv\
    ice/proto/auth.proto\n\n\n\n\x03\x04\n\x01\x12\x03[\x08\x11\n\x0b\n\x04\
    \x04\n\x02\0\x12\x03\\\x08\x20\n\r\n\x05\x04\n\x02\0\x04\x12\x04\\\x08[\
    \x13\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03\\\x08\x0e\n\x0c\n\x05\x04\n\x02\
    \0\x01\x12\x03\\\x0f\x1b\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03\\\x1e\x1f\n\
    \x0b\n\x04\x04\n\x02\x01\x12\x03]\x08!\n\r\n\x05\x04\n\x02\x01\x04\x12\
    \x04]\x08\\\x20\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03]\x08\x0e\n\x0c\n\
    \x05\x04\n\x02\x01\x01\x12\x03]\x0f\x1c\n\x0c\n\x05\x04\n\x02\x01\x03\
    \x12\x03]\x1f\x20\n\x0b\n\x04\x04\n\x02\x02\x12\x03^\x08\x1a\n\r\n\x05\
    \x04\n\x02\x02\x04\x12\x04^\x08]!\n\x0c\n\x05\x04\n\x02\x02\x05\x12\x03^\
    \x08\r\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03^\x0e\x15\n\x0c\n\x05\x04\n\
    \x02\x02\x03\x12\x03^\x18\x19\n\x0b\n\x04\x04\n\x02\x03\x12\x03_\x08\x19\
    \n\r\n\x05\x04\n\x02\x03\x04\x12\x04_\x08^\x1a\n\x0c\n\x05\x04\n\x02\x03\
    \x05\x12\x03_\x08\r\n\x0c\n\x05\x04\n\x02\x03\x01\x12\x03_\x0e\x14\n\x0c\
    \n\x05\x04\n\x02\x03\x03\x12\x03_\x17\x18\n\n\n\x02\x04\x0b\x12\x04b\0d\
    \x01\n\n\n\x03\x04\x0b\x01\x12\x03b\x08\x16\n\x0b\n\x04\x04\x0b\x02\0\
    \x12\x03c\x08\x19\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04c\x08b\x18\n\x0c\n\
    \x05\x04\x0b\x02\0\x05\x12\x03c\x08\x0e\n\x0c\n\x05\x04\x0b\x02\0\x01\
    \x12\x03c\x0f\x14\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03c\x17\x18\n\t\n\
    \x02\x04\x0c\x12\x03f\0\x1a\n\n\n\x03\x04\x0c\x01\x12\x03f\x08\x17b\x06p\
    roto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
