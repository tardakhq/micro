// This file is generated by rust-protobuf 2.18.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![rustfmt::skip]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `events/events.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_0;

#[derive(PartialEq,Clone,Default)]
pub struct PublishRequest {
    // message fields
    pub topic: ::std::string::String,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub payload: ::std::vec::Vec<u8>,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublishRequest {
    fn default() -> &'a PublishRequest {
        <PublishRequest as ::protobuf::Message>::default_instance()
    }
}

impl PublishRequest {
    pub fn new() -> PublishRequest {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // repeated .events.PublishRequest.MetadataEntry metadata = 2;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // bytes payload = 3;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // int64 timestamp = 4;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for PublishRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.metadata);
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.payload);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(4, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(2, &self.metadata, os)?;
        if !self.payload.is_empty() {
            os.write_bytes(3, &self.payload)?;
        }
        if self.timestamp != 0 {
            os.write_int64(4, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublishRequest {
        PublishRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &PublishRequest| { &m.topic },
                |m: &mut PublishRequest| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &PublishRequest| { &m.metadata },
                |m: &mut PublishRequest| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &PublishRequest| { &m.payload },
                |m: &mut PublishRequest| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &PublishRequest| { &m.timestamp },
                |m: &mut PublishRequest| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PublishRequest>(
                "PublishRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PublishRequest {
        static instance: ::protobuf::rt::LazyV2<PublishRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PublishRequest::new)
    }
}

impl ::protobuf::Clear for PublishRequest {
    fn clear(&mut self) {
        self.topic.clear();
        self.metadata.clear();
        self.payload.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublishRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PublishResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PublishResponse {
    fn default() -> &'a PublishResponse {
        <PublishResponse as ::protobuf::Message>::default_instance()
    }
}

impl PublishResponse {
    pub fn new() -> PublishResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for PublishResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PublishResponse {
        PublishResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PublishResponse>(
                "PublishResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PublishResponse {
        static instance: ::protobuf::rt::LazyV2<PublishResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PublishResponse::new)
    }
}

impl ::protobuf::Clear for PublishResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PublishResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PublishResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConsumeRequest {
    // message fields
    pub group: ::std::string::String,
    pub topic: ::std::string::String,
    pub offset: i64,
    pub auto_ack: bool,
    pub ack_wait: i64,
    pub retry_limit: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConsumeRequest {
    fn default() -> &'a ConsumeRequest {
        <ConsumeRequest as ::protobuf::Message>::default_instance()
    }
}

impl ConsumeRequest {
    pub fn new() -> ConsumeRequest {
        ::std::default::Default::default()
    }

    // string group = 1;


    pub fn get_group(&self) -> &str {
        &self.group
    }
    pub fn clear_group(&mut self) {
        self.group.clear();
    }

    // Param is passed by value, moved
    pub fn set_group(&mut self, v: ::std::string::String) {
        self.group = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_group(&mut self) -> &mut ::std::string::String {
        &mut self.group
    }

    // Take field
    pub fn take_group(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.group, ::std::string::String::new())
    }

    // string topic = 2;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // int64 offset = 3;


    pub fn get_offset(&self) -> i64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: i64) {
        self.offset = v;
    }

    // bool auto_ack = 4;


    pub fn get_auto_ack(&self) -> bool {
        self.auto_ack
    }
    pub fn clear_auto_ack(&mut self) {
        self.auto_ack = false;
    }

    // Param is passed by value, moved
    pub fn set_auto_ack(&mut self, v: bool) {
        self.auto_ack = v;
    }

    // int64 ack_wait = 5;


    pub fn get_ack_wait(&self) -> i64 {
        self.ack_wait
    }
    pub fn clear_ack_wait(&mut self) {
        self.ack_wait = 0;
    }

    // Param is passed by value, moved
    pub fn set_ack_wait(&mut self, v: i64) {
        self.ack_wait = v;
    }

    // int64 retry_limit = 6;


    pub fn get_retry_limit(&self) -> i64 {
        self.retry_limit
    }
    pub fn clear_retry_limit(&mut self) {
        self.retry_limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_retry_limit(&mut self, v: i64) {
        self.retry_limit = v;
    }
}

impl ::protobuf::Message for ConsumeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.group)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.offset = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.auto_ack = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ack_wait = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.retry_limit = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.group.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.group);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.topic);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.auto_ack != false {
            my_size += 2;
        }
        if self.ack_wait != 0 {
            my_size += ::protobuf::rt::value_size(5, self.ack_wait, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.retry_limit != 0 {
            my_size += ::protobuf::rt::value_size(6, self.retry_limit, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.group.is_empty() {
            os.write_string(1, &self.group)?;
        }
        if !self.topic.is_empty() {
            os.write_string(2, &self.topic)?;
        }
        if self.offset != 0 {
            os.write_int64(3, self.offset)?;
        }
        if self.auto_ack != false {
            os.write_bool(4, self.auto_ack)?;
        }
        if self.ack_wait != 0 {
            os.write_int64(5, self.ack_wait)?;
        }
        if self.retry_limit != 0 {
            os.write_int64(6, self.retry_limit)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConsumeRequest {
        ConsumeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "group",
                |m: &ConsumeRequest| { &m.group },
                |m: &mut ConsumeRequest| { &mut m.group },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &ConsumeRequest| { &m.topic },
                |m: &mut ConsumeRequest| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "offset",
                |m: &ConsumeRequest| { &m.offset },
                |m: &mut ConsumeRequest| { &mut m.offset },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "auto_ack",
                |m: &ConsumeRequest| { &m.auto_ack },
                |m: &mut ConsumeRequest| { &mut m.auto_ack },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ack_wait",
                |m: &ConsumeRequest| { &m.ack_wait },
                |m: &mut ConsumeRequest| { &mut m.ack_wait },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "retry_limit",
                |m: &ConsumeRequest| { &m.retry_limit },
                |m: &mut ConsumeRequest| { &mut m.retry_limit },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ConsumeRequest>(
                "ConsumeRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ConsumeRequest {
        static instance: ::protobuf::rt::LazyV2<ConsumeRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ConsumeRequest::new)
    }
}

impl ::protobuf::Clear for ConsumeRequest {
    fn clear(&mut self) {
        self.group.clear();
        self.topic.clear();
        self.offset = 0;
        self.auto_ack = false;
        self.ack_wait = 0;
        self.retry_limit = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConsumeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConsumeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Event {
    // message fields
    pub id: ::std::string::String,
    pub topic: ::std::string::String,
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    pub payload: ::std::vec::Vec<u8>,
    pub timestamp: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Event {
    fn default() -> &'a Event {
        <Event as ::protobuf::Message>::default_instance()
    }
}

impl Event {
    pub fn new() -> Event {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // string topic = 2;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // repeated .events.Event.MetadataEntry metadata = 3;


    pub fn get_metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    pub fn clear_metadata(&mut self) {
        self.metadata.clear();
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: ::std::collections::HashMap<::std::string::String, ::std::string::String>) {
        self.metadata = v;
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &mut self.metadata
    }

    // Take field
    pub fn take_metadata(&mut self) -> ::std::collections::HashMap<::std::string::String, ::std::string::String> {
        ::std::mem::replace(&mut self.metadata, ::std::collections::HashMap::new())
    }

    // bytes payload = 4;


    pub fn get_payload(&self) -> &[u8] {
        &self.payload
    }
    pub fn clear_payload(&mut self) {
        self.payload.clear();
    }

    // Param is passed by value, moved
    pub fn set_payload(&mut self, v: ::std::vec::Vec<u8>) {
        self.payload = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_payload(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.payload
    }

    // Take field
    pub fn take_payload(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.payload, ::std::vec::Vec::new())
    }

    // int64 timestamp = 5;


    pub fn get_timestamp(&self) -> i64 {
        self.timestamp
    }
    pub fn clear_timestamp(&mut self) {
        self.timestamp = 0;
    }

    // Param is passed by value, moved
    pub fn set_timestamp(&mut self, v: i64) {
        self.timestamp = v;
    }
}

impl ::protobuf::Message for Event {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                3 => {
                    ::protobuf::rt::read_map_into::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(wire_type, is, &mut self.metadata)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.payload)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.timestamp = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.topic);
        }
        my_size += ::protobuf::rt::compute_map_size::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata);
        if !self.payload.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.payload);
        }
        if self.timestamp != 0 {
            my_size += ::protobuf::rt::value_size(5, self.timestamp, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.topic.is_empty() {
            os.write_string(2, &self.topic)?;
        }
        ::protobuf::rt::write_map_with_cached_sizes::<::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(3, &self.metadata, os)?;
        if !self.payload.is_empty() {
            os.write_bytes(4, &self.payload)?;
        }
        if self.timestamp != 0 {
            os.write_int64(5, self.timestamp)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Event {
        Event::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &Event| { &m.id },
                |m: &mut Event| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &Event| { &m.topic },
                |m: &mut Event| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_map_accessor::<_, ::protobuf::types::ProtobufTypeString, ::protobuf::types::ProtobufTypeString>(
                "metadata",
                |m: &Event| { &m.metadata },
                |m: &mut Event| { &mut m.metadata },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "payload",
                |m: &Event| { &m.payload },
                |m: &mut Event| { &mut m.payload },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "timestamp",
                |m: &Event| { &m.timestamp },
                |m: &mut Event| { &mut m.timestamp },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Event>(
                "Event",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Event {
        static instance: ::protobuf::rt::LazyV2<Event> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Event::new)
    }
}

impl ::protobuf::Clear for Event {
    fn clear(&mut self) {
        self.id.clear();
        self.topic.clear();
        self.metadata.clear();
        self.payload.clear();
        self.timestamp = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Event {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Event {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadRequest {
    // message fields
    pub topic: ::std::string::String,
    pub limit: u64,
    pub offset: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadRequest {
    fn default() -> &'a ReadRequest {
        <ReadRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReadRequest {
    pub fn new() -> ReadRequest {
        ::std::default::Default::default()
    }

    // string topic = 1;


    pub fn get_topic(&self) -> &str {
        &self.topic
    }
    pub fn clear_topic(&mut self) {
        self.topic.clear();
    }

    // Param is passed by value, moved
    pub fn set_topic(&mut self, v: ::std::string::String) {
        self.topic = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_topic(&mut self) -> &mut ::std::string::String {
        &mut self.topic
    }

    // Take field
    pub fn take_topic(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.topic, ::std::string::String::new())
    }

    // uint64 limit = 2;


    pub fn get_limit(&self) -> u64 {
        self.limit
    }
    pub fn clear_limit(&mut self) {
        self.limit = 0;
    }

    // Param is passed by value, moved
    pub fn set_limit(&mut self, v: u64) {
        self.limit = v;
    }

    // uint64 offset = 3;


    pub fn get_offset(&self) -> u64 {
        self.offset
    }
    pub fn clear_offset(&mut self) {
        self.offset = 0;
    }

    // Param is passed by value, moved
    pub fn set_offset(&mut self, v: u64) {
        self.offset = v;
    }
}

impl ::protobuf::Message for ReadRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.topic)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.limit = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.offset = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.topic.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.topic);
        }
        if self.limit != 0 {
            my_size += ::protobuf::rt::value_size(2, self.limit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.offset != 0 {
            my_size += ::protobuf::rt::value_size(3, self.offset, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.topic.is_empty() {
            os.write_string(1, &self.topic)?;
        }
        if self.limit != 0 {
            os.write_uint64(2, self.limit)?;
        }
        if self.offset != 0 {
            os.write_uint64(3, self.offset)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadRequest {
        ReadRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "topic",
                |m: &ReadRequest| { &m.topic },
                |m: &mut ReadRequest| { &mut m.topic },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "limit",
                |m: &ReadRequest| { &m.limit },
                |m: &mut ReadRequest| { &mut m.limit },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                "offset",
                |m: &ReadRequest| { &m.offset },
                |m: &mut ReadRequest| { &mut m.offset },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadRequest>(
                "ReadRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadRequest {
        static instance: ::protobuf::rt::LazyV2<ReadRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadRequest::new)
    }
}

impl ::protobuf::Clear for ReadRequest {
    fn clear(&mut self) {
        self.topic.clear();
        self.limit = 0;
        self.offset = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReadResponse {
    // message fields
    pub events: ::protobuf::RepeatedField<Event>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReadResponse {
    fn default() -> &'a ReadResponse {
        <ReadResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReadResponse {
    pub fn new() -> ReadResponse {
        ::std::default::Default::default()
    }

    // repeated .events.Event events = 1;


    pub fn get_events(&self) -> &[Event] {
        &self.events
    }
    pub fn clear_events(&mut self) {
        self.events.clear();
    }

    // Param is passed by value, moved
    pub fn set_events(&mut self, v: ::protobuf::RepeatedField<Event>) {
        self.events = v;
    }

    // Mutable pointer to the field.
    pub fn mut_events(&mut self) -> &mut ::protobuf::RepeatedField<Event> {
        &mut self.events
    }

    // Take field
    pub fn take_events(&mut self) -> ::protobuf::RepeatedField<Event> {
        ::std::mem::replace(&mut self.events, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ReadResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.events {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.events)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.events {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.events {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReadResponse {
        ReadResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "events",
                |m: &ReadResponse| { &m.events },
                |m: &mut ReadResponse| { &mut m.events },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ReadResponse>(
                "ReadResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ReadResponse {
        static instance: ::protobuf::rt::LazyV2<ReadResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ReadResponse::new)
    }
}

impl ::protobuf::Clear for ReadResponse {
    fn clear(&mut self) {
        self.events.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReadResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReadResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteRequest {
    // message fields
    pub event: ::protobuf::SingularPtrField<Event>,
    pub ttl: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteRequest {
    fn default() -> &'a WriteRequest {
        <WriteRequest as ::protobuf::Message>::default_instance()
    }
}

impl WriteRequest {
    pub fn new() -> WriteRequest {
        ::std::default::Default::default()
    }

    // .events.Event event = 1;


    pub fn get_event(&self) -> &Event {
        self.event.as_ref().unwrap_or_else(|| <Event as ::protobuf::Message>::default_instance())
    }
    pub fn clear_event(&mut self) {
        self.event.clear();
    }

    pub fn has_event(&self) -> bool {
        self.event.is_some()
    }

    // Param is passed by value, moved
    pub fn set_event(&mut self, v: Event) {
        self.event = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_event(&mut self) -> &mut Event {
        if self.event.is_none() {
            self.event.set_default();
        }
        self.event.as_mut().unwrap()
    }

    // Take field
    pub fn take_event(&mut self) -> Event {
        self.event.take().unwrap_or_else(|| Event::new())
    }

    // int64 ttl = 2;


    pub fn get_ttl(&self) -> i64 {
        self.ttl
    }
    pub fn clear_ttl(&mut self) {
        self.ttl = 0;
    }

    // Param is passed by value, moved
    pub fn set_ttl(&mut self, v: i64) {
        self.ttl = v;
    }
}

impl ::protobuf::Message for WriteRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.event {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.event)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ttl = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.event.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.ttl != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ttl, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.event.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.ttl != 0 {
            os.write_int64(2, self.ttl)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteRequest {
        WriteRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Event>>(
                "event",
                |m: &WriteRequest| { &m.event },
                |m: &mut WriteRequest| { &mut m.event },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                "ttl",
                |m: &WriteRequest| { &m.ttl },
                |m: &mut WriteRequest| { &mut m.ttl },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteRequest>(
                "WriteRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteRequest {
        static instance: ::protobuf::rt::LazyV2<WriteRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteRequest::new)
    }
}

impl ::protobuf::Clear for WriteRequest {
    fn clear(&mut self) {
        self.event.clear();
        self.ttl = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct WriteResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a WriteResponse {
    fn default() -> &'a WriteResponse {
        <WriteResponse as ::protobuf::Message>::default_instance()
    }
}

impl WriteResponse {
    pub fn new() -> WriteResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for WriteResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> WriteResponse {
        WriteResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<WriteResponse>(
                "WriteResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static WriteResponse {
        static instance: ::protobuf::rt::LazyV2<WriteResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(WriteResponse::new)
    }
}

impl ::protobuf::Clear for WriteResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for WriteResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for WriteResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AckRequest {
    // message fields
    pub id: ::std::string::String,
    pub success: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AckRequest {
    fn default() -> &'a AckRequest {
        <AckRequest as ::protobuf::Message>::default_instance()
    }
}

impl AckRequest {
    pub fn new() -> AckRequest {
        ::std::default::Default::default()
    }

    // string id = 1;


    pub fn get_id(&self) -> &str {
        &self.id
    }
    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    // bool success = 2;


    pub fn get_success(&self) -> bool {
        self.success
    }
    pub fn clear_success(&mut self) {
        self.success = false;
    }

    // Param is passed by value, moved
    pub fn set_success(&mut self, v: bool) {
        self.success = v;
    }
}

impl ::protobuf::Message for AckRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.success = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.success != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.success != false {
            os.write_bool(2, self.success)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AckRequest {
        AckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "id",
                |m: &AckRequest| { &m.id },
                |m: &mut AckRequest| { &mut m.id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                "success",
                |m: &AckRequest| { &m.success },
                |m: &mut AckRequest| { &mut m.success },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<AckRequest>(
                "AckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static AckRequest {
        static instance: ::protobuf::rt::LazyV2<AckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(AckRequest::new)
    }
}

impl ::protobuf::Clear for AckRequest {
    fn clear(&mut self) {
        self.id.clear();
        self.success = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13events/events.proto\x12\x06events\"\xdd\x01\n\x0ePublishRequest\
    \x12\x14\n\x05topic\x18\x01\x20\x01(\tR\x05topic\x12@\n\x08metadata\x18\
    \x02\x20\x03(\x0b2$.events.PublishRequest.MetadataEntryR\x08metadata\x12\
    \x18\n\x07payload\x18\x03\x20\x01(\x0cR\x07payload\x12\x1c\n\ttimestamp\
    \x18\x04\x20\x01(\x03R\ttimestamp\x1a;\n\rMetadataEntry\x12\x10\n\x03key\
    \x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\x02\x20\x01(\tR\x05va\
    lue:\x028\x01\"\x11\n\x0fPublishResponse\"\xab\x01\n\x0eConsumeRequest\
    \x12\x14\n\x05group\x18\x01\x20\x01(\tR\x05group\x12\x14\n\x05topic\x18\
    \x02\x20\x01(\tR\x05topic\x12\x16\n\x06offset\x18\x03\x20\x01(\x03R\x06o\
    ffset\x12\x19\n\x08auto_ack\x18\x04\x20\x01(\x08R\x07autoAck\x12\x19\n\
    \x08ack_wait\x18\x05\x20\x01(\x03R\x07ackWait\x12\x1f\n\x0bretry_limit\
    \x18\x06\x20\x01(\x03R\nretryLimit\"\xdb\x01\n\x05Event\x12\x0e\n\x02id\
    \x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05topic\x18\x02\x20\x01(\tR\x05top\
    ic\x127\n\x08metadata\x18\x03\x20\x03(\x0b2\x1b.events.Event.MetadataEnt\
    ryR\x08metadata\x12\x18\n\x07payload\x18\x04\x20\x01(\x0cR\x07payload\
    \x12\x1c\n\ttimestamp\x18\x05\x20\x01(\x03R\ttimestamp\x1a;\n\rMetadataE\
    ntry\x12\x10\n\x03key\x18\x01\x20\x01(\tR\x03key\x12\x14\n\x05value\x18\
    \x02\x20\x01(\tR\x05value:\x028\x01\"Q\n\x0bReadRequest\x12\x14\n\x05top\
    ic\x18\x01\x20\x01(\tR\x05topic\x12\x14\n\x05limit\x18\x02\x20\x01(\x04R\
    \x05limit\x12\x16\n\x06offset\x18\x03\x20\x01(\x04R\x06offset\"5\n\x0cRe\
    adResponse\x12%\n\x06events\x18\x01\x20\x03(\x0b2\r.events.EventR\x06eve\
    nts\"E\n\x0cWriteRequest\x12#\n\x05event\x18\x01\x20\x01(\x0b2\r.events.\
    EventR\x05event\x12\x10\n\x03ttl\x18\x02\x20\x01(\x03R\x03ttl\"\x0f\n\rW\
    riteResponse\"6\n\nAckRequest\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\
    \x12\x18\n\x07success\x18\x02\x20\x01(\x08R\x07success2x\n\x06Stream\x12\
    :\n\x07Publish\x12\x16.events.PublishRequest\x1a\x17.events.PublishRespo\
    nse\x122\n\x07Consume\x12\x16.events.ConsumeRequest\x1a\r.events.Event0\
    \x012p\n\x05Store\x121\n\x04Read\x12\x13.events.ReadRequest\x1a\x14.even\
    ts.ReadResponse\x124\n\x05Write\x12\x14.events.WriteRequest\x1a\x15.even\
    ts.WriteResponseB.Z,github.com/micro/micro/v3/proto/event;eventsJ\x85\
    \x11\n\x06\x12\x04\0\0>\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x0e\n\x08\n\x01\x08\x12\x03\x03\0C\n\t\n\x02\x08\
    \x0b\x12\x03\x03\0C\n\n\n\x02\x06\0\x12\x04\x05\0\x08\x01\n\n\n\x03\x06\
    \0\x01\x12\x03\x05\x08\x0e\n\x0b\n\x04\x06\0\x02\0\x12\x03\x06\x028\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\x06\x06\r\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\x06\x0e\x1c\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x06'6\n\x0b\n\
    \x04\x06\0\x02\x01\x12\x03\x07\x025\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x07\x06\r\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x07\x0e\x1c\n\x0c\n\
    \x05\x06\0\x02\x01\x06\x12\x03\x07'-\n\x0c\n\x05\x06\0\x02\x01\x03\x12\
    \x03\x07.3\n\n\n\x02\x06\x01\x12\x04\n\0\r\x01\n\n\n\x03\x06\x01\x01\x12\
    \x03\n\x08\r\n\x0b\n\x04\x06\x01\x02\0\x12\x03\x0b\x02/\n\x0c\n\x05\x06\
    \x01\x02\0\x01\x12\x03\x0b\x06\n\n\x0c\n\x05\x06\x01\x02\0\x02\x12\x03\
    \x0b\x0b\x16\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x03\x0b!-\n\x0b\n\x04\x06\
    \x01\x02\x01\x12\x03\x0c\x022\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03\
    \x0c\x06\x0b\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03\x0c\x0c\x18\n\x0c\n\
    \x05\x06\x01\x02\x01\x03\x12\x03\x0c#0\n\n\n\x02\x04\0\x12\x04\x0f\0\x14\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08\x16\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x10\x02\x13\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x10\x02\x0f\x18\n\x0c\
    \n\x05\x04\0\x02\0\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\
    \x12\x03\x10\t\x0e\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x10\x11\x12\n\x0b\
    \n\x04\x04\0\x02\x01\x12\x03\x11\x02#\n\r\n\x05\x04\0\x02\x01\x04\x12\
    \x04\x11\x02\x10\x13\n\x0c\n\x05\x04\0\x02\x01\x06\x12\x03\x11\x02\x15\n\
    \x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x11\x16\x1e\n\x0c\n\x05\x04\0\x02\
    \x01\x03\x12\x03\x11!\"\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x12\x02\x14\n\
    \r\n\x05\x04\0\x02\x02\x04\x12\x04\x12\x02\x11#\n\x0c\n\x05\x04\0\x02\
    \x02\x05\x12\x03\x12\x02\x07\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\
    \x08\x0f\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x12\x12\x13\n\x0b\n\x04\
    \x04\0\x02\x03\x12\x03\x13\x02\x16\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\
    \x13\x02\x12\x14\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x13\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x13\x08\x11\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x13\x14\x15\n\t\n\x02\x04\x01\x12\x03\x16\0\x1a\n\n\n\x03\
    \x04\x01\x01\x12\x03\x16\x08\x17\n\n\n\x02\x04\x02\x12\x04\x18\0\x20\x01\
    \n\n\n\x03\x04\x02\x01\x12\x03\x18\x08\x16\n\x0b\n\x04\x04\x02\x02\0\x12\
    \x03\x19\x02\x13\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x19\x02\x18\x18\n\
    \x0c\n\x05\x04\x02\x02\0\x05\x12\x03\x19\x02\x08\n\x0c\n\x05\x04\x02\x02\
    \0\x01\x12\x03\x19\t\x0e\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x19\x11\
    \x12\n\x0b\n\x04\x04\x02\x02\x01\x12\x03\x1a\x02\x13\n\r\n\x05\x04\x02\
    \x02\x01\x04\x12\x04\x1a\x02\x19\x13\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x1a\x02\x08\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1a\t\x0e\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x1a\x11\x12\n\x0b\n\x04\x04\x02\x02\
    \x02\x12\x03\x1b\x02\x13\n\r\n\x05\x04\x02\x02\x02\x04\x12\x04\x1b\x02\
    \x1a\x13\n\x0c\n\x05\x04\x02\x02\x02\x05\x12\x03\x1b\x02\x07\n\x0c\n\x05\
    \x04\x02\x02\x02\x01\x12\x03\x1b\x08\x0e\n\x0c\n\x05\x04\x02\x02\x02\x03\
    \x12\x03\x1b\x11\x12\n\x0b\n\x04\x04\x02\x02\x03\x12\x03\x1c\x02\x14\n\r\
    \n\x05\x04\x02\x02\x03\x04\x12\x04\x1c\x02\x1b\x13\n\x0c\n\x05\x04\x02\
    \x02\x03\x05\x12\x03\x1c\x02\x06\n\x0c\n\x05\x04\x02\x02\x03\x01\x12\x03\
    \x1c\x07\x0f\n\x0c\n\x05\x04\x02\x02\x03\x03\x12\x03\x1c\x12\x13\n&\n\
    \x04\x04\x02\x02\x04\x12\x03\x1e\x02\x15\x1a\x19\x20duration\x20in\x20na\
    noseconds\n\n\r\n\x05\x04\x02\x02\x04\x04\x12\x04\x1e\x02\x1c\x14\n\x0c\
    \n\x05\x04\x02\x02\x04\x05\x12\x03\x1e\x02\x07\n\x0c\n\x05\x04\x02\x02\
    \x04\x01\x12\x03\x1e\x08\x10\n\x0c\n\x05\x04\x02\x02\x04\x03\x12\x03\x1e\
    \x13\x14\n\x0b\n\x04\x04\x02\x02\x05\x12\x03\x1f\x02\x18\n\r\n\x05\x04\
    \x02\x02\x05\x04\x12\x04\x1f\x02\x1e\x15\n\x0c\n\x05\x04\x02\x02\x05\x05\
    \x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x02\x02\x05\x01\x12\x03\x1f\x08\x13\
    \n\x0c\n\x05\x04\x02\x02\x05\x03\x12\x03\x1f\x16\x17\n\n\n\x02\x04\x03\
    \x12\x04\"\0(\x01\n\n\n\x03\x04\x03\x01\x12\x03\"\x08\r\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03#\x02\x10\n\r\n\x05\x04\x03\x02\0\x04\x12\x04#\x02\"\
    \x0f\n\x0c\n\x05\x04\x03\x02\0\x05\x12\x03#\x02\x08\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x03#\t\x0b\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03#\x0e\x0f\
    \n\x0b\n\x04\x04\x03\x02\x01\x12\x03$\x02\x13\n\r\n\x05\x04\x03\x02\x01\
    \x04\x12\x04$\x02#\x10\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03$\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03$\t\x0e\n\x0c\n\x05\x04\x03\x02\
    \x01\x03\x12\x03$\x11\x12\n\x0b\n\x04\x04\x03\x02\x02\x12\x03%\x02#\n\r\
    \n\x05\x04\x03\x02\x02\x04\x12\x04%\x02$\x13\n\x0c\n\x05\x04\x03\x02\x02\
    \x06\x12\x03%\x02\x15\n\x0c\n\x05\x04\x03\x02\x02\x01\x12\x03%\x16\x1e\n\
    \x0c\n\x05\x04\x03\x02\x02\x03\x12\x03%!\"\n\x0b\n\x04\x04\x03\x02\x03\
    \x12\x03&\x02\x14\n\r\n\x05\x04\x03\x02\x03\x04\x12\x04&\x02%#\n\x0c\n\
    \x05\x04\x03\x02\x03\x05\x12\x03&\x02\x07\n\x0c\n\x05\x04\x03\x02\x03\
    \x01\x12\x03&\x08\x0f\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03&\x12\x13\n\
    \x0b\n\x04\x04\x03\x02\x04\x12\x03'\x02\x16\n\r\n\x05\x04\x03\x02\x04\
    \x04\x12\x04'\x02&\x14\n\x0c\n\x05\x04\x03\x02\x04\x05\x12\x03'\x02\x07\
    \n\x0c\n\x05\x04\x03\x02\x04\x01\x12\x03'\x08\x11\n\x0c\n\x05\x04\x03\
    \x02\x04\x03\x12\x03'\x14\x15\n\n\n\x02\x04\x04\x12\x04*\0.\x01\n\n\n\
    \x03\x04\x04\x01\x12\x03*\x08\x13\n\x0b\n\x04\x04\x04\x02\0\x12\x03+\x02\
    \x13\n\r\n\x05\x04\x04\x02\0\x04\x12\x04+\x02*\x15\n\x0c\n\x05\x04\x04\
    \x02\0\x05\x12\x03+\x02\x08\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03+\t\x0e\
    \n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03+\x11\x12\n\x0b\n\x04\x04\x04\x02\
    \x01\x12\x03,\x02\x13\n\r\n\x05\x04\x04\x02\x01\x04\x12\x04,\x02+\x13\n\
    \x0c\n\x05\x04\x04\x02\x01\x05\x12\x03,\x02\x08\n\x0c\n\x05\x04\x04\x02\
    \x01\x01\x12\x03,\t\x0e\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03,\x11\x12\
    \n\x0b\n\x04\x04\x04\x02\x02\x12\x03-\x08\x1a\n\r\n\x05\x04\x04\x02\x02\
    \x04\x12\x04-\x08,\x13\n\x0c\n\x05\x04\x04\x02\x02\x05\x12\x03-\x08\x0e\
    \n\x0c\n\x05\x04\x04\x02\x02\x01\x12\x03-\x0f\x15\n\x0c\n\x05\x04\x04\
    \x02\x02\x03\x12\x03-\x18\x19\n\n\n\x02\x04\x05\x12\x040\02\x01\n\n\n\
    \x03\x04\x05\x01\x12\x030\x08\x14\n\x0b\n\x04\x04\x05\x02\0\x12\x031\x02\
    \x1c\n\x0c\n\x05\x04\x05\x02\0\x04\x12\x031\x02\n\n\x0c\n\x05\x04\x05\
    \x02\0\x06\x12\x031\x0b\x10\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x031\x11\
    \x17\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x031\x1a\x1b\n\n\n\x02\x04\x06\
    \x12\x044\07\x01\n\n\n\x03\x04\x06\x01\x12\x034\x08\x14\n\x0b\n\x04\x04\
    \x06\x02\0\x12\x035\x02\x12\n\r\n\x05\x04\x06\x02\0\x04\x12\x045\x024\
    \x16\n\x0c\n\x05\x04\x06\x02\0\x06\x12\x035\x02\x07\n\x0c\n\x05\x04\x06\
    \x02\0\x01\x12\x035\x08\r\n\x0c\n\x05\x04\x06\x02\0\x03\x12\x035\x10\x11\
    \n\x0b\n\x04\x04\x06\x02\x01\x12\x036\x02\x10\n\r\n\x05\x04\x06\x02\x01\
    \x04\x12\x046\x025\x12\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x036\x02\x07\
    \n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x036\x08\x0b\n\x0c\n\x05\x04\x06\
    \x02\x01\x03\x12\x036\x0e\x0f\n\t\n\x02\x04\x07\x12\x039\0\x18\n\n\n\x03\
    \x04\x07\x01\x12\x039\x08\x15\n\n\n\x02\x04\x08\x12\x04;\0>\x01\n\n\n\
    \x03\x04\x08\x01\x12\x03;\x08\x12\n\x0b\n\x04\x04\x08\x02\0\x12\x03<\x02\
    \x10\n\r\n\x05\x04\x08\x02\0\x04\x12\x04<\x02;\x14\n\x0c\n\x05\x04\x08\
    \x02\0\x05\x12\x03<\x02\x08\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03<\t\x0b\
    \n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03<\x0e\x0f\n\x0b\n\x04\x04\x08\x02\
    \x01\x12\x03=\x02\x13\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04=\x02<\x10\n\
    \x0c\n\x05\x04\x08\x02\x01\x05\x12\x03=\x02\x06\n\x0c\n\x05\x04\x08\x02\
    \x01\x01\x12\x03=\x07\x0e\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03=\x11\
    \x12b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
