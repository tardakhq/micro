# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from events import events_pb2 as events_dot_events__pb2


class StreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/events.Stream/Publish',
                request_serializer=events_dot_events__pb2.PublishRequest.SerializeToString,
                response_deserializer=events_dot_events__pb2.PublishResponse.FromString,
                )
        self.Consume = channel.unary_stream(
                '/events.Stream/Consume',
                request_serializer=events_dot_events__pb2.ConsumeRequest.SerializeToString,
                response_deserializer=events_dot_events__pb2.Event.FromString,
                )


class StreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consume(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=events_dot_events__pb2.PublishRequest.FromString,
                    response_serializer=events_dot_events__pb2.PublishResponse.SerializeToString,
            ),
            'Consume': grpc.unary_stream_rpc_method_handler(
                    servicer.Consume,
                    request_deserializer=events_dot_events__pb2.ConsumeRequest.FromString,
                    response_serializer=events_dot_events__pb2.Event.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'events.Stream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Stream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/events.Stream/Publish',
            events_dot_events__pb2.PublishRequest.SerializeToString,
            events_dot_events__pb2.PublishResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Consume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/events.Stream/Consume',
            events_dot_events__pb2.ConsumeRequest.SerializeToString,
            events_dot_events__pb2.Event.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class StoreStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Read = channel.unary_unary(
                '/events.Store/Read',
                request_serializer=events_dot_events__pb2.ReadRequest.SerializeToString,
                response_deserializer=events_dot_events__pb2.ReadResponse.FromString,
                )
        self.Write = channel.unary_unary(
                '/events.Store/Write',
                request_serializer=events_dot_events__pb2.WriteRequest.SerializeToString,
                response_deserializer=events_dot_events__pb2.WriteResponse.FromString,
                )


class StoreServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Read(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Write(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StoreServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Read': grpc.unary_unary_rpc_method_handler(
                    servicer.Read,
                    request_deserializer=events_dot_events__pb2.ReadRequest.FromString,
                    response_serializer=events_dot_events__pb2.ReadResponse.SerializeToString,
            ),
            'Write': grpc.unary_unary_rpc_method_handler(
                    servicer.Write,
                    request_deserializer=events_dot_events__pb2.WriteRequest.FromString,
                    response_serializer=events_dot_events__pb2.WriteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'events.Store', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Store(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Read(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/events.Store/Read',
            events_dot_events__pb2.ReadRequest.SerializeToString,
            events_dot_events__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Write(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/events.Store/Write',
            events_dot_events__pb2.WriteRequest.SerializeToString,
            events_dot_events__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
